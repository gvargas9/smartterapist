{"ast":null,"code":"/**\n * User Model\n * \n * Provides methods for interacting with the users table in Supabase.\n */import{supabase}from'../services/supabaseClient';export class UserModel{/**\n   * Get a user by ID\n   * @param id - User ID\n   * @returns The user or null if not found\n   */static async getById(id){const{data,error}=await supabase.from('users').select('*').eq('id',id).single();if(error){console.error('Error fetching user:',error);return null;}return data;}/**\n   * Get a user by email\n   * @param email - User email\n   * @returns The user or null if not found\n   */static async getByEmail(email){const{data,error}=await supabase.from('users').select('*').eq('email',email).single();if(error){console.error('Error fetching user by email:',error);return null;}return data;}/**\n   * Get users by role\n   * @param role - User role (client, therapist, admin)\n   * @returns Array of users with the specified role\n   */static async getByRole(role){const{data,error}=await supabase.from('users').select('*').eq('role',role);if(error){console.error('Error fetching users by role:',error);return[];}return data||[];}/**\n   * Create a new user\n   * @param user - User data to insert\n   * @returns The created user or null if there was an error\n   */static async create(user){const{data,error}=await supabase.from('users').insert(user).select().single();if(error){console.error('Error creating user:',error);return null;}return data;}/**\n   * Update a user\n   * @param id - User ID\n   * @param updates - User data to update\n   * @returns The updated user or null if there was an error\n   */static async update(id,updates){const{data,error}=await supabase.from('users').update(updates).eq('id',id).select().single();if(error){console.error('Error updating user:',error);return null;}return data;}/**\n   * Delete a user\n   * @param id - User ID\n   * @returns True if successful, false otherwise\n   */static async delete(id){const{error}=await supabase.from('users').delete().eq('id',id);if(error){console.error('Error deleting user:',error);return false;}return true;}/**\n   * List all users with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of users\n   */static async list(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const from=page*limit;const to=from+limit-1;const{data,error}=await supabase.from('users').select('*').range(from,to).order('created_at',{ascending:false});if(error){console.error('Error listing users:',error);return[];}return data||[];}/**\n   * Count total number of users\n   * @returns Total count of users\n   */static async count(){const{count,error}=await supabase.from('users').select('*',{count:'exact',head:true});if(error){console.error('Error counting users:',error);return 0;}return count||0;}}","map":{"version":3,"names":["supabase","UserModel","getById","id","data","error","from","select","eq","single","console","getByEmail","email","getByRole","role","create","user","insert","update","updates","delete","list","page","arguments","length","undefined","limit","to","range","order","ascending","count","head"],"sources":["/Users/gio/development/smartterapist/client/src/models/UserModel.ts"],"sourcesContent":["/**\n * User Model\n * \n * Provides methods for interacting with the users table in Supabase.\n */\n\nimport { supabase } from '../services/supabaseClient';\nimport { User, InsertTables, UpdateTables } from '../types/supabase';\n\nexport class UserModel {\n  /**\n   * Get a user by ID\n   * @param id - User ID\n   * @returns The user or null if not found\n   */\n  static async getById(id: string): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get a user by email\n   * @param email - User email\n   * @returns The user or null if not found\n   */\n  static async getByEmail(email: string): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('email', email)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching user by email:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get users by role\n   * @param role - User role (client, therapist, admin)\n   * @returns Array of users with the specified role\n   */\n  static async getByRole(role: 'client' | 'therapist' | 'admin'): Promise<User[]> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('role', role);\n    \n    if (error) {\n      console.error('Error fetching users by role:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Create a new user\n   * @param user - User data to insert\n   * @returns The created user or null if there was an error\n   */\n  static async create(user: InsertTables<'users'>): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .insert(user)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating user:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Update a user\n   * @param id - User ID\n   * @param updates - User data to update\n   * @returns The updated user or null if there was an error\n   */\n  static async update(id: string, updates: UpdateTables<'users'>): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating user:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Delete a user\n   * @param id - User ID\n   * @returns True if successful, false otherwise\n   */\n  static async delete(id: string): Promise<boolean> {\n    const { error } = await supabase\n      .from('users')\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      console.error('Error deleting user:', error);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * List all users with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of users\n   */\n  static async list(page: number = 0, limit: number = 10): Promise<User[]> {\n    const from = page * limit;\n    const to = from + limit - 1;\n    \n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .range(from, to)\n      .order('created_at', { ascending: false });\n    \n    if (error) {\n      console.error('Error listing users:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Count total number of users\n   * @returns Total count of users\n   */\n  static async count(): Promise<number> {\n    const { count, error } = await supabase\n      .from('users')\n      .select('*', { count: 'exact', head: true });\n    \n    if (error) {\n      console.error('Error counting users:', error);\n      return 0;\n    }\n    \n    return count || 0;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GAEA,OAASA,QAAQ,KAAQ,4BAA4B,CAGrD,MAAO,MAAM,CAAAC,SAAU,CACrB;AACF;AACA;AACA;AACA,KACE,YAAa,CAAAC,OAAOA,CAACC,EAAU,CAAwB,CACrD,KAAM,CAAEC,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CACnCM,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,CAAEL,EAAE,CAAC,CACZM,MAAM,CAAC,CAAC,CAEX,GAAIJ,KAAK,CAAE,CACTK,OAAO,CAACL,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,MAAO,KAAI,CACb,CAEA,MAAO,CAAAD,IAAI,CACb,CAEA;AACF;AACA;AACA;AACA,KACE,YAAa,CAAAO,UAAUA,CAACC,KAAa,CAAwB,CAC3D,KAAM,CAAER,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CACnCM,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,OAAO,CAAEI,KAAK,CAAC,CAClBH,MAAM,CAAC,CAAC,CAEX,GAAIJ,KAAK,CAAE,CACTK,OAAO,CAACL,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,MAAO,KAAI,CACb,CAEA,MAAO,CAAAD,IAAI,CACb,CAEA;AACF;AACA;AACA;AACA,KACE,YAAa,CAAAS,SAASA,CAACC,IAAsC,CAAmB,CAC9E,KAAM,CAAEV,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CACnCM,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,MAAM,CAAEM,IAAI,CAAC,CAEnB,GAAIT,KAAK,CAAE,CACTK,OAAO,CAACL,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,MAAO,EAAE,CACX,CAEA,MAAO,CAAAD,IAAI,EAAI,EAAE,CACnB,CAEA;AACF;AACA;AACA;AACA,KACE,YAAa,CAAAW,MAAMA,CAACC,IAA2B,CAAwB,CACrE,KAAM,CAAEZ,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CACnCM,IAAI,CAAC,OAAO,CAAC,CACbW,MAAM,CAACD,IAAI,CAAC,CACZT,MAAM,CAAC,CAAC,CACRE,MAAM,CAAC,CAAC,CAEX,GAAIJ,KAAK,CAAE,CACTK,OAAO,CAACL,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,MAAO,KAAI,CACb,CAEA,MAAO,CAAAD,IAAI,CACb,CAEA;AACF;AACA;AACA;AACA;AACA,KACE,YAAa,CAAAc,MAAMA,CAACf,EAAU,CAAEgB,OAA8B,CAAwB,CACpF,KAAM,CAAEf,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CACnCM,IAAI,CAAC,OAAO,CAAC,CACbY,MAAM,CAACC,OAAO,CAAC,CACfX,EAAE,CAAC,IAAI,CAAEL,EAAE,CAAC,CACZI,MAAM,CAAC,CAAC,CACRE,MAAM,CAAC,CAAC,CAEX,GAAIJ,KAAK,CAAE,CACTK,OAAO,CAACL,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,MAAO,KAAI,CACb,CAEA,MAAO,CAAAD,IAAI,CACb,CAEA;AACF;AACA;AACA;AACA,KACE,YAAa,CAAAgB,MAAMA,CAACjB,EAAU,CAAoB,CAChD,KAAM,CAAEE,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CAC7BM,IAAI,CAAC,OAAO,CAAC,CACbc,MAAM,CAAC,CAAC,CACRZ,EAAE,CAAC,IAAI,CAAEL,EAAE,CAAC,CAEf,GAAIE,KAAK,CAAE,CACTK,OAAO,CAACL,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,MAAO,MAAK,CACd,CAEA,MAAO,KAAI,CACb,CAEA;AACF;AACA;AACA;AACA;AACA,KACE,YAAa,CAAAgB,IAAIA,CAAA,CAAwD,IAAvD,CAAAC,IAAY,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,IAAE,CAAAG,KAAa,CAAAH,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACpD,KAAM,CAAAjB,IAAI,CAAGgB,IAAI,CAAGI,KAAK,CACzB,KAAM,CAAAC,EAAE,CAAGrB,IAAI,CAAGoB,KAAK,CAAG,CAAC,CAE3B,KAAM,CAAEtB,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CACnCM,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAC,CACXqB,KAAK,CAACtB,IAAI,CAAEqB,EAAE,CAAC,CACfE,KAAK,CAAC,YAAY,CAAE,CAAEC,SAAS,CAAE,KAAM,CAAC,CAAC,CAE5C,GAAIzB,KAAK,CAAE,CACTK,OAAO,CAACL,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,MAAO,EAAE,CACX,CAEA,MAAO,CAAAD,IAAI,EAAI,EAAE,CACnB,CAEA;AACF;AACA;AACA,KACE,YAAa,CAAA2B,KAAKA,CAAA,CAAoB,CACpC,KAAM,CAAEA,KAAK,CAAE1B,KAAM,CAAC,CAAG,KAAM,CAAAL,QAAQ,CACpCM,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,GAAG,CAAE,CAAEwB,KAAK,CAAE,OAAO,CAAEC,IAAI,CAAE,IAAK,CAAC,CAAC,CAE9C,GAAI3B,KAAK,CAAE,CACTK,OAAO,CAACL,KAAK,CAAC,uBAAuB,CAAEA,KAAK,CAAC,CAC7C,MAAO,EAAC,CACV,CAEA,MAAO,CAAA0B,KAAK,EAAI,CAAC,CACnB,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}