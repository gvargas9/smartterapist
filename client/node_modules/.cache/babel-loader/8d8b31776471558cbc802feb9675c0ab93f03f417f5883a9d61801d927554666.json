{"ast":null,"code":"/**\n * Voice Service\n * \n * This service provides methods for text-to-speech and speech-to-text functionality\n * using the ultravox.ai API.\n */import{supabase}from'./supabaseClient';/**\n * Get the user's voice settings from Supabase\n * @param {string} userId - The user's ID\n * @returns {Promise<Object>} - Voice settings object\n */export const getUserVoiceSettings=async userId=>{try{const{data,error}=await supabase.from('users').select('voice_settings').eq('id',userId).single();if(error)throw error;return(data===null||data===void 0?void 0:data.voice_settings)||{enabled:true,preferredVoice:'en-US-Neural2-F',speed:1.0,pitch:1.0};}catch(error){console.error('Error fetching voice settings:',error);return{enabled:true,preferredVoice:'en-US-Neural2-F',speed:1.0,pitch:1.0};}};/**\n * Update the user's voice settings in Supabase\n * @param {string} userId - The user's ID\n * @param {Object} settings - Voice settings object\n * @returns {Promise<boolean>} - Success status\n */export const updateUserVoiceSettings=async(userId,settings)=>{try{const{error}=await supabase.from('users').update({voice_settings:settings}).eq('id',userId);if(error)throw error;return true;}catch(error){console.error('Error updating voice settings:',error);return false;}};/**\n * Convert speech to text using ultravox.ai\n * @param {Blob} audioBlob - Audio blob from recording\n * @param {string} language - Language code (e.g., 'en-US')\n * @returns {Promise<string>} - Transcribed text\n */export const speechToText=async function(audioBlob){let language=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'en-US';try{// Get ultravox.ai API key from environment variables or user settings\nconst apiKey=process.env.REACT_APP_ULTRAVOX_API_KEY;if(!apiKey){throw new Error('Ultravox API key not found');}// Create form data for the API request\nconst formData=new FormData();formData.append('audio',audioBlob);formData.append('language',language);// Call the ultravox.ai API\nconst response=await fetch('https://api.ultravox.ai/v1/speech-to-text',{method:'POST',headers:{'Authorization':`Bearer ${apiKey}`},body:formData});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Speech-to-text failed');}const data=await response.json();return data.text||'';}catch(error){console.error('Speech-to-text error:',error);throw error;}};/**\n * Convert text to speech using ultravox.ai\n * @param {string} text - Text to convert to speech\n * @param {Object} options - TTS options\n * @returns {Promise<Blob>} - Audio blob\n */export const textToSpeech=async function(text){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{// Get ultravox.ai API key from environment variables or user settings\nconst apiKey=process.env.REACT_APP_ULTRAVOX_API_KEY;if(!apiKey){throw new Error('Ultravox API key not found');}// Default options\nconst defaultOptions={voice:'en-US-Neural2-F',speed:1.0,pitch:1.0};// Merge default options with provided options\nconst ttsOptions={...defaultOptions,...options};// Call the ultravox.ai API\nconst response=await fetch('https://api.ultravox.ai/v1/text-to-speech',{method:'POST',headers:{'Authorization':`Bearer ${apiKey}`,'Content-Type':'application/json'},body:JSON.stringify({text,voice:ttsOptions.voice,speed:ttsOptions.speed,pitch:ttsOptions.pitch})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Text-to-speech failed');}// Get audio blob from response\nconst audioBlob=await response.blob();return audioBlob;}catch(error){console.error('Text-to-speech error:',error);throw error;}};/**\n * Play audio from a blob\n * @param {Blob} audioBlob - Audio blob to play\n * @returns {Promise<void>}\n */export const playAudio=async audioBlob=>{try{const audioUrl=URL.createObjectURL(audioBlob);const audio=new Audio(audioUrl);return new Promise((resolve,reject)=>{audio.onended=()=>{URL.revokeObjectURL(audioUrl);resolve();};audio.onerror=error=>{URL.revokeObjectURL(audioUrl);reject(error);};audio.play();});}catch(error){console.error('Error playing audio:',error);throw error;}};export const voiceService={getUserVoiceSettings,updateUserVoiceSettings,speechToText,textToSpeech,playAudio};export default voiceService;","map":{"version":3,"names":["supabase","getUserVoiceSettings","userId","data","error","from","select","eq","single","voice_settings","enabled","preferredVoice","speed","pitch","console","updateUserVoiceSettings","settings","update","speechToText","audioBlob","language","arguments","length","undefined","apiKey","process","env","REACT_APP_ULTRAVOX_API_KEY","Error","formData","FormData","append","response","fetch","method","headers","body","ok","errorData","json","message","text","textToSpeech","options","defaultOptions","voice","ttsOptions","JSON","stringify","blob","playAudio","audioUrl","URL","createObjectURL","audio","Audio","Promise","resolve","reject","onended","revokeObjectURL","onerror","play","voiceService"],"sources":["/Users/gio/development/smartterapist/client/src/services/voiceService.js"],"sourcesContent":["/**\n * Voice Service\n * \n * This service provides methods for text-to-speech and speech-to-text functionality\n * using the ultravox.ai API.\n */\n\nimport { supabase } from './supabaseClient';\n\n/**\n * Get the user's voice settings from Supabase\n * @param {string} userId - The user's ID\n * @returns {Promise<Object>} - Voice settings object\n */\nexport const getUserVoiceSettings = async (userId) => {\n  try {\n    const { data, error } = await supabase\n      .from('users')\n      .select('voice_settings')\n      .eq('id', userId)\n      .single();\n      \n    if (error) throw error;\n    \n    return data?.voice_settings || {\n      enabled: true,\n      preferredVoice: 'en-US-Neural2-F',\n      speed: 1.0,\n      pitch: 1.0\n    };\n  } catch (error) {\n    console.error('Error fetching voice settings:', error);\n    return {\n      enabled: true,\n      preferredVoice: 'en-US-Neural2-F',\n      speed: 1.0,\n      pitch: 1.0\n    };\n  }\n};\n\n/**\n * Update the user's voice settings in Supabase\n * @param {string} userId - The user's ID\n * @param {Object} settings - Voice settings object\n * @returns {Promise<boolean>} - Success status\n */\nexport const updateUserVoiceSettings = async (userId, settings) => {\n  try {\n    const { error } = await supabase\n      .from('users')\n      .update({ voice_settings: settings })\n      .eq('id', userId);\n      \n    if (error) throw error;\n    \n    return true;\n  } catch (error) {\n    console.error('Error updating voice settings:', error);\n    return false;\n  }\n};\n\n/**\n * Convert speech to text using ultravox.ai\n * @param {Blob} audioBlob - Audio blob from recording\n * @param {string} language - Language code (e.g., 'en-US')\n * @returns {Promise<string>} - Transcribed text\n */\nexport const speechToText = async (audioBlob, language = 'en-US') => {\n  try {\n    // Get ultravox.ai API key from environment variables or user settings\n    const apiKey = process.env.REACT_APP_ULTRAVOX_API_KEY;\n    \n    if (!apiKey) {\n      throw new Error('Ultravox API key not found');\n    }\n    \n    // Create form data for the API request\n    const formData = new FormData();\n    formData.append('audio', audioBlob);\n    formData.append('language', language);\n    \n    // Call the ultravox.ai API\n    const response = await fetch('https://api.ultravox.ai/v1/speech-to-text', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: formData\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Speech-to-text failed');\n    }\n    \n    const data = await response.json();\n    return data.text || '';\n  } catch (error) {\n    console.error('Speech-to-text error:', error);\n    throw error;\n  }\n};\n\n/**\n * Convert text to speech using ultravox.ai\n * @param {string} text - Text to convert to speech\n * @param {Object} options - TTS options\n * @returns {Promise<Blob>} - Audio blob\n */\nexport const textToSpeech = async (text, options = {}) => {\n  try {\n    // Get ultravox.ai API key from environment variables or user settings\n    const apiKey = process.env.REACT_APP_ULTRAVOX_API_KEY;\n    \n    if (!apiKey) {\n      throw new Error('Ultravox API key not found');\n    }\n    \n    // Default options\n    const defaultOptions = {\n      voice: 'en-US-Neural2-F',\n      speed: 1.0,\n      pitch: 1.0\n    };\n    \n    // Merge default options with provided options\n    const ttsOptions = { ...defaultOptions, ...options };\n    \n    // Call the ultravox.ai API\n    const response = await fetch('https://api.ultravox.ai/v1/text-to-speech', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text,\n        voice: ttsOptions.voice,\n        speed: ttsOptions.speed,\n        pitch: ttsOptions.pitch\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Text-to-speech failed');\n    }\n    \n    // Get audio blob from response\n    const audioBlob = await response.blob();\n    return audioBlob;\n  } catch (error) {\n    console.error('Text-to-speech error:', error);\n    throw error;\n  }\n};\n\n/**\n * Play audio from a blob\n * @param {Blob} audioBlob - Audio blob to play\n * @returns {Promise<void>}\n */\nexport const playAudio = async (audioBlob) => {\n  try {\n    const audioUrl = URL.createObjectURL(audioBlob);\n    const audio = new Audio(audioUrl);\n    \n    return new Promise((resolve, reject) => {\n      audio.onended = () => {\n        URL.revokeObjectURL(audioUrl);\n        resolve();\n      };\n      \n      audio.onerror = (error) => {\n        URL.revokeObjectURL(audioUrl);\n        reject(error);\n      };\n      \n      audio.play();\n    });\n  } catch (error) {\n    console.error('Error playing audio:', error);\n    throw error;\n  }\n};\n\nexport const voiceService = {\n  getUserVoiceSettings,\n  updateUserVoiceSettings,\n  speechToText,\n  textToSpeech,\n  playAudio\n};\n\nexport default voiceService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}