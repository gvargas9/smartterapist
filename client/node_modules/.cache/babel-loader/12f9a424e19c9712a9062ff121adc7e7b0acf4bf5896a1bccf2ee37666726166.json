{"ast":null,"code":"/**\n * Internationalization (i18n) configuration\n * \n * This file sets up the i18next library for multi-lingual support across the application.\n * Translations are fetched from Supabase instead of static JSON files.\n */\n\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { fetchTranslations } from '../services/translationService';\n\n// Custom backend that loads translations from Supabase\nconst SupabaseBackend = {\n  type: 'backend',\n  init: () => {},\n  read: async (language, namespace, callback) => {\n    try {\n      console.log(`Loading translations for language: ${language}, namespace: ${namespace}`);\n\n      // Fetch translations from Supabase\n      const translations = await fetchTranslations(language, namespace);\n      console.log(`Loaded translations for ${language}:`, translations);\n\n      // Return the translations to i18next\n      callback(null, translations);\n    } catch (error) {\n      console.error(`Error loading ${language} translations:`, error);\n      callback(error, null);\n    }\n  }\n};\n\n// Initialize i18next\ni18n\n// Use our custom Supabase backend\n.use(SupabaseBackend)\n// Detect user language\n.use(LanguageDetector)\n// Pass the i18n instance to react-i18next\n.use(initReactI18next)\n// Initialize i18next\n.init({\n  fallbackLng: 'en',\n  debug: process.env.NODE_ENV === 'development',\n  interpolation: {\n    escapeValue: false // React already escapes values\n  },\n  // Detection options\n  detection: {\n    order: ['localStorage', 'navigator'],\n    caches: ['localStorage']\n  },\n  // React options\n  react: {\n    useSuspense: true\n  },\n  // Load translations immediately\n  partialBundledLanguages: true\n});\nexport default i18n;","map":{"version":3,"names":["i18n","initReactI18next","LanguageDetector","Backend","fetchTranslations","SupabaseBackend","type","init","read","language","namespace","callback","console","log","translations","error","use","fallbackLng","debug","process","env","NODE_ENV","interpolation","escapeValue","detection","order","caches","react","useSuspense","partialBundledLanguages"],"sources":["/Users/gio/development/smartterapist/client/src/i18n/index.js"],"sourcesContent":["/**\n * Internationalization (i18n) configuration\n * \n * This file sets up the i18next library for multi-lingual support across the application.\n * Translations are fetched from Supabase instead of static JSON files.\n */\n\nimport i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport Backend from 'i18next-http-backend';\nimport { fetchTranslations } from '../services/translationService';\n\n// Custom backend that loads translations from Supabase\nconst SupabaseBackend = {\n  type: 'backend',\n  init: () => {},\n  read: async (language, namespace, callback) => {\n    try {\n      console.log(`Loading translations for language: ${language}, namespace: ${namespace}`);\n      \n      // Fetch translations from Supabase\n      const translations = await fetchTranslations(language, namespace);\n      \n      console.log(`Loaded translations for ${language}:`, translations);\n      \n      // Return the translations to i18next\n      callback(null, translations);\n    } catch (error) {\n      console.error(`Error loading ${language} translations:`, error);\n      callback(error, null);\n    }\n  },\n};\n\n// Initialize i18next\ni18n\n  // Use our custom Supabase backend\n  .use(SupabaseBackend)\n  // Detect user language\n  .use(LanguageDetector)\n  // Pass the i18n instance to react-i18next\n  .use(initReactI18next)\n  // Initialize i18next\n  .init({\n    fallbackLng: 'en',\n    debug: process.env.NODE_ENV === 'development',\n    \n    interpolation: {\n      escapeValue: false, // React already escapes values\n    },\n    \n    // Detection options\n    detection: {\n      order: ['localStorage', 'navigator'],\n      caches: ['localStorage'],\n    },\n    \n    // React options\n    react: {\n      useSuspense: true,\n    },\n    \n    // Load translations immediately\n    partialBundledLanguages: true,\n  });\n\nexport default i18n;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,IAAI,MAAM,SAAS;AAC1B,SAASC,gBAAgB,QAAQ,eAAe;AAChD,OAAOC,gBAAgB,MAAM,kCAAkC;AAC/D,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA,MAAMC,eAAe,GAAG;EACtBC,IAAI,EAAE,SAAS;EACfC,IAAI,EAAEA,CAAA,KAAM,CAAC,CAAC;EACdC,IAAI,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,KAAK;IAC7C,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,sCAAsCJ,QAAQ,gBAAgBC,SAAS,EAAE,CAAC;;MAEtF;MACA,MAAMI,YAAY,GAAG,MAAMV,iBAAiB,CAACK,QAAQ,EAAEC,SAAS,CAAC;MAEjEE,OAAO,CAACC,GAAG,CAAC,2BAA2BJ,QAAQ,GAAG,EAAEK,YAAY,CAAC;;MAEjE;MACAH,QAAQ,CAAC,IAAI,EAAEG,YAAY,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,iBAAiBN,QAAQ,gBAAgB,EAAEM,KAAK,CAAC;MAC/DJ,QAAQ,CAACI,KAAK,EAAE,IAAI,CAAC;IACvB;EACF;AACF,CAAC;;AAED;AACAf;AACE;AAAA,CACCgB,GAAG,CAACX,eAAe;AACpB;AAAA,CACCW,GAAG,CAACd,gBAAgB;AACrB;AAAA,CACCc,GAAG,CAACf,gBAAgB;AACrB;AAAA,CACCM,IAAI,CAAC;EACJU,WAAW,EAAE,IAAI;EACjBC,KAAK,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;EAE7CC,aAAa,EAAE;IACbC,WAAW,EAAE,KAAK,CAAE;EACtB,CAAC;EAED;EACAC,SAAS,EAAE;IACTC,KAAK,EAAE,CAAC,cAAc,EAAE,WAAW,CAAC;IACpCC,MAAM,EAAE,CAAC,cAAc;EACzB,CAAC;EAED;EACAC,KAAK,EAAE;IACLC,WAAW,EAAE;EACf,CAAC;EAED;EACAC,uBAAuB,EAAE;AAC3B,CAAC,CAAC;AAEJ,eAAe7B,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}