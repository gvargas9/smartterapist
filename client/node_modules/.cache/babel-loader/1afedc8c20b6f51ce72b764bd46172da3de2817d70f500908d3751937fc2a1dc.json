{"ast":null,"code":"/**\n * Supabase Service\n * \n * A comprehensive utility service for interacting with Supabase.\n * This service provides methods for authentication, database operations,\n * storage management, and real-time subscriptions.\n */\n\nimport { supabase } from './supabaseClient';\n\n/**\n * Authentication Methods\n */\nexport const auth = {\n  /**\n   * Sign up a new user\n   * @param {string} email - User's email\n   * @param {string} password - User's password\n   * @returns {Promise} - Sign up result\n   */\n  signUp: async (email, password) => {\n    return await supabase.auth.signUp({\n      email,\n      password\n    });\n  },\n  /**\n   * Sign in a user\n   * @param {string} email - User's email\n   * @param {string} password - User's password\n   * @returns {Promise} - Sign in result\n   */\n  signIn: async (email, password) => {\n    return await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n  },\n  /**\n   * Sign out the current user\n   * @returns {Promise} - Sign out result\n   */\n  signOut: async () => {\n    return await supabase.auth.signOut();\n  },\n  /**\n   * Get the current session\n   * @returns {Promise} - Current session\n   */\n  getSession: async () => {\n    return await supabase.auth.getSession();\n  },\n  /**\n   * Get the current user\n   * @returns {Object|null} - Current user or null\n   */\n  getCurrentUser: async () => {\n    const {\n      data\n    } = await supabase.auth.getUser();\n    return (data === null || data === void 0 ? void 0 : data.user) || null;\n  },\n  /**\n   * Reset password\n   * @param {string} email - User's email\n   * @returns {Promise} - Password reset result\n   */\n  resetPassword: async email => {\n    return await supabase.auth.resetPasswordForEmail(email);\n  },\n  /**\n   * Update user password\n   * @param {string} newPassword - New password\n   * @returns {Promise} - Update result\n   */\n  updatePassword: async newPassword => {\n    return await supabase.auth.updateUser({\n      password: newPassword\n    });\n  },\n  /**\n   * Set up auth state change listener\n   * @param {Function} callback - Callback function to handle auth state changes\n   * @returns {Function} - Unsubscribe function\n   */\n  onAuthStateChange: callback => {\n    return supabase.auth.onAuthStateChange(callback);\n  }\n};\n\n/**\n * Database Methods\n */\nexport const db = {\n  /**\n   * Fetch data from a table\n   * @param {string} table - Table name\n   * @param {Object} options - Query options (select, filters, etc.)\n   * @returns {Promise} - Query result\n   */\n  fetch: async (table, options = {}) => {\n    let query = supabase.from(table).select(options.select || '*');\n\n    // Apply filters if provided\n    if (options.filters) {\n      for (const filter of options.filters) {\n        const {\n          column,\n          operator,\n          value\n        } = filter;\n        query = query[operator](column, value);\n      }\n    }\n\n    // Apply order if provided\n    if (options.order) {\n      const {\n        column,\n        ascending\n      } = options.order;\n      query = query.order(column, {\n        ascending\n      });\n    }\n\n    // Apply pagination if provided\n    if (options.pagination) {\n      const {\n        from,\n        to\n      } = options.pagination;\n      query = query.range(from, to);\n    }\n    return await query;\n  },\n  /**\n   * Insert data into a table\n   * @param {string} table - Table name\n   * @param {Object|Array} data - Data to insert\n   * @returns {Promise} - Insert result\n   */\n  insert: async (table, data) => {\n    return await supabase.from(table).insert(data);\n  },\n  /**\n   * Update data in a table\n   * @param {string} table - Table name\n   * @param {Object} data - Data to update\n   * @param {Object} match - Match condition\n   * @returns {Promise} - Update result\n   */\n  update: async (table, data, match) => {\n    let query = supabase.from(table).update(data);\n\n    // Apply match condition\n    if (match) {\n      const {\n        column,\n        value\n      } = match;\n      query = query.match({\n        [column]: value\n      });\n    }\n    return await query;\n  },\n  /**\n   * Delete data from a table\n   * @param {string} table - Table name\n   * @param {Object} match - Match condition\n   * @returns {Promise} - Delete result\n   */\n  delete: async (table, match) => {\n    let query = supabase.from(table).delete();\n\n    // Apply match condition\n    if (match) {\n      const {\n        column,\n        value\n      } = match;\n      query = query.match({\n        [column]: value\n      });\n    }\n    return await query;\n  },\n  /**\n   * Execute a stored procedure or function\n   * @param {string} functionName - Function name\n   * @param {Object} params - Function parameters\n   * @returns {Promise} - Function result\n   */\n  rpc: async (functionName, params = {}) => {\n    return await supabase.rpc(functionName, params);\n  }\n};\n\n/**\n * Storage Methods\n */\nexport const storage = {\n  /**\n   * Upload a file to storage\n   * @param {string} bucket - Bucket name\n   * @param {string} path - File path in storage\n   * @param {File} file - File to upload\n   * @param {Object} options - Upload options\n   * @returns {Promise} - Upload result\n   */\n  upload: async (bucket, path, file, options = {}) => {\n    return await supabase.storage.from(bucket).upload(path, file, options);\n  },\n  /**\n   * Download a file from storage\n   * @param {string} bucket - Bucket name\n   * @param {string} path - File path in storage\n   * @returns {Promise} - Download result\n   */\n  download: async (bucket, path) => {\n    return await supabase.storage.from(bucket).download(path);\n  },\n  /**\n   * Get a public URL for a file\n   * @param {string} bucket - Bucket name\n   * @param {string} path - File path in storage\n   * @returns {string} - Public URL\n   */\n  getPublicUrl: (bucket, path) => {\n    return supabase.storage.from(bucket).getPublicUrl(path).data.publicUrl;\n  },\n  /**\n   * List files in a bucket\n   * @param {string} bucket - Bucket name\n   * @param {string} path - Path in bucket\n   * @param {Object} options - List options\n   * @returns {Promise} - List result\n   */\n  list: async (bucket, path = '', options = {}) => {\n    return await supabase.storage.from(bucket).list(path, options);\n  },\n  /**\n   * Remove a file from storage\n   * @param {string} bucket - Bucket name\n   * @param {string} path - File path in storage\n   * @returns {Promise} - Remove result\n   */\n  remove: async (bucket, path) => {\n    return await supabase.storage.from(bucket).remove([path]);\n  },\n  /**\n   * Create a signed URL for temporary access\n   * @param {string} bucket - Bucket name\n   * @param {string} path - File path in storage\n   * @param {number} expiresIn - Expiration time in seconds\n   * @returns {Promise} - Signed URL result\n   */\n  createSignedUrl: async (bucket, path, expiresIn = 60) => {\n    return await supabase.storage.from(bucket).createSignedUrl(path, expiresIn);\n  }\n};\n\n/**\n * Realtime Methods\n */\nexport const realtime = {\n  /**\n   * Subscribe to changes in a table\n   * @param {string} table - Table name\n   * @param {Function} callback - Callback function\n   * @param {Object} options - Subscription options\n   * @returns {Object} - Subscription object with unsubscribe method\n   */\n  subscribe: (table, callback, options = {}) => {\n    const {\n      event = '*',\n      filter\n    } = options;\n    let subscription = supabase.channel(`public:${table}`).on('postgres_changes', {\n      event,\n      schema: 'public',\n      table\n    }, payload => {\n      callback(payload);\n    }).subscribe();\n    return {\n      unsubscribe: () => {\n        subscription.unsubscribe();\n      }\n    };\n  }\n};\n\n/**\n * Health check method\n * @returns {Promise<boolean>} - True if connection is healthy\n */\nexport const checkHealth = async () => {\n  try {\n    // Try to get the session as a basic health check\n    const {\n      error\n    } = await supabase.auth.getSession();\n    if (error) {\n      console.error('Supabase health check failed:', error.message);\n      return false;\n    }\n    return true;\n  } catch (err) {\n    console.error('Unexpected error during health check:', err.message);\n    return false;\n  }\n};\n\n// Default export with all services\nexport default {\n  auth,\n  db,\n  storage,\n  realtime,\n  checkHealth,\n  client: supabase // Direct access to the Supabase client if needed\n};","map":{"version":3,"names":["supabase","auth","signUp","email","password","signIn","signInWithPassword","signOut","getSession","getCurrentUser","data","getUser","user","resetPassword","resetPasswordForEmail","updatePassword","newPassword","updateUser","onAuthStateChange","callback","db","fetch","table","options","query","from","select","filters","filter","column","operator","value","order","ascending","pagination","to","range","insert","update","match","delete","rpc","functionName","params","storage","upload","bucket","path","file","download","getPublicUrl","publicUrl","list","remove","createSignedUrl","expiresIn","realtime","subscribe","event","subscription","channel","on","schema","payload","unsubscribe","checkHealth","error","console","message","err","client"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/services/supabaseService.js"],"sourcesContent":["/**\n * Supabase Service\n * \n * A comprehensive utility service for interacting with Supabase.\n * This service provides methods for authentication, database operations,\n * storage management, and real-time subscriptions.\n */\n\nimport { supabase } from './supabaseClient';\n\n/**\n * Authentication Methods\n */\nexport const auth = {\n  /**\n   * Sign up a new user\n   * @param {string} email - User's email\n   * @param {string} password - User's password\n   * @returns {Promise} - Sign up result\n   */\n  signUp: async (email, password) => {\n    return await supabase.auth.signUp({ email, password });\n  },\n\n  /**\n   * Sign in a user\n   * @param {string} email - User's email\n   * @param {string} password - User's password\n   * @returns {Promise} - Sign in result\n   */\n  signIn: async (email, password) => {\n    return await supabase.auth.signInWithPassword({ email, password });\n  },\n\n  /**\n   * Sign out the current user\n   * @returns {Promise} - Sign out result\n   */\n  signOut: async () => {\n    return await supabase.auth.signOut();\n  },\n\n  /**\n   * Get the current session\n   * @returns {Promise} - Current session\n   */\n  getSession: async () => {\n    return await supabase.auth.getSession();\n  },\n\n  /**\n   * Get the current user\n   * @returns {Object|null} - Current user or null\n   */\n  getCurrentUser: async () => {\n    const { data } = await supabase.auth.getUser();\n    return data?.user || null;\n  },\n\n  /**\n   * Reset password\n   * @param {string} email - User's email\n   * @returns {Promise} - Password reset result\n   */\n  resetPassword: async (email) => {\n    return await supabase.auth.resetPasswordForEmail(email);\n  },\n\n  /**\n   * Update user password\n   * @param {string} newPassword - New password\n   * @returns {Promise} - Update result\n   */\n  updatePassword: async (newPassword) => {\n    return await supabase.auth.updateUser({ password: newPassword });\n  },\n\n  /**\n   * Set up auth state change listener\n   * @param {Function} callback - Callback function to handle auth state changes\n   * @returns {Function} - Unsubscribe function\n   */\n  onAuthStateChange: (callback) => {\n    return supabase.auth.onAuthStateChange(callback);\n  }\n};\n\n/**\n * Database Methods\n */\nexport const db = {\n  /**\n   * Fetch data from a table\n   * @param {string} table - Table name\n   * @param {Object} options - Query options (select, filters, etc.)\n   * @returns {Promise} - Query result\n   */\n  fetch: async (table, options = {}) => {\n    let query = supabase.from(table).select(options.select || '*');\n\n    // Apply filters if provided\n    if (options.filters) {\n      for (const filter of options.filters) {\n        const { column, operator, value } = filter;\n        query = query[operator](column, value);\n      }\n    }\n\n    // Apply order if provided\n    if (options.order) {\n      const { column, ascending } = options.order;\n      query = query.order(column, { ascending });\n    }\n\n    // Apply pagination if provided\n    if (options.pagination) {\n      const { from, to } = options.pagination;\n      query = query.range(from, to);\n    }\n\n    return await query;\n  },\n\n  /**\n   * Insert data into a table\n   * @param {string} table - Table name\n   * @param {Object|Array} data - Data to insert\n   * @returns {Promise} - Insert result\n   */\n  insert: async (table, data) => {\n    return await supabase.from(table).insert(data);\n  },\n\n  /**\n   * Update data in a table\n   * @param {string} table - Table name\n   * @param {Object} data - Data to update\n   * @param {Object} match - Match condition\n   * @returns {Promise} - Update result\n   */\n  update: async (table, data, match) => {\n    let query = supabase.from(table).update(data);\n    \n    // Apply match condition\n    if (match) {\n      const { column, value } = match;\n      query = query.match({ [column]: value });\n    }\n    \n    return await query;\n  },\n\n  /**\n   * Delete data from a table\n   * @param {string} table - Table name\n   * @param {Object} match - Match condition\n   * @returns {Promise} - Delete result\n   */\n  delete: async (table, match) => {\n    let query = supabase.from(table).delete();\n    \n    // Apply match condition\n    if (match) {\n      const { column, value } = match;\n      query = query.match({ [column]: value });\n    }\n    \n    return await query;\n  },\n\n  /**\n   * Execute a stored procedure or function\n   * @param {string} functionName - Function name\n   * @param {Object} params - Function parameters\n   * @returns {Promise} - Function result\n   */\n  rpc: async (functionName, params = {}) => {\n    return await supabase.rpc(functionName, params);\n  }\n};\n\n/**\n * Storage Methods\n */\nexport const storage = {\n  /**\n   * Upload a file to storage\n   * @param {string} bucket - Bucket name\n   * @param {string} path - File path in storage\n   * @param {File} file - File to upload\n   * @param {Object} options - Upload options\n   * @returns {Promise} - Upload result\n   */\n  upload: async (bucket, path, file, options = {}) => {\n    return await supabase.storage.from(bucket).upload(path, file, options);\n  },\n\n  /**\n   * Download a file from storage\n   * @param {string} bucket - Bucket name\n   * @param {string} path - File path in storage\n   * @returns {Promise} - Download result\n   */\n  download: async (bucket, path) => {\n    return await supabase.storage.from(bucket).download(path);\n  },\n\n  /**\n   * Get a public URL for a file\n   * @param {string} bucket - Bucket name\n   * @param {string} path - File path in storage\n   * @returns {string} - Public URL\n   */\n  getPublicUrl: (bucket, path) => {\n    return supabase.storage.from(bucket).getPublicUrl(path).data.publicUrl;\n  },\n\n  /**\n   * List files in a bucket\n   * @param {string} bucket - Bucket name\n   * @param {string} path - Path in bucket\n   * @param {Object} options - List options\n   * @returns {Promise} - List result\n   */\n  list: async (bucket, path = '', options = {}) => {\n    return await supabase.storage.from(bucket).list(path, options);\n  },\n\n  /**\n   * Remove a file from storage\n   * @param {string} bucket - Bucket name\n   * @param {string} path - File path in storage\n   * @returns {Promise} - Remove result\n   */\n  remove: async (bucket, path) => {\n    return await supabase.storage.from(bucket).remove([path]);\n  },\n\n  /**\n   * Create a signed URL for temporary access\n   * @param {string} bucket - Bucket name\n   * @param {string} path - File path in storage\n   * @param {number} expiresIn - Expiration time in seconds\n   * @returns {Promise} - Signed URL result\n   */\n  createSignedUrl: async (bucket, path, expiresIn = 60) => {\n    return await supabase.storage.from(bucket).createSignedUrl(path, expiresIn);\n  }\n};\n\n/**\n * Realtime Methods\n */\nexport const realtime = {\n  /**\n   * Subscribe to changes in a table\n   * @param {string} table - Table name\n   * @param {Function} callback - Callback function\n   * @param {Object} options - Subscription options\n   * @returns {Object} - Subscription object with unsubscribe method\n   */\n  subscribe: (table, callback, options = {}) => {\n    const { event = '*', filter } = options;\n    \n    let subscription = supabase\n      .channel(`public:${table}`)\n      .on('postgres_changes', { \n        event, \n        schema: 'public', \n        table \n      }, (payload) => {\n        callback(payload);\n      })\n      .subscribe();\n      \n    return {\n      unsubscribe: () => {\n        subscription.unsubscribe();\n      }\n    };\n  }\n};\n\n/**\n * Health check method\n * @returns {Promise<boolean>} - True if connection is healthy\n */\nexport const checkHealth = async () => {\n  try {\n    // Try to get the session as a basic health check\n    const { error } = await supabase.auth.getSession();\n    \n    if (error) {\n      console.error('Supabase health check failed:', error.message);\n      return false;\n    }\n    \n    return true;\n  } catch (err) {\n    console.error('Unexpected error during health check:', err.message);\n    return false;\n  }\n};\n\n// Default export with all services\nexport default {\n  auth,\n  db,\n  storage,\n  realtime,\n  checkHealth,\n  client: supabase // Direct access to the Supabase client if needed\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}