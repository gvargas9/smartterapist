{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import{supabase}from'../services/supabaseClient';import{supabaseService}from'../services/supabaseService';import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{const checkUser=async()=>{try{// Check for development mode - multiple ways to detect it\n// First check our custom key\nconst mockUserStr=localStorage.getItem('smarttherapist_mock_user');if(mockUserStr){try{const mockUser=JSON.parse(mockUserStr);console.log('ðŸ”§ Development mode: Using mock user from custom key',mockUser);setUser(mockUser);setLoading(false);return;}catch(e){console.error('Error parsing mock user from custom key:',e);localStorage.removeItem('smarttherapist_mock_user');}}// Then check Supabase key\nconst supabaseAuthStr=localStorage.getItem('sb-nvrvldvrqxlhcebxqowk-auth-token');if(supabaseAuthStr){try{const supabaseAuth=JSON.parse(supabaseAuthStr);if(supabaseAuth.currentSession&&supabaseAuth.currentSession.user){const mockUser=supabaseAuth.currentSession.user;console.log('ðŸ”§ Development mode: Using mock user from Supabase key',mockUser);// Also store in our custom key for redundancy\nlocalStorage.setItem('smarttherapist_mock_user',JSON.stringify(mockUser));setUser(mockUser);setLoading(false);return;}}catch(e){console.error('Error parsing Supabase auth token:',e);}}// Check Supabase session\nconst{data:{session},error}=await supabase.auth.getSession();if(error){console.error('Error checking session:',error.message);setLoading(false);return;}if(!session){// No active session\nsetUser(null);setLoading(false);return;}// Get user profile data\nconst{data:profile,error:profileError}=await supabase.from('users').select('*').eq('id',session.user.id).single();if(profileError){console.error('Error fetching user profile:',profileError.message);}// Combine auth and profile data\nconst userData={...session.user,...profile};setUser(userData);}catch(error){console.error('Error in auth context:',error.message);setError(error.message);setUser(null);}finally{setLoading(false);}};checkUser();// Set up auth listener\nconst{data:authListener}=supabase.auth.onAuthStateChange(async(event,session)=>{if(event==='SIGNED_IN'){// Similar logic as above for getting profile data\nconst{data:profile,error:profileError}=await supabase.from('users').select('*').eq('id',session.user.id).single();const userData={...session.user,...profile};setUser(userData);}else if(event==='SIGNED_OUT'){setUser(null);}});return()=>{if(authListener)authListener.subscription.unsubscribe();};},[]);const signIn=async(email,password)=>{try{setLoading(true);const{data,error}=await supabase.auth.signInWithPassword({email,password});if(error){throw error;}return data;}catch(error){setError(error.message);throw error;}finally{setLoading(false);}};const signUp=async(email,password,userData)=>{try{setLoading(true);// Register user with Supabase Auth\nconst{data:authData,error:authError}=await supabase.auth.signUp({email,password});if(authError){throw authError;}if(authData.user){// Create user profile in database\nconst{error:profileError}=await supabase.from('users').insert([{id:authData.user.id,email:email,role:userData.role||'client',created_at:new Date()}]);if(profileError){throw profileError;}// If user is a client, create client record\nif(userData.role==='client'||!userData.role){const{error:clientError}=await supabase.from('clients').insert([{user_id:authData.user.id,profile_data:userData.profile_data||{}}]);if(clientError){throw clientError;}}// If user is a therapist, create therapist record\nif(userData.role==='therapist'){const{error:therapistError}=await supabase.from('therapists').insert([{user_id:authData.user.id,credentials:userData.credentials||{},availability:userData.availability||{}}]);if(therapistError){throw therapistError;}}}return authData;}catch(error){setError(error.message);throw error;}finally{setLoading(false);}};const signOut=async()=>{try{setLoading(true);// Check if we're using a mock user\nif(localStorage.getItem('smarttherapist_mock_user')){localStorage.removeItem('smarttherapist_mock_user');setUser(null);console.log('Mock user signed out');}else{// Regular Supabase sign out\nconst{error}=await supabase.auth.signOut();if(error){throw error;}setUser(null);}}catch(error){setError(error.message);throw error;}finally{setLoading(false);}};const resetPassword=async email=>{try{setLoading(true);const{error}=await supabase.auth.resetPasswordForEmail(email);if(error){throw error;}}catch(error){setError(error.message);throw error;}finally{setLoading(false);}};const updatePassword=async newPassword=>{try{setLoading(true);const{error}=await supabase.auth.updateUser({password:newPassword});if(error){throw error;}}catch(error){setError(error.message);throw error;}finally{setLoading(false);}};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,loading,error,signIn,signUp,signOut,resetPassword,updatePassword},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","supabase","supabaseService","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","loading","setLoading","error","setError","checkUser","mockUserStr","localStorage","getItem","mockUser","JSON","parse","console","log","e","removeItem","supabaseAuthStr","supabaseAuth","currentSession","setItem","stringify","data","session","auth","getSession","message","profile","profileError","from","select","eq","id","single","userData","authListener","onAuthStateChange","event","subscription","unsubscribe","signIn","email","password","signInWithPassword","signUp","authData","authError","insert","role","created_at","Date","clientError","user_id","profile_data","therapistError","credentials","availability","signOut","resetPassword","resetPasswordForEmail","updatePassword","newPassword","updateUser","Provider","value"],"sources":["/Users/gio/development/smartterapist/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabaseClient';\nimport { supabaseService } from '../services/supabaseService';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkUser = async () => {\n      try {\n        // Check for development mode - multiple ways to detect it\n        // First check our custom key\n        const mockUserStr = localStorage.getItem('smarttherapist_mock_user');\n        if (mockUserStr) {\n          try {\n            const mockUser = JSON.parse(mockUserStr);\n            console.log('ðŸ”§ Development mode: Using mock user from custom key', mockUser);\n            setUser(mockUser);\n            setLoading(false);\n            return;\n          } catch (e) {\n            console.error('Error parsing mock user from custom key:', e);\n            localStorage.removeItem('smarttherapist_mock_user');\n          }\n        }\n        \n        // Then check Supabase key\n        const supabaseAuthStr = localStorage.getItem('sb-nvrvldvrqxlhcebxqowk-auth-token');\n        if (supabaseAuthStr) {\n          try {\n            const supabaseAuth = JSON.parse(supabaseAuthStr);\n            if (supabaseAuth.currentSession && supabaseAuth.currentSession.user) {\n              const mockUser = supabaseAuth.currentSession.user;\n              console.log('ðŸ”§ Development mode: Using mock user from Supabase key', mockUser);\n              \n              // Also store in our custom key for redundancy\n              localStorage.setItem('smarttherapist_mock_user', JSON.stringify(mockUser));\n              \n              setUser(mockUser);\n              setLoading(false);\n              return;\n            }\n          } catch (e) {\n            console.error('Error parsing Supabase auth token:', e);\n          }\n        }\n        \n        // Check Supabase session\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          console.error('Error checking session:', error.message);\n          setLoading(false);\n          return;\n        }\n        \n        if (!session) {\n          // No active session\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n        \n        // Get user profile data\n        const { data: profile, error: profileError } = await supabase\n          .from('users')\n          .select('*')\n          .eq('id', session.user.id)\n          .single();\n          \n        if (profileError) {\n          console.error('Error fetching user profile:', profileError.message);\n        }\n        \n        // Combine auth and profile data\n        const userData = {\n          ...session.user,\n          ...profile\n        };\n        \n        setUser(userData);\n      } catch (error) {\n        console.error('Error in auth context:', error.message);\n        setError(error.message);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkUser();\n    \n    // Set up auth listener\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        \n        if (event === 'SIGNED_IN') {\n          // Similar logic as above for getting profile data\n          const { data: profile, error: profileError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n            \n          const userData = {\n            ...session.user,\n            ...profile\n          };\n          \n          setUser(userData);\n        } else if (event === 'SIGNED_OUT') {\n          setUser(null);\n        }\n      }\n    );\n    \n    return () => {\n      if (authListener) authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n      \n      if (error) {\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email, password, userData) => {\n    try {\n      setLoading(true);\n      \n      // Register user with Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      \n      if (authError) {\n        throw authError;\n      }\n      \n      if (authData.user) {\n        // Create user profile in database\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert([\n            {\n              id: authData.user.id,\n              email: email,\n              role: userData.role || 'client',\n              created_at: new Date()\n            }\n          ]);\n          \n        if (profileError) {\n          throw profileError;\n        }\n        \n        // If user is a client, create client record\n        if (userData.role === 'client' || !userData.role) {\n          const { error: clientError } = await supabase\n            .from('clients')\n            .insert([\n              {\n                user_id: authData.user.id,\n                profile_data: userData.profile_data || {}\n              }\n            ]);\n            \n          if (clientError) {\n            throw clientError;\n          }\n        }\n        \n        // If user is a therapist, create therapist record\n        if (userData.role === 'therapist') {\n          const { error: therapistError } = await supabase\n            .from('therapists')\n            .insert([\n              {\n                user_id: authData.user.id,\n                credentials: userData.credentials || {},\n                availability: userData.availability || {}\n              }\n            ]);\n            \n          if (therapistError) {\n            throw therapistError;\n          }\n        }\n      }\n      \n      return authData;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      \n      // Check if we're using a mock user\n      if (localStorage.getItem('smarttherapist_mock_user')) {\n        localStorage.removeItem('smarttherapist_mock_user');\n        setUser(null);\n        console.log('Mock user signed out');\n      } else {\n        // Regular Supabase sign out\n        const { error } = await supabase.auth.signOut();\n        \n        if (error) {\n          throw error;\n        }\n        \n        setUser(null);\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (email) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updatePassword = async (newPassword) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        error,\n        signIn,\n        signUp,\n        signOut,\n        resetPassword,\n        updatePassword\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}