{"ast":null,"code":"/**\n * BehaviorRecord Model\n * \n * Provides methods for interacting with the behavior_records table in Supabase.\n */import{supabase}from'../services/supabaseClient';export class BehaviorRecordModel{/**\n   * Get a behavior record by ID\n   * @param id - Behavior record ID\n   * @returns The behavior record or null if not found\n   */static async getById(id){const{data,error}=await supabase.from('behavior_records').select('*').eq('id',id).single();if(error){console.error('Error fetching behavior record:',error);return null;}return data;}/**\n   * Get behavior records by client ID\n   * @param clientId - Client ID\n   * @returns Array of behavior records for the client\n   */static async getByClientId(clientId){const{data,error}=await supabase.from('behavior_records').select('*').eq('client_id',clientId).order('recorded_at',{ascending:false});if(error){console.error('Error fetching behavior records by client ID:',error);return[];}return data||[];}/**\n   * Get behavior records by behavior type\n   * @param clientId - Client ID\n   * @param behaviorType - Behavior type\n   * @returns Array of behavior records of the specified type\n   */static async getByBehaviorType(clientId,behaviorType){const{data,error}=await supabase.from('behavior_records').select('*').eq('client_id',clientId).eq('behavior_type',behaviorType).order('recorded_at',{ascending:false});if(error){console.error('Error fetching behavior records by type:',error);return[];}return data||[];}/**\n   * Get behavior records within a date range\n   * @param clientId - Client ID\n   * @param startDate - Start date (ISO string)\n   * @param endDate - End date (ISO string)\n   * @returns Array of behavior records within the date range\n   */static async getByDateRange(clientId,startDate,endDate){const{data,error}=await supabase.from('behavior_records').select('*').eq('client_id',clientId).gte('recorded_at',startDate).lte('recorded_at',endDate).order('recorded_at',{ascending:true});if(error){console.error('Error fetching behavior records by date range:',error);return[];}return data||[];}/**\n   * Get behavior records with client data\n   * @param filters - Optional filters to apply\n   * @returns Array of behavior records with client data\n   */static async getWithClientData(filters){let query=supabase.from('behavior_records').select(`\n        *,\n        clients!behavior_records_client_id_fkey (\n          *,\n          users:user_id (*)\n        )\n      `);// Apply filters if provided\nif(filters){Object.entries(filters).forEach(_ref=>{let[key,value]=_ref;query=query.eq(key,value);});}const{data,error}=await query;if(error){console.error('Error fetching behavior records with client data:',error);return[];}return data||[];}/**\n   * Create a new behavior record\n   * @param record - Behavior record data to insert\n   * @returns The created behavior record or null if there was an error\n   */static async create(record){const{data,error}=await supabase.from('behavior_records').insert(record).select().single();if(error){console.error('Error creating behavior record:',error);return null;}return data;}/**\n   * Update a behavior record\n   * @param id - Behavior record ID\n   * @param updates - Behavior record data to update\n   * @returns The updated behavior record or null if there was an error\n   */static async update(id,updates){const{data,error}=await supabase.from('behavior_records').update(updates).eq('id',id).select().single();if(error){console.error('Error updating behavior record:',error);return null;}return data;}/**\n   * Delete a behavior record\n   * @param id - Behavior record ID\n   * @returns True if successful, false otherwise\n   */static async delete(id){const{error}=await supabase.from('behavior_records').delete().eq('id',id);if(error){console.error('Error deleting behavior record:',error);return false;}return true;}/**\n   * Get behavior statistics for a client\n   * @param clientId - Client ID\n   * @param days - Number of days to include in statistics (default: 30)\n   * @returns Statistics about the client's behavior records\n   */static async getStatistics(clientId){let days=arguments.length>1&&arguments[1]!==undefined?arguments[1]:30;// Calculate the start date (X days ago)\nconst startDate=new Date();startDate.setDate(startDate.getDate()-days);const startDateStr=startDate.toISOString();// Get all behavior records in the date range\nconst{data,error}=await supabase.from('behavior_records').select('*').eq('client_id',clientId).gte('recorded_at',startDateStr).order('recorded_at',{ascending:true});if(error){console.error('Error fetching behavior statistics:',error);return{totalRecords:0,behaviorTypes:{},averageSeverity:0,severityTrend:[]};}const records=data||[];// Calculate statistics\nconst behaviorTypes={};let totalSeverity=0;let severityCount=0;// Group records by date for trend analysis\nconst recordsByDate={};records.forEach(record=>{// Count behavior types\nbehaviorTypes[record.behavior_type]=(behaviorTypes[record.behavior_type]||0)+1;// Sum severity for average calculation\nif(record.severity!==null){totalSeverity+=record.severity;severityCount++;}// Group by date for trend\nconst dateStr=record.recorded_at.split('T')[0];// Get just the date part\nif(!recordsByDate[dateStr]){recordsByDate[dateStr]=[];}recordsByDate[dateStr].push(record);});// Calculate severity trend (average severity per day)\nconst severityTrend=Object.entries(recordsByDate).map(_ref2=>{let[date,dayRecords]=_ref2;const dayTotalSeverity=dayRecords.reduce((sum,record)=>{return sum+(record.severity||0);},0);const dayAverageSeverity=dayRecords.length>0?dayTotalSeverity/dayRecords.length:0;return{date,averageSeverity:dayAverageSeverity,count:dayRecords.length};});return{totalRecords:records.length,behaviorTypes,averageSeverity:severityCount>0?totalSeverity/severityCount:0,severityTrend};}/**\n   * List all behavior records with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of behavior records\n   */static async list(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const from=page*limit;const to=from+limit-1;const{data,error}=await supabase.from('behavior_records').select('*').range(from,to).order('recorded_at',{ascending:false});if(error){console.error('Error listing behavior records:',error);return[];}return data||[];}/**\n   * Count total number of behavior records\n   * @returns Total count of behavior records\n   */static async count(){const{count,error}=await supabase.from('behavior_records').select('*',{count:'exact',head:true});if(error){console.error('Error counting behavior records:',error);return 0;}return count||0;}}","map":{"version":3,"names":["supabase","BehaviorRecordModel","getById","id","data","error","from","select","eq","single","console","getByClientId","clientId","order","ascending","getByBehaviorType","behaviorType","getByDateRange","startDate","endDate","gte","lte","getWithClientData","filters","query","Object","entries","forEach","_ref","key","value","create","record","insert","update","updates","delete","getStatistics","days","arguments","length","undefined","Date","setDate","getDate","startDateStr","toISOString","totalRecords","behaviorTypes","averageSeverity","severityTrend","records","totalSeverity","severityCount","recordsByDate","behavior_type","severity","dateStr","recorded_at","split","push","map","_ref2","date","dayRecords","dayTotalSeverity","reduce","sum","dayAverageSeverity","count","list","page","limit","to","range","head"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/models/BehaviorRecordModel.ts"],"sourcesContent":["/**\n * BehaviorRecord Model\n * \n * Provides methods for interacting with the behavior_records table in Supabase.\n */\n\nimport { supabase } from '../services/supabaseClient';\nimport { BehaviorRecord, InsertTables, UpdateTables } from '../types/supabase';\n\nexport class BehaviorRecordModel {\n  /**\n   * Get a behavior record by ID\n   * @param id - Behavior record ID\n   * @returns The behavior record or null if not found\n   */\n  static async getById(id: string): Promise<BehaviorRecord | null> {\n    const { data, error } = await supabase\n      .from('behavior_records')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching behavior record:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get behavior records by client ID\n   * @param clientId - Client ID\n   * @returns Array of behavior records for the client\n   */\n  static async getByClientId(clientId: string): Promise<BehaviorRecord[]> {\n    const { data, error } = await supabase\n      .from('behavior_records')\n      .select('*')\n      .eq('client_id', clientId)\n      .order('recorded_at', { ascending: false });\n    \n    if (error) {\n      console.error('Error fetching behavior records by client ID:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Get behavior records by behavior type\n   * @param clientId - Client ID\n   * @param behaviorType - Behavior type\n   * @returns Array of behavior records of the specified type\n   */\n  static async getByBehaviorType(clientId: string, behaviorType: string): Promise<BehaviorRecord[]> {\n    const { data, error } = await supabase\n      .from('behavior_records')\n      .select('*')\n      .eq('client_id', clientId)\n      .eq('behavior_type', behaviorType)\n      .order('recorded_at', { ascending: false });\n    \n    if (error) {\n      console.error('Error fetching behavior records by type:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Get behavior records within a date range\n   * @param clientId - Client ID\n   * @param startDate - Start date (ISO string)\n   * @param endDate - End date (ISO string)\n   * @returns Array of behavior records within the date range\n   */\n  static async getByDateRange(clientId: string, startDate: string, endDate: string): Promise<BehaviorRecord[]> {\n    const { data, error } = await supabase\n      .from('behavior_records')\n      .select('*')\n      .eq('client_id', clientId)\n      .gte('recorded_at', startDate)\n      .lte('recorded_at', endDate)\n      .order('recorded_at', { ascending: true });\n    \n    if (error) {\n      console.error('Error fetching behavior records by date range:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Get behavior records with client data\n   * @param filters - Optional filters to apply\n   * @returns Array of behavior records with client data\n   */\n  static async getWithClientData(filters?: Record<string, any>): Promise<any[]> {\n    let query = supabase\n      .from('behavior_records')\n      .select(`\n        *,\n        clients!behavior_records_client_id_fkey (\n          *,\n          users:user_id (*)\n        )\n      `);\n    \n    // Apply filters if provided\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        query = query.eq(key, value);\n      });\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      console.error('Error fetching behavior records with client data:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Create a new behavior record\n   * @param record - Behavior record data to insert\n   * @returns The created behavior record or null if there was an error\n   */\n  static async create(record: InsertTables<'behavior_records'>): Promise<BehaviorRecord | null> {\n    const { data, error } = await supabase\n      .from('behavior_records')\n      .insert(record)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating behavior record:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Update a behavior record\n   * @param id - Behavior record ID\n   * @param updates - Behavior record data to update\n   * @returns The updated behavior record or null if there was an error\n   */\n  static async update(id: string, updates: UpdateTables<'behavior_records'>): Promise<BehaviorRecord | null> {\n    const { data, error } = await supabase\n      .from('behavior_records')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating behavior record:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Delete a behavior record\n   * @param id - Behavior record ID\n   * @returns True if successful, false otherwise\n   */\n  static async delete(id: string): Promise<boolean> {\n    const { error } = await supabase\n      .from('behavior_records')\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      console.error('Error deleting behavior record:', error);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Get behavior statistics for a client\n   * @param clientId - Client ID\n   * @param days - Number of days to include in statistics (default: 30)\n   * @returns Statistics about the client's behavior records\n   */\n  static async getStatistics(clientId: string, days: number = 30): Promise<any> {\n    // Calculate the start date (X days ago)\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    const startDateStr = startDate.toISOString();\n    \n    // Get all behavior records in the date range\n    const { data, error } = await supabase\n      .from('behavior_records')\n      .select('*')\n      .eq('client_id', clientId)\n      .gte('recorded_at', startDateStr)\n      .order('recorded_at', { ascending: true });\n    \n    if (error) {\n      console.error('Error fetching behavior statistics:', error);\n      return {\n        totalRecords: 0,\n        behaviorTypes: {},\n        averageSeverity: 0,\n        severityTrend: []\n      };\n    }\n    \n    const records = data || [];\n    \n    // Calculate statistics\n    const behaviorTypes: Record<string, number> = {};\n    let totalSeverity = 0;\n    let severityCount = 0;\n    \n    // Group records by date for trend analysis\n    const recordsByDate: Record<string, any[]> = {};\n    \n    records.forEach(record => {\n      // Count behavior types\n      behaviorTypes[record.behavior_type] = (behaviorTypes[record.behavior_type] || 0) + 1;\n      \n      // Sum severity for average calculation\n      if (record.severity !== null) {\n        totalSeverity += record.severity;\n        severityCount++;\n      }\n      \n      // Group by date for trend\n      const dateStr = record.recorded_at.split('T')[0]; // Get just the date part\n      if (!recordsByDate[dateStr]) {\n        recordsByDate[dateStr] = [];\n      }\n      recordsByDate[dateStr].push(record);\n    });\n    \n    // Calculate severity trend (average severity per day)\n    const severityTrend = Object.entries(recordsByDate).map(([date, dayRecords]) => {\n      const dayTotalSeverity = dayRecords.reduce((sum, record) => {\n        return sum + (record.severity || 0);\n      }, 0);\n      const dayAverageSeverity = dayRecords.length > 0 ? dayTotalSeverity / dayRecords.length : 0;\n      \n      return {\n        date,\n        averageSeverity: dayAverageSeverity,\n        count: dayRecords.length\n      };\n    });\n    \n    return {\n      totalRecords: records.length,\n      behaviorTypes,\n      averageSeverity: severityCount > 0 ? totalSeverity / severityCount : 0,\n      severityTrend\n    };\n  }\n\n  /**\n   * List all behavior records with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of behavior records\n   */\n  static async list(page: number = 0, limit: number = 10): Promise<BehaviorRecord[]> {\n    const from = page * limit;\n    const to = from + limit - 1;\n    \n    const { data, error } = await supabase\n      .from('behavior_records')\n      .select('*')\n      .range(from, to)\n      .order('recorded_at', { ascending: false });\n    \n    if (error) {\n      console.error('Error listing behavior records:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Count total number of behavior records\n   * @returns Total count of behavior records\n   */\n  static async count(): Promise<number> {\n    const { count, error } = await supabase\n      .from('behavior_records')\n      .select('*', { count: 'exact', head: true });\n    \n    if (error) {\n      console.error('Error counting behavior records:', error);\n      return 0;\n    }\n    \n    return count || 0;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}