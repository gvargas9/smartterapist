{"ast":null,"code":"var _jsxFileName = \"/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabaseClient';\nimport { supabaseService } from '../services/supabaseService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const checkUser = async () => {\n      try {\n        // Check Supabase session\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          console.error('Error checking session:', error.message);\n          setLoading(false);\n          return;\n        }\n        if (!session) {\n          // No active session\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Get user profile data\n        const {\n          data: profile,\n          error: profileError\n        } = await supabase.from('users').select('*').eq('id', session.user.id).single();\n        if (profileError) {\n          console.error('Error fetching user profile:', profileError.message);\n        }\n\n        // Combine auth and profile data\n        const userData = {\n          ...session.user,\n          ...profile\n        };\n        setUser(userData);\n      } catch (error) {\n        console.error('Error in auth context:', error.message);\n        setError(error.message);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkUser();\n\n    // Set up auth listener\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === 'SIGNED_IN') {\n        // Similar logic as above for getting profile data\n        const {\n          data: profile,\n          error: profileError\n        } = await supabase.from('users').select('*').eq('id', session.user.id).single();\n        const userData = {\n          ...session.user,\n          ...profile\n        };\n        setUser(userData);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n      }\n    });\n    return () => {\n      if (authListener) authListener.subscription.unsubscribe();\n    };\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signUp = async (email, password, userData) => {\n    try {\n      setLoading(true);\n\n      // Register user with Supabase Auth\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      if (authError) {\n        throw authError;\n      }\n      if (authData.user) {\n        // Create user profile in database\n        const {\n          error: profileError\n        } = await supabase.from('users').insert([{\n          id: authData.user.id,\n          email: email,\n          role: userData.role || 'client',\n          created_at: new Date()\n        }]);\n        if (profileError) {\n          throw profileError;\n        }\n\n        // If user is a client, create client record\n        if (userData.role === 'client' || !userData.role) {\n          const {\n            error: clientError\n          } = await supabase.from('clients').insert([{\n            user_id: authData.user.id,\n            profile_data: userData.profile_data || {}\n          }]);\n          if (clientError) {\n            throw clientError;\n          }\n        }\n\n        // If user is a therapist, create therapist record\n        if (userData.role === 'therapist') {\n          const {\n            error: therapistError\n          } = await supabase.from('therapists').insert([{\n            user_id: authData.user.id,\n            credentials: userData.credentials || {},\n            availability: userData.availability || {}\n          }]);\n          if (therapistError) {\n            throw therapistError;\n          }\n        }\n      }\n      return authData;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = async () => {\n    try {\n      setLoading(true);\n\n      // Check if we're using a mock user\n      if (localStorage.getItem('smarttherapist_mock_user')) {\n        localStorage.removeItem('smarttherapist_mock_user');\n        setUser(null);\n        console.log('Mock user signed out');\n      } else {\n        // Regular Supabase sign out\n        const {\n          error\n        } = await supabase.auth.signOut();\n        if (error) {\n          throw error;\n        }\n        setUser(null);\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetPassword = async email => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.resetPasswordForEmail(email);\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updatePassword = async newPassword => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      signIn,\n      signUp,\n      signOut,\n      resetPassword,\n      updatePassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","supabase","supabaseService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","checkUser","data","session","auth","getSession","console","message","profile","profileError","from","select","eq","id","single","userData","authListener","onAuthStateChange","event","subscription","unsubscribe","signIn","email","password","signInWithPassword","signUp","authData","authError","insert","role","created_at","Date","clientError","user_id","profile_data","therapistError","credentials","availability","signOut","localStorage","getItem","removeItem","log","resetPassword","resetPasswordForEmail","updatePassword","newPassword","updateUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabaseClient';\nimport { supabaseService } from '../services/supabaseService';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkUser = async () => {\n      try {\n        \n        // Check Supabase session\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          console.error('Error checking session:', error.message);\n          setLoading(false);\n          return;\n        }\n        \n        if (!session) {\n          // No active session\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n        \n        // Get user profile data\n        const { data: profile, error: profileError } = await supabase\n          .from('users')\n          .select('*')\n          .eq('id', session.user.id)\n          .single();\n          \n        if (profileError) {\n          console.error('Error fetching user profile:', profileError.message);\n        }\n        \n        // Combine auth and profile data\n        const userData = {\n          ...session.user,\n          ...profile\n        };\n        \n        setUser(userData);\n      } catch (error) {\n        console.error('Error in auth context:', error.message);\n        setError(error.message);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkUser();\n    \n    // Set up auth listener\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        \n        if (event === 'SIGNED_IN') {\n          // Similar logic as above for getting profile data\n          const { data: profile, error: profileError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n            \n          const userData = {\n            ...session.user,\n            ...profile\n          };\n          \n          setUser(userData);\n        } else if (event === 'SIGNED_OUT') {\n          setUser(null);\n        }\n      }\n    );\n    \n    return () => {\n      if (authListener) authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n      \n      if (error) {\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email, password, userData) => {\n    try {\n      setLoading(true);\n      \n      // Register user with Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      \n      if (authError) {\n        throw authError;\n      }\n      \n      if (authData.user) {\n        // Create user profile in database\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert([\n            {\n              id: authData.user.id,\n              email: email,\n              role: userData.role || 'client',\n              created_at: new Date()\n            }\n          ]);\n          \n        if (profileError) {\n          throw profileError;\n        }\n        \n        // If user is a client, create client record\n        if (userData.role === 'client' || !userData.role) {\n          const { error: clientError } = await supabase\n            .from('clients')\n            .insert([\n              {\n                user_id: authData.user.id,\n                profile_data: userData.profile_data || {}\n              }\n            ]);\n            \n          if (clientError) {\n            throw clientError;\n          }\n        }\n        \n        // If user is a therapist, create therapist record\n        if (userData.role === 'therapist') {\n          const { error: therapistError } = await supabase\n            .from('therapists')\n            .insert([\n              {\n                user_id: authData.user.id,\n                credentials: userData.credentials || {},\n                availability: userData.availability || {}\n              }\n            ]);\n            \n          if (therapistError) {\n            throw therapistError;\n          }\n        }\n      }\n      \n      return authData;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      \n      // Check if we're using a mock user\n      if (localStorage.getItem('smarttherapist_mock_user')) {\n        localStorage.removeItem('smarttherapist_mock_user');\n        setUser(null);\n        console.log('Mock user signed out');\n      } else {\n        // Regular Supabase sign out\n        const { error } = await supabase.auth.signOut();\n        \n        if (error) {\n          throw error;\n        }\n        \n        setUser(null);\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (email) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updatePassword = async (newPassword) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        error,\n        signIn,\n        signUp,\n        signOut,\n        resetPassword,\n        updatePassword\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}