{"ast":null,"code":"import React,{useState,useEffect}from'react';import{supabase}from'../services/supabaseClient';import supabaseService from'../services/supabaseService';// Import our models\nimport{UserModel,ClientModel,TherapistModel}from'../models';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SupabaseDemo=()=>{const[connectionStatus,setConnectionStatus]=useState('Checking...');const[user,setUser]=useState(null);const[email,setEmail]=useState('');const[password,setPassword]=useState('');const[message,setMessage]=useState('');const[loading,setLoading]=useState(false);// State for model testing\nconst[modelTestResult,setModelTestResult]=useState('');const[modelTestLoading,setModelTestLoading]=useState(false);// Check Supabase connection on component mount\nuseEffect(()=>{const checkConnection=async()=>{const isHealthy=await supabaseService.checkHealth();setConnectionStatus(isHealthy?'Connected':'Disconnected');};checkConnection();// Set up auth state change listener\nconst{data:{subscription}}=supabaseService.auth.onAuthStateChange((event,session)=>{console.log('Auth event:',event);if(session){setUser(session.user);}else{setUser(null);}});// Check for existing session\nconst getInitialSession=async()=>{const{data}=await supabaseService.auth.getSession();if(data.session){setUser(data.session.user);}};getInitialSession();// Cleanup subscription on unmount\nreturn()=>{subscription.unsubscribe();};},[]);// Handle sign up\nconst handleSignUp=async e=>{e.preventDefault();setLoading(true);setMessage('');try{const{data,error}=await supabaseService.auth.signUp(email,password);if(error){setMessage(`Error: ${error.message}`);}else{setMessage('Sign up successful! Check your email for confirmation.');}}catch(err){setMessage(`Unexpected error: ${err.message}`);}finally{setLoading(false);}};// Handle sign in\nconst handleSignIn=async e=>{e.preventDefault();setLoading(true);setMessage('');try{const{data,error}=await supabaseService.auth.signIn(email,password);if(error){setMessage(`Error: ${error.message}`);}else{setMessage('Sign in successful!');}}catch(err){setMessage(`Unexpected error: ${err.message}`);}finally{setLoading(false);}};// Handle sign out\nconst handleSignOut=async()=>{setLoading(true);setMessage('');try{const{error}=await supabaseService.auth.signOut();if(error){setMessage(`Error: ${error.message}`);}else{setMessage('Signed out successfully!');}}catch(err){setMessage(`Unexpected error: ${err.message}`);}finally{setLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"supabase-demo\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Supabase Integration Demo\"}),/*#__PURE__*/_jsx(\"div\",{className:\"connection-status\",children:/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Connection Status:\"}),/*#__PURE__*/_jsx(\"span\",{className:connectionStatus==='Connected'?'connected':'disconnected',children:connectionStatus})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold mb-4\",children:\"TypeScript Models Test\"}),/*#__PURE__*/_jsx(\"p\",{className:\"mb-4\",children:\"Test our TypeScript models for interacting with the database:\"}),/*#__PURE__*/_jsx(\"button\",{onClick:async()=>{setModelTestLoading(true);setModelTestResult('');try{// Test UserModel\nif(!user){throw new Error('You must be signed in to test the models');}// Try to get the current user from the database\nconst userData=await UserModel.getById(user.id);if(userData){setModelTestResult(`Successfully retrieved user data: ${JSON.stringify(userData)}`);}else{// If user doesn't exist in the database yet, create them\nconst newUser=await UserModel.create({id:user.id,email:user.email,role:'client',first_name:'Test',last_name:'User'});if(newUser){setModelTestResult(`Successfully created user: ${JSON.stringify(newUser)}`);// Test creating a client record\nconst client=await ClientModel.create({user_id:user.id,profile_data:{interests:['therapy','wellness']}});if(client){setModelTestResult(prev=>prev+'\\n\\nSuccessfully created client: '+JSON.stringify(client));}}else{throw new Error('Failed to create user record');}}}catch(error){setModelTestResult(`Error testing models: ${error.message}`);}finally{setModelTestLoading(false);}},className:\"bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded\",disabled:modelTestLoading,children:modelTestLoading?'Testing...':'Test Models'}),modelTestResult&&/*#__PURE__*/_jsx(\"div\",{className:\"mt-4 p-4 bg-gray-100 rounded overflow-auto max-h-60\",children:/*#__PURE__*/_jsx(\"pre\",{className:\"whitespace-pre-wrap\",children:modelTestResult})})]}),user?/*#__PURE__*/_jsxs(\"div\",{className:\"user-profile\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"User Profile\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Email:\"}),\" \",user.email]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"ID:\"}),\" \",user.id]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSignOut,disabled:loading,children:loading?'Signing Out...':'Sign Out'})]}):/*#__PURE__*/_jsxs(\"div\",{className:\"auth-form\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Authentication\"}),/*#__PURE__*/_jsxs(\"form\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"email\",children:\"Email:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"email\",id:\"email\",value:email,onChange:e=>setEmail(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"password\",children:\"Password:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",id:\"password\",value:password,onChange:e=>setPassword(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"button-group\",children:[/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:handleSignIn,disabled:loading,children:loading?'Signing In...':'Sign In'}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:handleSignUp,disabled:loading,children:loading?'Signing Up...':'Sign Up'})]})]})]}),message&&/*#__PURE__*/_jsx(\"div\",{className:`message ${message.includes('Error')?'error':'success'}`,children:message}),/*#__PURE__*/_jsxs(\"div\",{className:\"demo-section\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Additional Features\"}),/*#__PURE__*/_jsx(\"p\",{children:\"This component demonstrates basic authentication with Supabase. The full supabaseService.js includes methods for:\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:\"Database operations (fetch, insert, update, delete)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Storage management (upload, download, list files)\"}),/*#__PURE__*/_jsx(\"li\",{children:\"Realtime subscriptions\"}),/*#__PURE__*/_jsx(\"li\",{children:\"RPC function calls\"})]})]}),/*#__PURE__*/_jsx(\"style\",{jsx:true,children:`\n        .supabase-demo {\n          max-width: 600px;\n          margin: 0 auto;\n          padding: 20px;\n          font-family: Arial, sans-serif;\n        }\n        .connection-status {\n          margin-bottom: 20px;\n          padding: 10px;\n          background-color: #f5f5f5;\n          border-radius: 4px;\n        }\n        .connected {\n          color: green;\n          font-weight: bold;\n        }\n        .disconnected {\n          color: red;\n          font-weight: bold;\n        }\n        .auth-form, .user-profile {\n          margin-bottom: 20px;\n          padding: 15px;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n        }\n        .form-group {\n          margin-bottom: 15px;\n        }\n        .form-group label {\n          display: block;\n          margin-bottom: 5px;\n        }\n        .form-group input {\n          width: 100%;\n          padding: 8px;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n        }\n        .button-group {\n          display: flex;\n          gap: 10px;\n        }\n        button {\n          padding: 8px 16px;\n          background-color: #4285f4;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n        }\n        button:hover {\n          background-color: #3367d6;\n        }\n        button:disabled {\n          background-color: #cccccc;\n          cursor: not-allowed;\n        }\n        .message {\n          margin: 15px 0;\n          padding: 10px;\n          border-radius: 4px;\n        }\n        .error {\n          background-color: #ffebee;\n          color: #c62828;\n        }\n        .success {\n          background-color: #e8f5e9;\n          color: #2e7d32;\n        }\n        .demo-section {\n          margin-top: 20px;\n          padding: 15px;\n          background-color: #f5f5f5;\n          border-radius: 4px;\n        }\n        ul {\n          padding-left: 20px;\n        }\n      `})]});};export default SupabaseDemo;","map":{"version":3,"names":["React","useState","useEffect","supabase","supabaseService","UserModel","ClientModel","TherapistModel","jsx","_jsx","jsxs","_jsxs","SupabaseDemo","connectionStatus","setConnectionStatus","user","setUser","email","setEmail","password","setPassword","message","setMessage","loading","setLoading","modelTestResult","setModelTestResult","modelTestLoading","setModelTestLoading","checkConnection","isHealthy","checkHealth","data","subscription","auth","onAuthStateChange","event","session","console","log","getInitialSession","getSession","unsubscribe","handleSignUp","e","preventDefault","error","signUp","err","handleSignIn","signIn","handleSignOut","signOut","className","children","onClick","Error","userData","getById","id","JSON","stringify","newUser","create","role","first_name","last_name","client","user_id","profile_data","interests","prev","disabled","htmlFor","type","value","onChange","target","required","includes"],"sources":["/Users/gio/development/smartterapist/client/src/components/SupabaseDemo.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../services/supabaseClient';\nimport supabaseService from '../services/supabaseService';\n// Import our models\nimport { UserModel, ClientModel, TherapistModel } from '../models';\n\nconst SupabaseDemo = () => {\n  const [connectionStatus, setConnectionStatus] = useState('Checking...');\n  const [user, setUser] = useState(null);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // State for model testing\n  const [modelTestResult, setModelTestResult] = useState('');\n  const [modelTestLoading, setModelTestLoading] = useState(false);\n\n  // Check Supabase connection on component mount\n  useEffect(() => {\n    const checkConnection = async () => {\n      const isHealthy = await supabaseService.checkHealth();\n      setConnectionStatus(isHealthy ? 'Connected' : 'Disconnected');\n    };\n\n    checkConnection();\n\n    // Set up auth state change listener\n    const { data: { subscription } } = supabaseService.auth.onAuthStateChange((event, session) => {\n      console.log('Auth event:', event);\n      if (session) {\n        setUser(session.user);\n      } else {\n        setUser(null);\n      }\n    });\n\n    // Check for existing session\n    const getInitialSession = async () => {\n      const { data } = await supabaseService.auth.getSession();\n      if (data.session) {\n        setUser(data.session.user);\n      }\n    };\n\n    getInitialSession();\n\n    // Cleanup subscription on unmount\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Handle sign up\n  const handleSignUp = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setMessage('');\n\n    try {\n      const { data, error } = await supabaseService.auth.signUp(email, password);\n      \n      if (error) {\n        setMessage(`Error: ${error.message}`);\n      } else {\n        setMessage('Sign up successful! Check your email for confirmation.');\n      }\n    } catch (err) {\n      setMessage(`Unexpected error: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle sign in\n  const handleSignIn = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setMessage('');\n\n    try {\n      const { data, error } = await supabaseService.auth.signIn(email, password);\n      \n      if (error) {\n        setMessage(`Error: ${error.message}`);\n      } else {\n        setMessage('Sign in successful!');\n      }\n    } catch (err) {\n      setMessage(`Unexpected error: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle sign out\n  const handleSignOut = async () => {\n    setLoading(true);\n    setMessage('');\n\n    try {\n      const { error } = await supabaseService.auth.signOut();\n      \n      if (error) {\n        setMessage(`Error: ${error.message}`);\n      } else {\n        setMessage('Signed out successfully!');\n      }\n    } catch (err) {\n      setMessage(`Unexpected error: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"supabase-demo\">\n      <h2>Supabase Integration Demo</h2>\n      \n      <div className=\"connection-status\">\n        <p>\n          <strong>Connection Status:</strong> \n          <span className={connectionStatus === 'Connected' ? 'connected' : 'disconnected'}>\n            {connectionStatus}\n          </span>\n        </p>\n      </div>\n\n      <div className=\"mt-8\">\n        <h2 className=\"text-xl font-semibold mb-4\">TypeScript Models Test</h2>\n        <p className=\"mb-4\">Test our TypeScript models for interacting with the database:</p>\n        \n        <button\n          onClick={async () => {\n            setModelTestLoading(true);\n            setModelTestResult('');\n            \n            try {\n              // Test UserModel\n              if (!user) {\n                throw new Error('You must be signed in to test the models');\n              }\n              \n              // Try to get the current user from the database\n              const userData = await UserModel.getById(user.id);\n              \n              if (userData) {\n                setModelTestResult(`Successfully retrieved user data: ${JSON.stringify(userData)}`);\n              } else {\n                // If user doesn't exist in the database yet, create them\n                const newUser = await UserModel.create({\n                  id: user.id,\n                  email: user.email,\n                  role: 'client',\n                  first_name: 'Test',\n                  last_name: 'User'\n                });\n                \n                if (newUser) {\n                  setModelTestResult(`Successfully created user: ${JSON.stringify(newUser)}`);\n                  \n                  // Test creating a client record\n                  const client = await ClientModel.create({\n                    user_id: user.id,\n                    profile_data: { interests: ['therapy', 'wellness'] }\n                  });\n                  \n                  if (client) {\n                    setModelTestResult(prev => prev + '\\n\\nSuccessfully created client: ' + JSON.stringify(client));\n                  }\n                } else {\n                  throw new Error('Failed to create user record');\n                }\n              }\n            } catch (error) {\n              setModelTestResult(`Error testing models: ${error.message}`);\n            } finally {\n              setModelTestLoading(false);\n            }\n          }}\n          className=\"bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded\"\n          disabled={modelTestLoading}\n        >\n          {modelTestLoading ? 'Testing...' : 'Test Models'}\n        </button>\n        \n        {modelTestResult && (\n          <div className=\"mt-4 p-4 bg-gray-100 rounded overflow-auto max-h-60\">\n            <pre className=\"whitespace-pre-wrap\">{modelTestResult}</pre>\n          </div>\n        )}\n      </div>\n\n      {user ? (\n        <div className=\"user-profile\">\n          <h3>User Profile</h3>\n          <p><strong>Email:</strong> {user.email}</p>\n          <p><strong>ID:</strong> {user.id}</p>\n          <button \n            onClick={handleSignOut}\n            disabled={loading}\n          >\n            {loading ? 'Signing Out...' : 'Sign Out'}\n          </button>\n        </div>\n      ) : (\n        <div className=\"auth-form\">\n          <h3>Authentication</h3>\n          <form>\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email:</label>\n              <input\n                type=\"email\"\n                id=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password:</label>\n              <input\n                type=\"password\"\n                id=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n              />\n            </div>\n            <div className=\"button-group\">\n              <button\n                type=\"button\"\n                onClick={handleSignIn}\n                disabled={loading}\n              >\n                {loading ? 'Signing In...' : 'Sign In'}\n              </button>\n              <button\n                type=\"button\"\n                onClick={handleSignUp}\n                disabled={loading}\n              >\n                {loading ? 'Signing Up...' : 'Sign Up'}\n              </button>\n            </div>\n          </form>\n        </div>\n      )}\n\n      {message && (\n        <div className={`message ${message.includes('Error') ? 'error' : 'success'}`}>\n          {message}\n        </div>\n      )}\n\n      <div className=\"demo-section\">\n        <h3>Additional Features</h3>\n        <p>\n          This component demonstrates basic authentication with Supabase.\n          The full supabaseService.js includes methods for:\n        </p>\n        <ul>\n          <li>Database operations (fetch, insert, update, delete)</li>\n          <li>Storage management (upload, download, list files)</li>\n          <li>Realtime subscriptions</li>\n          <li>RPC function calls</li>\n        </ul>\n      </div>\n\n      <style jsx>{`\n        .supabase-demo {\n          max-width: 600px;\n          margin: 0 auto;\n          padding: 20px;\n          font-family: Arial, sans-serif;\n        }\n        .connection-status {\n          margin-bottom: 20px;\n          padding: 10px;\n          background-color: #f5f5f5;\n          border-radius: 4px;\n        }\n        .connected {\n          color: green;\n          font-weight: bold;\n        }\n        .disconnected {\n          color: red;\n          font-weight: bold;\n        }\n        .auth-form, .user-profile {\n          margin-bottom: 20px;\n          padding: 15px;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n        }\n        .form-group {\n          margin-bottom: 15px;\n        }\n        .form-group label {\n          display: block;\n          margin-bottom: 5px;\n        }\n        .form-group input {\n          width: 100%;\n          padding: 8px;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n        }\n        .button-group {\n          display: flex;\n          gap: 10px;\n        }\n        button {\n          padding: 8px 16px;\n          background-color: #4285f4;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n        }\n        button:hover {\n          background-color: #3367d6;\n        }\n        button:disabled {\n          background-color: #cccccc;\n          cursor: not-allowed;\n        }\n        .message {\n          margin: 15px 0;\n          padding: 10px;\n          border-radius: 4px;\n        }\n        .error {\n          background-color: #ffebee;\n          color: #c62828;\n        }\n        .success {\n          background-color: #e8f5e9;\n          color: #2e7d32;\n        }\n        .demo-section {\n          margin-top: 20px;\n          padding: 15px;\n          background-color: #f5f5f5;\n          border-radius: 4px;\n        }\n        ul {\n          padding-left: 20px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SupabaseDemo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}