{"ast":null,"code":"/**\n * Login Helper Utility\n * \n * This file provides utility functions to help with login during development.\n */// Mock user credentials\nexport const mockUsers={client:{email:'client@example.com',password:'password123',role:'client',name:'Client User'},therapist:{email:'therapist@example.com',password:'password123',role:'therapist',name:'Therapist User'},admin:{email:'admin@example.com',password:'password123',role:'admin',name:'Admin User'}};// Mock login function that bypasses authentication for development purposes\nexport const mockLogin=userType=>{try{if(!mockUsers[userType]){throw new Error(`Invalid user type: ${userType}`);}const user=mockUsers[userType];// Store mock user in localStorage to simulate authentication\nlocalStorage.setItem('smarttherapist_mock_user',JSON.stringify({id:`${userType}-1`,email:user.email,role:user.role,name:user.name||`${userType.charAt(0).toUpperCase()+userType.slice(1)} User`,profile_data:{name:user.name||`${userType.charAt(0).toUpperCase()+userType.slice(1)} User`}}));console.log(`Mock login successful as ${userType}`);// Navigate to the appropriate dashboard based on user type\nswitch(userType){case'client':window.location.href='/client/dashboard';break;case'therapist':window.location.href='/therapist/dashboard';break;case'admin':window.location.href='/admin/dashboard';break;default:window.location.href='/';}return true;}catch(error){console.error(`Error with mock login as ${userType}:`,error);return false;}};// Function to run in the browser console\nexport const loginAs=userType=>{return mockLogin(userType);};// Export a global function for browser console use\nif(typeof window!=='undefined'){window.loginAs=loginAs;}export default{mockUsers,mockLogin,loginAs};","map":{"version":3,"names":["mockUsers","client","email","password","role","name","therapist","admin","mockLogin","userType","Error","user","localStorage","setItem","JSON","stringify","id","charAt","toUpperCase","slice","profile_data","console","log","window","location","href","error","loginAs"],"sources":["/Users/gio/development/smartterapist/client/src/utils/loginHelper.js"],"sourcesContent":["/**\n * Login Helper Utility\n * \n * This file provides utility functions to help with login during development.\n */\n\n// Mock user credentials\nexport const mockUsers = {\n  client: {\n    email: 'client@example.com',\n    password: 'password123',\n    role: 'client',\n    name: 'Client User'\n  },\n  therapist: {\n    email: 'therapist@example.com',\n    password: 'password123',\n    role: 'therapist',\n    name: 'Therapist User'\n  },\n  admin: {\n    email: 'admin@example.com',\n    password: 'password123',\n    role: 'admin',\n    name: 'Admin User'\n  }\n};\n\n// Mock login function that bypasses authentication for development purposes\nexport const mockLogin = (userType) => {\n  try {\n    if (!mockUsers[userType]) {\n      throw new Error(`Invalid user type: ${userType}`);\n    }\n\n    const user = mockUsers[userType];\n    \n    // Store mock user in localStorage to simulate authentication\n    localStorage.setItem('smarttherapist_mock_user', JSON.stringify({\n      id: `${userType}-1`,\n      email: user.email,\n      role: user.role,\n      name: user.name || `${userType.charAt(0).toUpperCase() + userType.slice(1)} User`,\n      profile_data: {\n        name: user.name || `${userType.charAt(0).toUpperCase() + userType.slice(1)} User`\n      }\n    }));\n    \n    console.log(`Mock login successful as ${userType}`);\n    \n    // Navigate to the appropriate dashboard based on user type\n    switch (userType) {\n      case 'client':\n        window.location.href = '/client/dashboard';\n        break;\n      case 'therapist':\n        window.location.href = '/therapist/dashboard';\n        break;\n      case 'admin':\n        window.location.href = '/admin/dashboard';\n        break;\n      default:\n        window.location.href = '/';\n    }\n    \n    return true;\n  } catch (error) {\n    console.error(`Error with mock login as ${userType}:`, error);\n    return false;\n  }\n};\n\n// Function to run in the browser console\nexport const loginAs = (userType) => {\n  return mockLogin(userType);\n};\n\n// Export a global function for browser console use\nif (typeof window !== 'undefined') {\n  window.loginAs = loginAs;\n}\n\nexport default {\n  mockUsers,\n  mockLogin,\n  loginAs\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GAEA;AACA,MAAO,MAAM,CAAAA,SAAS,CAAG,CACvBC,MAAM,CAAE,CACNC,KAAK,CAAE,oBAAoB,CAC3BC,QAAQ,CAAE,aAAa,CACvBC,IAAI,CAAE,QAAQ,CACdC,IAAI,CAAE,aACR,CAAC,CACDC,SAAS,CAAE,CACTJ,KAAK,CAAE,uBAAuB,CAC9BC,QAAQ,CAAE,aAAa,CACvBC,IAAI,CAAE,WAAW,CACjBC,IAAI,CAAE,gBACR,CAAC,CACDE,KAAK,CAAE,CACLL,KAAK,CAAE,mBAAmB,CAC1BC,QAAQ,CAAE,aAAa,CACvBC,IAAI,CAAE,OAAO,CACbC,IAAI,CAAE,YACR,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,SAAS,CAAIC,QAAQ,EAAK,CACrC,GAAI,CACF,GAAI,CAACT,SAAS,CAACS,QAAQ,CAAC,CAAE,CACxB,KAAM,IAAI,CAAAC,KAAK,CAAC,sBAAsBD,QAAQ,EAAE,CAAC,CACnD,CAEA,KAAM,CAAAE,IAAI,CAAGX,SAAS,CAACS,QAAQ,CAAC,CAEhC;AACAG,YAAY,CAACC,OAAO,CAAC,0BAA0B,CAAEC,IAAI,CAACC,SAAS,CAAC,CAC9DC,EAAE,CAAE,GAAGP,QAAQ,IAAI,CACnBP,KAAK,CAAES,IAAI,CAACT,KAAK,CACjBE,IAAI,CAAEO,IAAI,CAACP,IAAI,CACfC,IAAI,CAAEM,IAAI,CAACN,IAAI,EAAI,GAAGI,QAAQ,CAACQ,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAGT,QAAQ,CAACU,KAAK,CAAC,CAAC,CAAC,OAAO,CACjFC,YAAY,CAAE,CACZf,IAAI,CAAEM,IAAI,CAACN,IAAI,EAAI,GAAGI,QAAQ,CAACQ,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAGT,QAAQ,CAACU,KAAK,CAAC,CAAC,CAAC,OAC5E,CACF,CAAC,CAAC,CAAC,CAEHE,OAAO,CAACC,GAAG,CAAC,4BAA4Bb,QAAQ,EAAE,CAAC,CAEnD;AACA,OAAQA,QAAQ,EACd,IAAK,QAAQ,CACXc,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,mBAAmB,CAC1C,MACF,IAAK,WAAW,CACdF,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,sBAAsB,CAC7C,MACF,IAAK,OAAO,CACVF,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,kBAAkB,CACzC,MACF,QACEF,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,GAAG,CAC9B,CAEA,MAAO,KAAI,CACb,CAAE,MAAOC,KAAK,CAAE,CACdL,OAAO,CAACK,KAAK,CAAC,4BAA4BjB,QAAQ,GAAG,CAAEiB,KAAK,CAAC,CAC7D,MAAO,MAAK,CACd,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,OAAO,CAAIlB,QAAQ,EAAK,CACnC,MAAO,CAAAD,SAAS,CAACC,QAAQ,CAAC,CAC5B,CAAC,CAED;AACA,GAAI,MAAO,CAAAc,MAAM,GAAK,WAAW,CAAE,CACjCA,MAAM,CAACI,OAAO,CAAGA,OAAO,CAC1B,CAEA,cAAe,CACb3B,SAAS,CACTQ,SAAS,CACTmB,OACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}