{"ast":null,"code":"// Direct Login Script for Development\n// This script allows direct login with mock users by bypassing email confirmation\n\nimport { supabase } from '../services/supabaseClient';\n\n// Mock user credentials\nconst mockUsers = {\n  client: {\n    email: 'client@example.com',\n    password: 'password123',\n    id: 'client-1'\n  },\n  therapist: {\n    email: 'therapist@example.com',\n    password: 'password123',\n    id: 'therapist-1'\n  },\n  admin: {\n    email: 'admin@example.com',\n    password: 'password123',\n    id: 'admin-1'\n  }\n};\n\n/**\n * Direct login function that bypasses normal authentication flow\n * @param {string} userType - Type of user to login as (client, therapist, admin)\n */\nexport const directLogin = async userType => {\n  try {\n    if (!mockUsers[userType]) {\n      throw new Error(`Invalid user type: ${userType}`);\n    }\n    const user = mockUsers[userType];\n\n    // Try to sign in with email and password\n    const {\n      data,\n      error\n    } = await supabase.auth.signInWithPassword({\n      email: user.email,\n      password: user.password\n    });\n    if (error) {\n      console.log('Normal login failed, trying admin API...');\n\n      // If normal login fails, try to create a session directly\n      // Note: This requires admin privileges and would only work in development\n      const {\n        data: sessionData,\n        error: sessionError\n      } = await supabase.auth.admin.createUser({\n        email: user.email,\n        password: user.password,\n        email_confirm: true,\n        user_metadata: {\n          id: user.id\n        }\n      });\n      if (sessionError) {\n        throw sessionError;\n      }\n\n      // Try logging in again after creating the user\n      const {\n        data: loginData,\n        error: loginError\n      } = await supabase.auth.signInWithPassword({\n        email: user.email,\n        password: user.password\n      });\n      if (loginError) {\n        throw loginError;\n      }\n      console.log('Login successful via admin API');\n      return loginData;\n    }\n    console.log('Login successful via normal flow');\n    return data;\n  } catch (error) {\n    console.error('Direct login error:', error);\n    throw error;\n  }\n};\n\n// Export mock users for reference\nexport { mockUsers };","map":{"version":3,"names":["supabase","mockUsers","client","email","password","id","therapist","admin","directLogin","userType","Error","user","data","error","auth","signInWithPassword","console","log","sessionData","sessionError","createUser","email_confirm","user_metadata","loginData","loginError"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/scripts/directLogin.js"],"sourcesContent":["// Direct Login Script for Development\n// This script allows direct login with mock users by bypassing email confirmation\n\nimport { supabase } from '../services/supabaseClient';\n\n// Mock user credentials\nconst mockUsers = {\n  client: {\n    email: 'client@example.com',\n    password: 'password123',\n    id: 'client-1'\n  },\n  therapist: {\n    email: 'therapist@example.com',\n    password: 'password123',\n    id: 'therapist-1'\n  },\n  admin: {\n    email: 'admin@example.com',\n    password: 'password123',\n    id: 'admin-1'\n  }\n};\n\n/**\n * Direct login function that bypasses normal authentication flow\n * @param {string} userType - Type of user to login as (client, therapist, admin)\n */\nexport const directLogin = async (userType) => {\n  try {\n    if (!mockUsers[userType]) {\n      throw new Error(`Invalid user type: ${userType}`);\n    }\n\n    const user = mockUsers[userType];\n    \n    // Try to sign in with email and password\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email: user.email,\n      password: user.password\n    });\n    \n    if (error) {\n      console.log('Normal login failed, trying admin API...');\n      \n      // If normal login fails, try to create a session directly\n      // Note: This requires admin privileges and would only work in development\n      const { data: sessionData, error: sessionError } = await supabase.auth.admin.createUser({\n        email: user.email,\n        password: user.password,\n        email_confirm: true,\n        user_metadata: { id: user.id }\n      });\n      \n      if (sessionError) {\n        throw sessionError;\n      }\n      \n      // Try logging in again after creating the user\n      const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({\n        email: user.email,\n        password: user.password\n      });\n      \n      if (loginError) {\n        throw loginError;\n      }\n      \n      console.log('Login successful via admin API');\n      return loginData;\n    }\n    \n    console.log('Login successful via normal flow');\n    return data;\n  } catch (error) {\n    console.error('Direct login error:', error);\n    throw error;\n  }\n};\n\n// Export mock users for reference\nexport { mockUsers };\n"],"mappings":"AAAA;AACA;;AAEA,SAASA,QAAQ,QAAQ,4BAA4B;;AAErD;AACA,MAAMC,SAAS,GAAG;EAChBC,MAAM,EAAE;IACNC,KAAK,EAAE,oBAAoB;IAC3BC,QAAQ,EAAE,aAAa;IACvBC,EAAE,EAAE;EACN,CAAC;EACDC,SAAS,EAAE;IACTH,KAAK,EAAE,uBAAuB;IAC9BC,QAAQ,EAAE,aAAa;IACvBC,EAAE,EAAE;EACN,CAAC;EACDE,KAAK,EAAE;IACLJ,KAAK,EAAE,mBAAmB;IAC1BC,QAAQ,EAAE,aAAa;IACvBC,EAAE,EAAE;EACN;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMG,WAAW,GAAG,MAAOC,QAAQ,IAAK;EAC7C,IAAI;IACF,IAAI,CAACR,SAAS,CAACQ,QAAQ,CAAC,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,sBAAsBD,QAAQ,EAAE,CAAC;IACnD;IAEA,MAAME,IAAI,GAAGV,SAAS,CAACQ,QAAQ,CAAC;;IAEhC;IACA,MAAM;MAAEG,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAACC,kBAAkB,CAAC;MAC7DZ,KAAK,EAAEQ,IAAI,CAACR,KAAK;MACjBC,QAAQ,EAAEO,IAAI,CAACP;IACjB,CAAC,CAAC;IAEF,IAAIS,KAAK,EAAE;MACTG,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;;MAEvD;MACA;MACA,MAAM;QAAEL,IAAI,EAAEM,WAAW;QAAEL,KAAK,EAAEM;MAAa,CAAC,GAAG,MAAMnB,QAAQ,CAACc,IAAI,CAACP,KAAK,CAACa,UAAU,CAAC;QACtFjB,KAAK,EAAEQ,IAAI,CAACR,KAAK;QACjBC,QAAQ,EAAEO,IAAI,CAACP,QAAQ;QACvBiB,aAAa,EAAE,IAAI;QACnBC,aAAa,EAAE;UAAEjB,EAAE,EAAEM,IAAI,CAACN;QAAG;MAC/B,CAAC,CAAC;MAEF,IAAIc,YAAY,EAAE;QAChB,MAAMA,YAAY;MACpB;;MAEA;MACA,MAAM;QAAEP,IAAI,EAAEW,SAAS;QAAEV,KAAK,EAAEW;MAAW,CAAC,GAAG,MAAMxB,QAAQ,CAACc,IAAI,CAACC,kBAAkB,CAAC;QACpFZ,KAAK,EAAEQ,IAAI,CAACR,KAAK;QACjBC,QAAQ,EAAEO,IAAI,CAACP;MACjB,CAAC,CAAC;MAEF,IAAIoB,UAAU,EAAE;QACd,MAAMA,UAAU;MAClB;MAEAR,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7C,OAAOM,SAAS;IAClB;IAEAP,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/C,OAAOL,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdG,OAAO,CAACH,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,SAASZ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}