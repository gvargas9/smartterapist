{"ast":null,"code":"import { supabase } from './supabaseClient';\n\n/**\n * Service for handling chat-related functionality\n */\nexport const chatService = {\n  /**\n   * Get conversation history for a specific conversation\n   * @param {string} conversationId - The ID of the conversation\n   * @returns {Promise<Array>} - Array of messages\n   */\n  async getConversationHistory(conversationId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').select('*').eq('conversation_id', conversationId).order('timestamp', {\n        ascending: true\n      });\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching conversation history:', error);\n      throw error;\n    }\n  },\n  /**\n   * Create a new conversation\n   * @param {string} clientId - The client's user ID\n   * @param {string|null} therapistId - The therapist's user ID (null for AI-only)\n   * @returns {Promise<string>} - The new conversation ID\n   */\n  async createConversation(clientId, therapistId = null) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('conversations').insert([{\n        client_id: clientId,\n        therapist_id: therapistId,\n        start_ts: new Date().toISOString()\n      }]).select().single();\n      if (error) throw error;\n      return data.id;\n    } catch (error) {\n      console.error('Error creating conversation:', error);\n      throw error;\n    }\n  },\n  /**\n   * End a conversation\n   * @param {string} conversationId - The ID of the conversation to end\n   * @returns {Promise<void>}\n   */\n  async endConversation(conversationId) {\n    try {\n      const {\n        error\n      } = await supabase.from('conversations').update({\n        end_ts: new Date().toISOString()\n      }).eq('id', conversationId);\n      if (error) throw error;\n    } catch (error) {\n      console.error('Error ending conversation:', error);\n      throw error;\n    }\n  },\n  /**\n   * Save a message to the database\n   * @param {Object} message - The message object\n   * @returns {Promise<Object>} - The saved message\n   */\n  async saveMessage(message) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('messages').insert([message]).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error saving message:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get AI response for a message\n   * @param {string} message - The user's message\n   * @param {string} conversationId - The conversation ID\n   * @param {string} userId - The user's ID\n   * @returns {Promise<Object>} - The AI response\n   */\n  async getAIResponse(message, conversationId, userId) {\n    try {\n      // In a real implementation, this would call your backend API\n      // For now, we'll simulate a response with a delay\n      return new Promise(resolve => {\n        setTimeout(() => {\n          // Get the current behavior for the user\n          this.getCurrentBehavior(userId).then(behavior => {\n            let responseText = 'I understand how you feel. Can you tell me more about that?';\n\n            // Simple keyword-based responses for demo purposes\n            if (message.toLowerCase().includes('anxious') || message.toLowerCase().includes('anxiety')) {\n              responseText = `I notice you mentioned feeling anxious. ${(behavior === null || behavior === void 0 ? void 0 : behavior.name) === 'CBT-focused' ? 'Let\\'s identify what thoughts might be contributing to this anxiety. Can you share what\\'s going through your mind?' : 'Taking slow, deep breaths can help in the moment. Would you like to try a brief breathing exercise together?'}`;\n            } else if (message.toLowerCase().includes('sad') || message.toLowerCase().includes('depressed')) {\n              responseText = `I'm sorry to hear you're feeling down. ${(behavior === null || behavior === void 0 ? void 0 : behavior.name) === 'Motivational' ? \"What's one small thing you could do today that might bring you a moment of joy?\" : \"Depression can make everything feel more difficult. Have you noticed any patterns to when these feelings are strongest?\"}`;\n            } else if (message.toLowerCase().includes('work') || message.toLowerCase().includes('job')) {\n              responseText = `Work situations can be challenging. ${(behavior === null || behavior === void 0 ? void 0 : behavior.name) === 'Mindfulness' ? \"When you're at work, what helps you stay grounded in the present moment?\" : \"How do you think your thoughts about work are affecting your emotions and behaviors?\"}`;\n            }\n            resolve({\n              message: responseText,\n              sentiment_score: Math.random() * 0.5 + 0.5 // Random positive sentiment between 0.5-1.0\n            });\n          });\n        }, 1000);\n      });\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get the current active behavior for a user\n   * @param {string} userId - The user's ID\n   * @returns {Promise<Object|null>} - The active behavior or null\n   */\n  async getCurrentBehavior(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('client_behaviors').select('behaviors(*)').eq('client_id', userId).eq('active', true).single();\n      if (error && error.code !== 'PGRST116') throw error;\n      return (data === null || data === void 0 ? void 0 : data.behaviors) || null;\n    } catch (error) {\n      console.error('Error getting current behavior:', error);\n      return null;\n    }\n  },\n  /**\n   * Generate a summary for a conversation\n   * @param {string} conversationId - The conversation ID\n   * @returns {Promise<Object>} - The generated summary\n   */\n  async generateSummary(conversationId) {\n    try {\n      // In a real implementation, this would call your backend API\n      // For now, we'll create a mock summary\n      const {\n        data: messages,\n        error\n      } = await supabase.from('messages').select('*').eq('conversation_id', conversationId).order('timestamp', {\n        ascending: true\n      });\n      if (error) throw error;\n\n      // Calculate simple sentiment metrics\n      const sentimentScores = messages.filter(m => m.sentiment_score !== null).map(m => m.sentiment_score);\n      const sentimentMetrics = {\n        average: sentimentScores.length > 0 ? sentimentScores.reduce((sum, score) => sum + score, 0) / sentimentScores.length : 0.5,\n        min: sentimentScores.length > 0 ? Math.min(...sentimentScores) : 0.5,\n        max: sentimentScores.length > 0 ? Math.max(...sentimentScores) : 0.5,\n        trend: sentimentScores.length > 1 && sentimentScores[sentimentScores.length - 1] > sentimentScores[0] ? 'improving' : sentimentScores.length > 1 && sentimentScores[sentimentScores.length - 1] < sentimentScores[0] ? 'declining' : 'stable'\n      };\n\n      // Create a simple summary based on message content\n      let summaryText = 'Session focused on ';\n      if (messages.some(m => m.text.toLowerCase().includes('anxiety') || m.text.toLowerCase().includes('anxious'))) {\n        summaryText += 'anxiety management. ';\n      } else if (messages.some(m => m.text.toLowerCase().includes('work') || m.text.toLowerCase().includes('job'))) {\n        summaryText += 'work-related stress. ';\n      } else if (messages.some(m => m.text.toLowerCase().includes('sad') || m.text.toLowerCase().includes('depressed'))) {\n        summaryText += 'mood improvement strategies. ';\n      } else {\n        summaryText += 'general well-being. ';\n      }\n      summaryText += `Overall sentiment was ${sentimentMetrics.trend}. `;\n      if (sentimentMetrics.trend === 'improving') {\n        summaryText += 'Client showed progress during the session.';\n      } else if (sentimentMetrics.trend === 'declining') {\n        summaryText += 'Client may need additional support in future sessions.';\n      } else {\n        summaryText += 'Client maintained consistent engagement throughout the session.';\n      }\n\n      // Save the summary to the database\n      const {\n        data: summary,\n        error: summaryError\n      } = await supabase.from('summaries').insert([{\n        conversation_id: conversationId,\n        summary_text: summaryText,\n        sentiment_metrics: sentimentMetrics\n      }]).select().single();\n      if (summaryError) throw summaryError;\n      return summary;\n    } catch (error) {\n      console.error('Error generating summary:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["supabase","chatService","getConversationHistory","conversationId","data","error","from","select","eq","order","ascending","console","createConversation","clientId","therapistId","insert","client_id","therapist_id","start_ts","Date","toISOString","single","id","endConversation","update","end_ts","saveMessage","message","getAIResponse","userId","Promise","resolve","setTimeout","getCurrentBehavior","then","behavior","responseText","toLowerCase","includes","name","sentiment_score","Math","random","code","behaviors","generateSummary","messages","sentimentScores","filter","m","map","sentimentMetrics","average","length","reduce","sum","score","min","max","trend","summaryText","some","text","summary","summaryError","conversation_id","summary_text","sentiment_metrics"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/services/chatService.js"],"sourcesContent":["import { supabase } from './supabaseClient';\n\n/**\n * Service for handling chat-related functionality\n */\nexport const chatService = {\n  /**\n   * Get conversation history for a specific conversation\n   * @param {string} conversationId - The ID of the conversation\n   * @returns {Promise<Array>} - Array of messages\n   */\n  async getConversationHistory(conversationId) {\n    try {\n      const { data, error } = await supabase\n        .from('messages')\n        .select('*')\n        .eq('conversation_id', conversationId)\n        .order('timestamp', { ascending: true });\n        \n      if (error) throw error;\n      \n      return data || [];\n    } catch (error) {\n      console.error('Error fetching conversation history:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Create a new conversation\n   * @param {string} clientId - The client's user ID\n   * @param {string|null} therapistId - The therapist's user ID (null for AI-only)\n   * @returns {Promise<string>} - The new conversation ID\n   */\n  async createConversation(clientId, therapistId = null) {\n    try {\n      const { data, error } = await supabase\n        .from('conversations')\n        .insert([\n          {\n            client_id: clientId,\n            therapist_id: therapistId,\n            start_ts: new Date().toISOString()\n          }\n        ])\n        .select()\n        .single();\n        \n      if (error) throw error;\n      \n      return data.id;\n    } catch (error) {\n      console.error('Error creating conversation:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * End a conversation\n   * @param {string} conversationId - The ID of the conversation to end\n   * @returns {Promise<void>}\n   */\n  async endConversation(conversationId) {\n    try {\n      const { error } = await supabase\n        .from('conversations')\n        .update({ end_ts: new Date().toISOString() })\n        .eq('id', conversationId);\n        \n      if (error) throw error;\n    } catch (error) {\n      console.error('Error ending conversation:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Save a message to the database\n   * @param {Object} message - The message object\n   * @returns {Promise<Object>} - The saved message\n   */\n  async saveMessage(message) {\n    try {\n      const { data, error } = await supabase\n        .from('messages')\n        .insert([message])\n        .select()\n        .single();\n        \n      if (error) throw error;\n      \n      return data;\n    } catch (error) {\n      console.error('Error saving message:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get AI response for a message\n   * @param {string} message - The user's message\n   * @param {string} conversationId - The conversation ID\n   * @param {string} userId - The user's ID\n   * @returns {Promise<Object>} - The AI response\n   */\n  async getAIResponse(message, conversationId, userId) {\n    try {\n      // In a real implementation, this would call your backend API\n      // For now, we'll simulate a response with a delay\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          // Get the current behavior for the user\n          this.getCurrentBehavior(userId).then(behavior => {\n            let responseText = 'I understand how you feel. Can you tell me more about that?';\n            \n            // Simple keyword-based responses for demo purposes\n            if (message.toLowerCase().includes('anxious') || message.toLowerCase().includes('anxiety')) {\n              responseText = `I notice you mentioned feeling anxious. ${behavior?.name === 'CBT-focused' ? \n                'Let\\'s identify what thoughts might be contributing to this anxiety. Can you share what\\'s going through your mind?' : \n                'Taking slow, deep breaths can help in the moment. Would you like to try a brief breathing exercise together?'}`;\n            } else if (message.toLowerCase().includes('sad') || message.toLowerCase().includes('depressed')) {\n              responseText = `I'm sorry to hear you're feeling down. ${behavior?.name === 'Motivational' ? \n                \"What's one small thing you could do today that might bring you a moment of joy?\" : \n                \"Depression can make everything feel more difficult. Have you noticed any patterns to when these feelings are strongest?\"}`;\n            } else if (message.toLowerCase().includes('work') || message.toLowerCase().includes('job')) {\n              responseText = `Work situations can be challenging. ${behavior?.name === 'Mindfulness' ? \n                \"When you're at work, what helps you stay grounded in the present moment?\" : \n                \"How do you think your thoughts about work are affecting your emotions and behaviors?\"}`;\n            }\n            \n            resolve({\n              message: responseText,\n              sentiment_score: Math.random() * 0.5 + 0.5 // Random positive sentiment between 0.5-1.0\n            });\n          });\n        }, 1000);\n      });\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get the current active behavior for a user\n   * @param {string} userId - The user's ID\n   * @returns {Promise<Object|null>} - The active behavior or null\n   */\n  async getCurrentBehavior(userId) {\n    try {\n      const { data, error } = await supabase\n        .from('client_behaviors')\n        .select('behaviors(*)')\n        .eq('client_id', userId)\n        .eq('active', true)\n        .single();\n        \n      if (error && error.code !== 'PGRST116') throw error;\n      \n      return data?.behaviors || null;\n    } catch (error) {\n      console.error('Error getting current behavior:', error);\n      return null;\n    }\n  },\n  \n  /**\n   * Generate a summary for a conversation\n   * @param {string} conversationId - The conversation ID\n   * @returns {Promise<Object>} - The generated summary\n   */\n  async generateSummary(conversationId) {\n    try {\n      // In a real implementation, this would call your backend API\n      // For now, we'll create a mock summary\n      const { data: messages, error } = await supabase\n        .from('messages')\n        .select('*')\n        .eq('conversation_id', conversationId)\n        .order('timestamp', { ascending: true });\n        \n      if (error) throw error;\n      \n      // Calculate simple sentiment metrics\n      const sentimentScores = messages\n        .filter(m => m.sentiment_score !== null)\n        .map(m => m.sentiment_score);\n        \n      const sentimentMetrics = {\n        average: sentimentScores.length > 0 \n          ? sentimentScores.reduce((sum, score) => sum + score, 0) / sentimentScores.length \n          : 0.5,\n        min: sentimentScores.length > 0 \n          ? Math.min(...sentimentScores) \n          : 0.5,\n        max: sentimentScores.length > 0 \n          ? Math.max(...sentimentScores) \n          : 0.5,\n        trend: sentimentScores.length > 1 && sentimentScores[sentimentScores.length - 1] > sentimentScores[0]\n          ? 'improving'\n          : sentimentScores.length > 1 && sentimentScores[sentimentScores.length - 1] < sentimentScores[0]\n          ? 'declining'\n          : 'stable'\n      };\n      \n      // Create a simple summary based on message content\n      let summaryText = 'Session focused on ';\n      \n      if (messages.some(m => m.text.toLowerCase().includes('anxiety') || m.text.toLowerCase().includes('anxious'))) {\n        summaryText += 'anxiety management. ';\n      } else if (messages.some(m => m.text.toLowerCase().includes('work') || m.text.toLowerCase().includes('job'))) {\n        summaryText += 'work-related stress. ';\n      } else if (messages.some(m => m.text.toLowerCase().includes('sad') || m.text.toLowerCase().includes('depressed'))) {\n        summaryText += 'mood improvement strategies. ';\n      } else {\n        summaryText += 'general well-being. ';\n      }\n      \n      summaryText += `Overall sentiment was ${sentimentMetrics.trend}. `;\n      \n      if (sentimentMetrics.trend === 'improving') {\n        summaryText += 'Client showed progress during the session.';\n      } else if (sentimentMetrics.trend === 'declining') {\n        summaryText += 'Client may need additional support in future sessions.';\n      } else {\n        summaryText += 'Client maintained consistent engagement throughout the session.';\n      }\n      \n      // Save the summary to the database\n      const { data: summary, error: summaryError } = await supabase\n        .from('summaries')\n        .insert([\n          {\n            conversation_id: conversationId,\n            summary_text: summaryText,\n            sentiment_metrics: sentimentMetrics\n          }\n        ])\n        .select()\n        .single();\n        \n      if (summaryError) throw summaryError;\n      \n      return summary;\n    } catch (error) {\n      console.error('Error generating summary:', error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}