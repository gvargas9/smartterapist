{"ast":null,"code":"var _jsxFileName = \"/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check for mock user in development mode\n    const checkMockUser = () => {\n      try {\n        // Check if we have a mock user in localStorage (development only)\n        const mockUserJson = localStorage.getItem('smarttherapist_mock_user');\n        if (mockUserJson) {\n          const mockUser = JSON.parse(mockUserJson);\n          console.log('Using mock user for development:', mockUser);\n          setUser(mockUser);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Error checking mock user:', error);\n        return false;\n      }\n    };\n\n    // Check active session\n    const checkSession = async () => {\n      try {\n        // First check for mock user in development\n        if (checkMockUser()) {\n          setLoading(false);\n          return;\n        }\n\n        // Otherwise check Supabase session\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          throw error;\n        }\n        if (session) {\n          // Get user profile from database to include role information\n          const {\n            data: profile,\n            error: profileError\n          } = await supabase.from('users').select('*').eq('id', session.user.id).single();\n          if (profileError) {\n            throw profileError;\n          }\n          setUser({\n            ...session.user,\n            role: profile.role,\n            profile_data: profile\n          });\n        } else {\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('Error checking session:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkSession();\n\n    // Set up auth state change listener\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (session) {\n        // Get user role from database\n        const {\n          data: profile,\n          error: profileError\n        } = await supabase.from('users').select('*').eq('id', session.user.id).single();\n        if (!profileError) {\n          setUser({\n            ...session.user,\n            role: profile.role,\n            profile_data: profile\n          });\n        }\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    });\n\n    // Cleanup subscription\n    return () => {\n      if (authListener !== null && authListener !== void 0 && authListener.subscription) {\n        authListener.subscription.unsubscribe();\n      }\n    };\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signUp = async (email, password, userData) => {\n    try {\n      setLoading(true);\n\n      // Register user with Supabase Auth\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      if (authError) {\n        throw authError;\n      }\n      if (authData.user) {\n        // Create user profile in database\n        const {\n          error: profileError\n        } = await supabase.from('users').insert([{\n          id: authData.user.id,\n          email: email,\n          role: userData.role || 'client',\n          created_at: new Date()\n        }]);\n        if (profileError) {\n          throw profileError;\n        }\n\n        // If user is a client, create client record\n        if (userData.role === 'client' || !userData.role) {\n          const {\n            error: clientError\n          } = await supabase.from('clients').insert([{\n            user_id: authData.user.id,\n            profile_data: userData.profile_data || {}\n          }]);\n          if (clientError) {\n            throw clientError;\n          }\n        }\n\n        // If user is a therapist, create therapist record\n        if (userData.role === 'therapist') {\n          const {\n            error: therapistError\n          } = await supabase.from('therapists').insert([{\n            user_id: authData.user.id,\n            credentials: userData.credentials || {},\n            availability: userData.availability || {}\n          }]);\n          if (therapistError) {\n            throw therapistError;\n          }\n        }\n      }\n      return authData;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = async () => {\n    try {\n      setLoading(true);\n\n      // Check if we're using a mock user\n      if (localStorage.getItem('smarttherapist_mock_user')) {\n        localStorage.removeItem('smarttherapist_mock_user');\n        setUser(null);\n        console.log('Mock user signed out');\n      } else {\n        // Regular Supabase sign out\n        const {\n          error\n        } = await supabase.auth.signOut();\n        if (error) {\n          throw error;\n        }\n        setUser(null);\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetPassword = async email => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.resetPasswordForEmail(email);\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updatePassword = async newPassword => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      signIn,\n      signUp,\n      signOut,\n      resetPassword,\n      updatePassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","checkMockUser","mockUserJson","localStorage","getItem","mockUser","JSON","parse","console","log","checkSession","data","session","auth","getSession","profile","profileError","from","select","eq","id","single","role","profile_data","message","authListener","onAuthStateChange","event","subscription","unsubscribe","signIn","email","password","signInWithPassword","signUp","userData","authData","authError","insert","created_at","Date","clientError","user_id","therapistError","credentials","availability","signOut","removeItem","resetPassword","resetPasswordForEmail","updatePassword","newPassword","updateUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabaseClient';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Check for mock user in development mode\n    const checkMockUser = () => {\n      try {\n        // Check if we have a mock user in localStorage (development only)\n        const mockUserJson = localStorage.getItem('smarttherapist_mock_user');\n        if (mockUserJson) {\n          const mockUser = JSON.parse(mockUserJson);\n          console.log('Using mock user for development:', mockUser);\n          setUser(mockUser);\n          return true;\n        }\n        return false;\n      } catch (error) {\n        console.error('Error checking mock user:', error);\n        return false;\n      }\n    };\n    \n    // Check active session\n    const checkSession = async () => {\n      try {\n        // First check for mock user in development\n        if (checkMockUser()) {\n          setLoading(false);\n          return;\n        }\n        \n        // Otherwise check Supabase session\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          throw error;\n        }\n\n        if (session) {\n          // Get user profile from database to include role information\n          const { data: profile, error: profileError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n\n          if (profileError) {\n            throw profileError;\n          }\n\n          setUser({\n            ...session.user,\n            role: profile.role,\n            profile_data: profile\n          });\n        } else {\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('Error checking session:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkSession();\n\n    // Set up auth state change listener\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        if (session) {\n          // Get user role from database\n          const { data: profile, error: profileError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n\n          if (!profileError) {\n            setUser({\n              ...session.user,\n              role: profile.role,\n              profile_data: profile\n            });\n          }\n        } else {\n          setUser(null);\n        }\n        setLoading(false);\n      }\n    );\n\n    // Cleanup subscription\n    return () => {\n      if (authListener?.subscription) {\n        authListener.subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n      \n      if (error) {\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email, password, userData) => {\n    try {\n      setLoading(true);\n      \n      // Register user with Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      \n      if (authError) {\n        throw authError;\n      }\n      \n      if (authData.user) {\n        // Create user profile in database\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert([\n            {\n              id: authData.user.id,\n              email: email,\n              role: userData.role || 'client',\n              created_at: new Date()\n            }\n          ]);\n          \n        if (profileError) {\n          throw profileError;\n        }\n        \n        // If user is a client, create client record\n        if (userData.role === 'client' || !userData.role) {\n          const { error: clientError } = await supabase\n            .from('clients')\n            .insert([\n              {\n                user_id: authData.user.id,\n                profile_data: userData.profile_data || {}\n              }\n            ]);\n            \n          if (clientError) {\n            throw clientError;\n          }\n        }\n        \n        // If user is a therapist, create therapist record\n        if (userData.role === 'therapist') {\n          const { error: therapistError } = await supabase\n            .from('therapists')\n            .insert([\n              {\n                user_id: authData.user.id,\n                credentials: userData.credentials || {},\n                availability: userData.availability || {}\n              }\n            ]);\n            \n          if (therapistError) {\n            throw therapistError;\n          }\n        }\n      }\n      \n      return authData;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      \n      // Check if we're using a mock user\n      if (localStorage.getItem('smarttherapist_mock_user')) {\n        localStorage.removeItem('smarttherapist_mock_user');\n        setUser(null);\n        console.log('Mock user signed out');\n      } else {\n        // Regular Supabase sign out\n        const { error } = await supabase.auth.signOut();\n        \n        if (error) {\n          throw error;\n        }\n        \n        setUser(null);\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (email) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updatePassword = async (newPassword) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        error,\n        signIn,\n        signUp,\n        signOut,\n        resetPassword,\n        updatePassword\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}