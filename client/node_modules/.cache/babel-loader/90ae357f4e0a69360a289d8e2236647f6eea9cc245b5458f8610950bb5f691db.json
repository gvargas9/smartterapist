{"ast":null,"code":"/**\n * Voice Service\n * \n * This service provides methods for text-to-speech and speech-to-text functionality\n * using the ultravox.ai API.\n */\n\nimport { supabase } from './supabaseClient';\n\n/**\n * Get the user's voice settings from Supabase\n * @param {string} userId - The user's ID\n * @returns {Promise<Object>} - Voice settings object\n */\nexport const getUserVoiceSettings = async userId => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('users').select('voice_settings').eq('id', userId).single();\n    if (error) throw error;\n    return (data === null || data === void 0 ? void 0 : data.voice_settings) || {\n      enabled: true,\n      preferredVoice: 'en-US-Neural2-F',\n      speed: 1.0,\n      pitch: 1.0\n    };\n  } catch (error) {\n    console.error('Error fetching voice settings:', error);\n    return {\n      enabled: true,\n      preferredVoice: 'en-US-Neural2-F',\n      speed: 1.0,\n      pitch: 1.0\n    };\n  }\n};\n\n/**\n * Update the user's voice settings in Supabase\n * @param {string} userId - The user's ID\n * @param {Object} settings - Voice settings object\n * @returns {Promise<boolean>} - Success status\n */\nexport const updateUserVoiceSettings = async (userId, settings) => {\n  try {\n    const {\n      error\n    } = await supabase.from('users').update({\n      voice_settings: settings\n    }).eq('id', userId);\n    if (error) throw error;\n    return true;\n  } catch (error) {\n    console.error('Error updating voice settings:', error);\n    return false;\n  }\n};\n\n/**\n * Convert speech to text using ultravox.ai\n * @param {Blob} audioBlob - Audio blob from recording\n * @param {string} language - Language code (e.g., 'en-US')\n * @returns {Promise<string>} - Transcribed text\n */\nexport const speechToText = async (audioBlob, language = 'en-US') => {\n  try {\n    // Get ultravox.ai API key from environment variables or user settings\n    const apiKey = process.env.REACT_APP_ULTRAVOX_API_KEY;\n    if (!apiKey) {\n      throw new Error('Ultravox API key not found');\n    }\n\n    // Create form data for the API request\n    const formData = new FormData();\n    formData.append('audio', audioBlob);\n    formData.append('language', language);\n\n    // Call the ultravox.ai API\n    const response = await fetch('https://api.ultravox.ai/v1/speech-to-text', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: formData\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Speech-to-text failed');\n    }\n    const data = await response.json();\n    return data.text || '';\n  } catch (error) {\n    console.error('Speech-to-text error:', error);\n    throw error;\n  }\n};\n\n/**\n * Convert text to speech using ultravox.ai\n * @param {string} text - Text to convert to speech\n * @param {Object} options - TTS options\n * @returns {Promise<Blob>} - Audio blob\n */\nexport const textToSpeech = async (text, options = {}) => {\n  try {\n    // Get ultravox.ai API key from environment variables or user settings\n    const apiKey = process.env.REACT_APP_ULTRAVOX_API_KEY;\n    if (!apiKey) {\n      throw new Error('Ultravox API key not found');\n    }\n\n    // Default options\n    const defaultOptions = {\n      voice: 'en-US-Neural2-F',\n      speed: 1.0,\n      pitch: 1.0\n    };\n\n    // Merge default options with provided options\n    const ttsOptions = {\n      ...defaultOptions,\n      ...options\n    };\n\n    // Call the ultravox.ai API\n    const response = await fetch('https://api.ultravox.ai/v1/text-to-speech', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text,\n        voice: ttsOptions.voice,\n        speed: ttsOptions.speed,\n        pitch: ttsOptions.pitch\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Text-to-speech failed');\n    }\n\n    // Get audio blob from response\n    const audioBlob = await response.blob();\n    return audioBlob;\n  } catch (error) {\n    console.error('Text-to-speech error:', error);\n    throw error;\n  }\n};\n\n/**\n * Play audio from a blob\n * @param {Blob} audioBlob - Audio blob to play\n * @returns {Promise<void>}\n */\nexport const playAudio = async audioBlob => {\n  try {\n    const audioUrl = URL.createObjectURL(audioBlob);\n    const audio = new Audio(audioUrl);\n    return new Promise((resolve, reject) => {\n      audio.onended = () => {\n        URL.revokeObjectURL(audioUrl);\n        resolve();\n      };\n      audio.onerror = error => {\n        URL.revokeObjectURL(audioUrl);\n        reject(error);\n      };\n      audio.play();\n    });\n  } catch (error) {\n    console.error('Error playing audio:', error);\n    throw error;\n  }\n};\nexport const voiceService = {\n  getUserVoiceSettings,\n  updateUserVoiceSettings,\n  speechToText,\n  textToSpeech,\n  playAudio\n};\nexport default voiceService;","map":{"version":3,"names":["supabase","getUserVoiceSettings","userId","data","error","from","select","eq","single","voice_settings","enabled","preferredVoice","speed","pitch","console","updateUserVoiceSettings","settings","update","speechToText","audioBlob","language","apiKey","process","env","REACT_APP_ULTRAVOX_API_KEY","Error","formData","FormData","append","response","fetch","method","headers","body","ok","errorData","json","message","text","textToSpeech","options","defaultOptions","voice","ttsOptions","JSON","stringify","blob","playAudio","audioUrl","URL","createObjectURL","audio","Audio","Promise","resolve","reject","onended","revokeObjectURL","onerror","play","voiceService"],"sources":["/Users/gio/development/smartterapist/client/src/services/voiceService.js"],"sourcesContent":["/**\n * Voice Service\n * \n * This service provides methods for text-to-speech and speech-to-text functionality\n * using the ultravox.ai API.\n */\n\nimport { supabase } from './supabaseClient';\n\n/**\n * Get the user's voice settings from Supabase\n * @param {string} userId - The user's ID\n * @returns {Promise<Object>} - Voice settings object\n */\nexport const getUserVoiceSettings = async (userId) => {\n  try {\n    const { data, error } = await supabase\n      .from('users')\n      .select('voice_settings')\n      .eq('id', userId)\n      .single();\n      \n    if (error) throw error;\n    \n    return data?.voice_settings || {\n      enabled: true,\n      preferredVoice: 'en-US-Neural2-F',\n      speed: 1.0,\n      pitch: 1.0\n    };\n  } catch (error) {\n    console.error('Error fetching voice settings:', error);\n    return {\n      enabled: true,\n      preferredVoice: 'en-US-Neural2-F',\n      speed: 1.0,\n      pitch: 1.0\n    };\n  }\n};\n\n/**\n * Update the user's voice settings in Supabase\n * @param {string} userId - The user's ID\n * @param {Object} settings - Voice settings object\n * @returns {Promise<boolean>} - Success status\n */\nexport const updateUserVoiceSettings = async (userId, settings) => {\n  try {\n    const { error } = await supabase\n      .from('users')\n      .update({ voice_settings: settings })\n      .eq('id', userId);\n      \n    if (error) throw error;\n    \n    return true;\n  } catch (error) {\n    console.error('Error updating voice settings:', error);\n    return false;\n  }\n};\n\n/**\n * Convert speech to text using ultravox.ai\n * @param {Blob} audioBlob - Audio blob from recording\n * @param {string} language - Language code (e.g., 'en-US')\n * @returns {Promise<string>} - Transcribed text\n */\nexport const speechToText = async (audioBlob, language = 'en-US') => {\n  try {\n    // Get ultravox.ai API key from environment variables or user settings\n    const apiKey = process.env.REACT_APP_ULTRAVOX_API_KEY;\n    \n    if (!apiKey) {\n      throw new Error('Ultravox API key not found');\n    }\n    \n    // Create form data for the API request\n    const formData = new FormData();\n    formData.append('audio', audioBlob);\n    formData.append('language', language);\n    \n    // Call the ultravox.ai API\n    const response = await fetch('https://api.ultravox.ai/v1/speech-to-text', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`\n      },\n      body: formData\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Speech-to-text failed');\n    }\n    \n    const data = await response.json();\n    return data.text || '';\n  } catch (error) {\n    console.error('Speech-to-text error:', error);\n    throw error;\n  }\n};\n\n/**\n * Convert text to speech using ultravox.ai\n * @param {string} text - Text to convert to speech\n * @param {Object} options - TTS options\n * @returns {Promise<Blob>} - Audio blob\n */\nexport const textToSpeech = async (text, options = {}) => {\n  try {\n    // Get ultravox.ai API key from environment variables or user settings\n    const apiKey = process.env.REACT_APP_ULTRAVOX_API_KEY;\n    \n    if (!apiKey) {\n      throw new Error('Ultravox API key not found');\n    }\n    \n    // Default options\n    const defaultOptions = {\n      voice: 'en-US-Neural2-F',\n      speed: 1.0,\n      pitch: 1.0\n    };\n    \n    // Merge default options with provided options\n    const ttsOptions = { ...defaultOptions, ...options };\n    \n    // Call the ultravox.ai API\n    const response = await fetch('https://api.ultravox.ai/v1/text-to-speech', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${apiKey}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text,\n        voice: ttsOptions.voice,\n        speed: ttsOptions.speed,\n        pitch: ttsOptions.pitch\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Text-to-speech failed');\n    }\n    \n    // Get audio blob from response\n    const audioBlob = await response.blob();\n    return audioBlob;\n  } catch (error) {\n    console.error('Text-to-speech error:', error);\n    throw error;\n  }\n};\n\n/**\n * Play audio from a blob\n * @param {Blob} audioBlob - Audio blob to play\n * @returns {Promise<void>}\n */\nexport const playAudio = async (audioBlob) => {\n  try {\n    const audioUrl = URL.createObjectURL(audioBlob);\n    const audio = new Audio(audioUrl);\n    \n    return new Promise((resolve, reject) => {\n      audio.onended = () => {\n        URL.revokeObjectURL(audioUrl);\n        resolve();\n      };\n      \n      audio.onerror = (error) => {\n        URL.revokeObjectURL(audioUrl);\n        reject(error);\n      };\n      \n      audio.play();\n    });\n  } catch (error) {\n    console.error('Error playing audio:', error);\n    throw error;\n  }\n};\n\nexport const voiceService = {\n  getUserVoiceSettings,\n  updateUserVoiceSettings,\n  speechToText,\n  textToSpeech,\n  playAudio\n};\n\nexport default voiceService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}