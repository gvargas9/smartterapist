{"ast":null,"code":"/**\n * Language Context\n * \n * This context provides language selection and switching functionality\n * for the multi-lingual support throughout the application.\n */import React,{createContext,useState,useEffect}from'react';import{useTranslation}from'react-i18next';import{supabase}from'../services/supabaseClient';import{jsx as _jsx}from\"react/jsx-runtime\";export const LanguageContext=/*#__PURE__*/createContext();export const LanguageProvider=_ref=>{let{children}=_ref;const{i18n}=useTranslation();const[currentLanguage,setCurrentLanguage]=useState('en');const[availableLanguages,setAvailableLanguages]=useState([{code:'en',name:'English'},{code:'es',name:'Español'}]);// Initialize language from user preferences or localStorage\nuseEffect(()=>{const initializeLanguage=async()=>{try{var _session$user;// Try to get language from Supabase if user is logged in\nconst{data:{session}}=await supabase.auth.getSession();if(session!==null&&session!==void 0&&(_session$user=session.user)!==null&&_session$user!==void 0&&_session$user.id){var _userData$profile_dat;const{data:userData}=await supabase.from('users').select('profile_data').eq('id',session.user.id).single();const preferredLanguage=userData===null||userData===void 0?void 0:(_userData$profile_dat=userData.profile_data)===null||_userData$profile_dat===void 0?void 0:_userData$profile_dat.language;if(preferredLanguage&&availableLanguages.some(lang=>lang.code===preferredLanguage)){setCurrentLanguage(preferredLanguage);i18n.changeLanguage(preferredLanguage);return;}}}catch(error){console.error('Error fetching user language preference:',error);}// Fall back to localStorage or browser language\nconst savedLanguage=localStorage.getItem('language');if(savedLanguage&&availableLanguages.some(lang=>lang.code===savedLanguage)){setCurrentLanguage(savedLanguage);i18n.changeLanguage(savedLanguage);}else{// Detect browser language\nconst browserLang=navigator.language.split('-')[0];const supportedLang=availableLanguages.some(lang=>lang.code===browserLang)?browserLang:'en';setCurrentLanguage(supportedLang);i18n.changeLanguage(supportedLang);localStorage.setItem('language',supportedLang);}};initializeLanguage();},[i18n]);// Change language function\nconst changeLanguage=async languageCode=>{if(!availableLanguages.some(lang=>lang.code===languageCode)){console.error(`Language ${languageCode} is not supported`);return;}try{var _session$user2;console.log(`LanguageContext: Changing language to ${languageCode}`);// Update state first\nsetCurrentLanguage(languageCode);// Save to localStorage\nlocalStorage.setItem('language',languageCode);// Update i18n - this triggers the translation reload\nawait i18n.changeLanguage(languageCode);console.log(`Language changed to ${languageCode}, i18n.language is now: ${i18n.language}`);// Force reload resources to ensure translations are applied\nif(i18n.services.resourceStore){console.log('Reloading translation resources...');// This will trigger a reload of translations from Supabase\nawait i18n.reloadResources(languageCode,'translation');}// If user is logged in, save preference to Supabase\nconst{data:{session}}=await supabase.auth.getSession();if(session!==null&&session!==void 0&&(_session$user2=session.user)!==null&&_session$user2!==void 0&&_session$user2.id){const{data:userData}=await supabase.from('users').select('profile_data').eq('id',session.user.id).single();const updatedProfileData={...(userData===null||userData===void 0?void 0:userData.profile_data),language:languageCode};await supabase.from('users').update({profile_data:updatedProfileData}).eq('id',session.user.id);}}catch(error){console.error('Error changing language:',error);}};// Add new language\nconst addLanguage=(languageCode,languageName)=>{if(availableLanguages.some(lang=>lang.code===languageCode)){console.error(`Language ${languageCode} already exists`);return;}setAvailableLanguages(prev=>[...prev,{code:languageCode,name:languageName}]);};return/*#__PURE__*/_jsx(LanguageContext.Provider,{value:{currentLanguage,availableLanguages,changeLanguage,addLanguage},children:children});};export default LanguageContext;","map":{"version":3,"names":["React","createContext","useState","useEffect","useTranslation","supabase","jsx","_jsx","LanguageContext","LanguageProvider","_ref","children","i18n","currentLanguage","setCurrentLanguage","availableLanguages","setAvailableLanguages","code","name","initializeLanguage","_session$user","data","session","auth","getSession","user","id","_userData$profile_dat","userData","from","select","eq","single","preferredLanguage","profile_data","language","some","lang","changeLanguage","error","console","savedLanguage","localStorage","getItem","browserLang","navigator","split","supportedLang","setItem","languageCode","_session$user2","log","services","resourceStore","reloadResources","updatedProfileData","update","addLanguage","languageName","prev","Provider","value"],"sources":["/Users/gio/development/smartterapist/client/src/context/LanguageContext.js"],"sourcesContent":["/**\n * Language Context\n * \n * This context provides language selection and switching functionality\n * for the multi-lingual support throughout the application.\n */\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { supabase } from '../services/supabaseClient';\n\nexport const LanguageContext = createContext();\n\nexport const LanguageProvider = ({ children }) => {\n  const { i18n } = useTranslation();\n  const [currentLanguage, setCurrentLanguage] = useState('en');\n  const [availableLanguages, setAvailableLanguages] = useState([\n    { code: 'en', name: 'English' },\n    { code: 'es', name: 'Español' }\n  ]);\n\n  // Initialize language from user preferences or localStorage\n  useEffect(() => {\n    const initializeLanguage = async () => {\n      try {\n        // Try to get language from Supabase if user is logged in\n        const { data: { session } } = await supabase.auth.getSession();\n        \n        if (session?.user?.id) {\n          const { data: userData } = await supabase\n            .from('users')\n            .select('profile_data')\n            .eq('id', session.user.id)\n            .single();\n          \n          const preferredLanguage = userData?.profile_data?.language;\n          \n          if (preferredLanguage && availableLanguages.some(lang => lang.code === preferredLanguage)) {\n            setCurrentLanguage(preferredLanguage);\n            i18n.changeLanguage(preferredLanguage);\n            return;\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user language preference:', error);\n      }\n      \n      // Fall back to localStorage or browser language\n      const savedLanguage = localStorage.getItem('language');\n      \n      if (savedLanguage && availableLanguages.some(lang => lang.code === savedLanguage)) {\n        setCurrentLanguage(savedLanguage);\n        i18n.changeLanguage(savedLanguage);\n      } else {\n        // Detect browser language\n        const browserLang = navigator.language.split('-')[0];\n        const supportedLang = availableLanguages.some(lang => lang.code === browserLang) \n          ? browserLang \n          : 'en';\n        \n        setCurrentLanguage(supportedLang);\n        i18n.changeLanguage(supportedLang);\n        localStorage.setItem('language', supportedLang);\n      }\n    };\n    \n    initializeLanguage();\n  }, [i18n]);\n\n  // Change language function\n  const changeLanguage = async (languageCode) => {\n    if (!availableLanguages.some(lang => lang.code === languageCode)) {\n      console.error(`Language ${languageCode} is not supported`);\n      return;\n    }\n    \n    try {\n      console.log(`LanguageContext: Changing language to ${languageCode}`);\n      \n      // Update state first\n      setCurrentLanguage(languageCode);\n      \n      // Save to localStorage\n      localStorage.setItem('language', languageCode);\n      \n      // Update i18n - this triggers the translation reload\n      await i18n.changeLanguage(languageCode);\n      console.log(`Language changed to ${languageCode}, i18n.language is now: ${i18n.language}`);\n      \n      // Force reload resources to ensure translations are applied\n      if (i18n.services.resourceStore) {\n        console.log('Reloading translation resources...');\n        // This will trigger a reload of translations from Supabase\n        await i18n.reloadResources(languageCode, 'translation');\n      }\n      \n      // If user is logged in, save preference to Supabase\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (session?.user?.id) {\n        const { data: userData } = await supabase\n          .from('users')\n          .select('profile_data')\n          .eq('id', session.user.id)\n          .single();\n        \n        const updatedProfileData = {\n          ...userData?.profile_data,\n          language: languageCode\n        };\n        \n        await supabase\n          .from('users')\n          .update({ profile_data: updatedProfileData })\n          .eq('id', session.user.id);\n      }\n    } catch (error) {\n      console.error('Error changing language:', error);\n    }\n  };\n\n  // Add new language\n  const addLanguage = (languageCode, languageName) => {\n    if (availableLanguages.some(lang => lang.code === languageCode)) {\n      console.error(`Language ${languageCode} already exists`);\n      return;\n    }\n    \n    setAvailableLanguages(prev => [\n      ...prev,\n      { code: languageCode, name: languageName }\n    ]);\n  };\n\n  return (\n    <LanguageContext.Provider\n      value={{\n        currentLanguage,\n        availableLanguages,\n        changeLanguage,\n        addLanguage\n      }}\n    >\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport default LanguageContext;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GAEA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CACjE,OAASC,cAAc,KAAQ,eAAe,CAC9C,OAASC,QAAQ,KAAQ,4BAA4B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEtD,MAAO,MAAM,CAAAC,eAAe,cAAGP,aAAa,CAAC,CAAC,CAE9C,MAAO,MAAM,CAAAQ,gBAAgB,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3C,KAAM,CAAEE,IAAK,CAAC,CAAGR,cAAc,CAAC,CAAC,CACjC,KAAM,CAACS,eAAe,CAAEC,kBAAkB,CAAC,CAAGZ,QAAQ,CAAC,IAAI,CAAC,CAC5D,KAAM,CAACa,kBAAkB,CAAEC,qBAAqB,CAAC,CAAGd,QAAQ,CAAC,CAC3D,CAAEe,IAAI,CAAE,IAAI,CAAEC,IAAI,CAAE,SAAU,CAAC,CAC/B,CAAED,IAAI,CAAE,IAAI,CAAEC,IAAI,CAAE,SAAU,CAAC,CAChC,CAAC,CAEF;AACAf,SAAS,CAAC,IAAM,CACd,KAAM,CAAAgB,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,GAAI,KAAAC,aAAA,CACF;AACA,KAAM,CAAEC,IAAI,CAAE,CAAEC,OAAQ,CAAE,CAAC,CAAG,KAAM,CAAAjB,QAAQ,CAACkB,IAAI,CAACC,UAAU,CAAC,CAAC,CAE9D,GAAIF,OAAO,SAAPA,OAAO,YAAAF,aAAA,CAAPE,OAAO,CAAEG,IAAI,UAAAL,aAAA,WAAbA,aAAA,CAAeM,EAAE,CAAE,KAAAC,qBAAA,CACrB,KAAM,CAAEN,IAAI,CAAEO,QAAS,CAAC,CAAG,KAAM,CAAAvB,QAAQ,CACtCwB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,cAAc,CAAC,CACtBC,EAAE,CAAC,IAAI,CAAET,OAAO,CAACG,IAAI,CAACC,EAAE,CAAC,CACzBM,MAAM,CAAC,CAAC,CAEX,KAAM,CAAAC,iBAAiB,CAAGL,QAAQ,SAARA,QAAQ,kBAAAD,qBAAA,CAARC,QAAQ,CAAEM,YAAY,UAAAP,qBAAA,iBAAtBA,qBAAA,CAAwBQ,QAAQ,CAE1D,GAAIF,iBAAiB,EAAIlB,kBAAkB,CAACqB,IAAI,CAACC,IAAI,EAAIA,IAAI,CAACpB,IAAI,GAAKgB,iBAAiB,CAAC,CAAE,CACzFnB,kBAAkB,CAACmB,iBAAiB,CAAC,CACrCrB,IAAI,CAAC0B,cAAc,CAACL,iBAAiB,CAAC,CACtC,OACF,CACF,CACF,CAAE,MAAOM,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0CAA0C,CAAEA,KAAK,CAAC,CAClE,CAEA;AACA,KAAM,CAAAE,aAAa,CAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAEtD,GAAIF,aAAa,EAAI1B,kBAAkB,CAACqB,IAAI,CAACC,IAAI,EAAIA,IAAI,CAACpB,IAAI,GAAKwB,aAAa,CAAC,CAAE,CACjF3B,kBAAkB,CAAC2B,aAAa,CAAC,CACjC7B,IAAI,CAAC0B,cAAc,CAACG,aAAa,CAAC,CACpC,CAAC,IAAM,CACL;AACA,KAAM,CAAAG,WAAW,CAAGC,SAAS,CAACV,QAAQ,CAACW,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACpD,KAAM,CAAAC,aAAa,CAAGhC,kBAAkB,CAACqB,IAAI,CAACC,IAAI,EAAIA,IAAI,CAACpB,IAAI,GAAK2B,WAAW,CAAC,CAC5EA,WAAW,CACX,IAAI,CAER9B,kBAAkB,CAACiC,aAAa,CAAC,CACjCnC,IAAI,CAAC0B,cAAc,CAACS,aAAa,CAAC,CAClCL,YAAY,CAACM,OAAO,CAAC,UAAU,CAAED,aAAa,CAAC,CACjD,CACF,CAAC,CAED5B,kBAAkB,CAAC,CAAC,CACtB,CAAC,CAAE,CAACP,IAAI,CAAC,CAAC,CAEV;AACA,KAAM,CAAA0B,cAAc,CAAG,KAAO,CAAAW,YAAY,EAAK,CAC7C,GAAI,CAAClC,kBAAkB,CAACqB,IAAI,CAACC,IAAI,EAAIA,IAAI,CAACpB,IAAI,GAAKgC,YAAY,CAAC,CAAE,CAChET,OAAO,CAACD,KAAK,CAAC,YAAYU,YAAY,mBAAmB,CAAC,CAC1D,OACF,CAEA,GAAI,KAAAC,cAAA,CACFV,OAAO,CAACW,GAAG,CAAC,yCAAyCF,YAAY,EAAE,CAAC,CAEpE;AACAnC,kBAAkB,CAACmC,YAAY,CAAC,CAEhC;AACAP,YAAY,CAACM,OAAO,CAAC,UAAU,CAAEC,YAAY,CAAC,CAE9C;AACA,KAAM,CAAArC,IAAI,CAAC0B,cAAc,CAACW,YAAY,CAAC,CACvCT,OAAO,CAACW,GAAG,CAAC,uBAAuBF,YAAY,2BAA2BrC,IAAI,CAACuB,QAAQ,EAAE,CAAC,CAE1F;AACA,GAAIvB,IAAI,CAACwC,QAAQ,CAACC,aAAa,CAAE,CAC/Bb,OAAO,CAACW,GAAG,CAAC,oCAAoC,CAAC,CACjD;AACA,KAAM,CAAAvC,IAAI,CAAC0C,eAAe,CAACL,YAAY,CAAE,aAAa,CAAC,CACzD,CAEA;AACA,KAAM,CAAE5B,IAAI,CAAE,CAAEC,OAAQ,CAAE,CAAC,CAAG,KAAM,CAAAjB,QAAQ,CAACkB,IAAI,CAACC,UAAU,CAAC,CAAC,CAE9D,GAAIF,OAAO,SAAPA,OAAO,YAAA4B,cAAA,CAAP5B,OAAO,CAAEG,IAAI,UAAAyB,cAAA,WAAbA,cAAA,CAAexB,EAAE,CAAE,CACrB,KAAM,CAAEL,IAAI,CAAEO,QAAS,CAAC,CAAG,KAAM,CAAAvB,QAAQ,CACtCwB,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC,cAAc,CAAC,CACtBC,EAAE,CAAC,IAAI,CAAET,OAAO,CAACG,IAAI,CAACC,EAAE,CAAC,CACzBM,MAAM,CAAC,CAAC,CAEX,KAAM,CAAAuB,kBAAkB,CAAG,CACzB,IAAG3B,QAAQ,SAARA,QAAQ,iBAARA,QAAQ,CAAEM,YAAY,EACzBC,QAAQ,CAAEc,YACZ,CAAC,CAED,KAAM,CAAA5C,QAAQ,CACXwB,IAAI,CAAC,OAAO,CAAC,CACb2B,MAAM,CAAC,CAAEtB,YAAY,CAAEqB,kBAAmB,CAAC,CAAC,CAC5CxB,EAAE,CAAC,IAAI,CAAET,OAAO,CAACG,IAAI,CAACC,EAAE,CAAC,CAC9B,CACF,CAAE,MAAOa,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAClD,CACF,CAAC,CAED;AACA,KAAM,CAAAkB,WAAW,CAAGA,CAACR,YAAY,CAAES,YAAY,GAAK,CAClD,GAAI3C,kBAAkB,CAACqB,IAAI,CAACC,IAAI,EAAIA,IAAI,CAACpB,IAAI,GAAKgC,YAAY,CAAC,CAAE,CAC/DT,OAAO,CAACD,KAAK,CAAC,YAAYU,YAAY,iBAAiB,CAAC,CACxD,OACF,CAEAjC,qBAAqB,CAAC2C,IAAI,EAAI,CAC5B,GAAGA,IAAI,CACP,CAAE1C,IAAI,CAAEgC,YAAY,CAAE/B,IAAI,CAAEwC,YAAa,CAAC,CAC3C,CAAC,CACJ,CAAC,CAED,mBACEnD,IAAA,CAACC,eAAe,CAACoD,QAAQ,EACvBC,KAAK,CAAE,CACLhD,eAAe,CACfE,kBAAkB,CAClBuB,cAAc,CACdmB,WACF,CAAE,CAAA9C,QAAA,CAEDA,QAAQ,CACe,CAAC,CAE/B,CAAC,CAED,cAAe,CAAAH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}