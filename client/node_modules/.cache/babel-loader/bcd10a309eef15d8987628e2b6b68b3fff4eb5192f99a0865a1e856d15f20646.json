{"ast":null,"code":"var _jsxFileName = \"/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/pages/client/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { chatService } from '../../services/chatService';\nimport { voiceService } from '../../services/voiceService';\nimport { useTranslation } from 'react-i18next';\nimport VoiceSettings from '../../components/VoiceSettings';\nimport { PaperAirplaneIcon, MicrophoneIcon, XCircleIcon, SpeakerWaveIcon, SpeakerXMarkIcon, Cog6ToothIcon } from '@heroicons/react/24/solid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [currentConversationId, setCurrentConversationId] = useState(null);\n  const [audioStream, setAudioStream] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const {\n    user\n  } = useAuth();\n\n  // Scroll to bottom of messages\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: 'smooth'\n    });\n  };\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  // Initialize or load existing conversation\n  useEffect(() => {\n    const initializeConversation = async () => {\n      try {\n        // Check if there's a stored conversation ID\n        const storedConversationId = localStorage.getItem('currentConversationId');\n        if (storedConversationId) {\n          setCurrentConversationId(storedConversationId);\n\n          // Load messages for this conversation\n          const messages = await chatService.getConversationHistory(storedConversationId);\n          setMessages(messages);\n        } else {\n          var _user$profile_data;\n          // Create a new conversation\n          const newConversationId = await chatService.createConversation(user.id);\n          setCurrentConversationId(newConversationId);\n          localStorage.setItem('currentConversationId', newConversationId);\n\n          // Add a welcome message\n          const welcomeMessage = {\n            id: `welcome-${Date.now()}`,\n            conversation_id: newConversationId,\n            sender: 'ai',\n            text: `Hello ${((_user$profile_data = user.profile_data) === null || _user$profile_data === void 0 ? void 0 : _user$profile_data.name) || 'there'}! How can I help you today?`,\n            timestamp: new Date().toISOString(),\n            sentiment_score: 0.8\n          };\n          await chatService.saveMessage(welcomeMessage);\n          setMessages([welcomeMessage]);\n        }\n      } catch (error) {\n        console.error('Error initializing conversation:', error);\n        // Show error in UI\n        setMessages([{\n          id: `error-${Date.now()}`,\n          sender: 'system',\n          text: 'Sorry, there was an error starting the conversation. Please try refreshing the page.',\n          timestamp: new Date().toISOString()\n        }]);\n      }\n    };\n    if (user) {\n      initializeConversation();\n    }\n\n    // Cleanup function to end conversation when component unmounts\n    return () => {\n      if (currentConversationId) {\n        chatService.endConversation(currentConversationId).catch(err => console.error('Error ending conversation:', err));\n      }\n    };\n  }, [user]);\n\n  // Focus on input when messages change\n  useEffect(() => {\n    if (!isRecording && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages, isRecording]);\n\n  // Handle text message submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!inputMessage.trim() || !currentConversationId) return;\n    const userMessage = {\n      conversation_id: currentConversationId,\n      sender: 'user',\n      text: inputMessage,\n      timestamp: new Date().toISOString()\n    };\n\n    // Update UI immediately\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsProcessing(true);\n    try {\n      // Save message to database\n      await chatService.saveMessage(userMessage);\n\n      // Show typing indicator\n      setIsTyping(true);\n\n      // Get AI response\n      const aiResponse = await chatService.getAIResponse(userMessage.text, currentConversationId, user.id);\n\n      // Hide typing indicator\n      setIsTyping(false);\n\n      // Create AI message\n      const aiMessage = {\n        conversation_id: currentConversationId,\n        sender: 'ai',\n        text: aiResponse.message,\n        timestamp: new Date().toISOString(),\n        sentiment_score: aiResponse.sentiment_score\n      };\n\n      // Save AI response to database\n      await chatService.saveMessage(aiMessage);\n\n      // Update UI\n      setMessages(prev => [...prev, aiMessage]);\n\n      // If this is the 5th message in the conversation, generate a summary\n      if (messages.length >= 4) {\n        chatService.generateSummary(currentConversationId).catch(err => console.error('Error generating summary:', err));\n      }\n    } catch (error) {\n      console.error('Error processing message:', error);\n      setIsTyping(false);\n\n      // Show error in UI\n      setMessages(prev => [...prev, {\n        id: `error-${Date.now()}`,\n        sender: 'system',\n        text: 'Sorry, there was an error processing your message. Please try again.',\n        timestamp: new Date().toISOString()\n      }]);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  // State for voice settings\n  const [voiceSettings, setVoiceSettings] = useState({\n    enabled: true,\n    preferredVoice: 'en-US-Neural2-F',\n    speed: 1.0,\n    pitch: 1.0\n  });\n\n  // State for TTS playback\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [audioQueue, setAudioQueue] = useState([]);\n\n  // State for voice settings modal\n  const [showVoiceSettings, setShowVoiceSettings] = useState(false);\n\n  // Toggle text-to-speech\n  const toggleVoiceEnabled = async () => {\n    const newSettings = {\n      ...voiceSettings,\n      enabled: !voiceSettings.enabled\n    };\n    setVoiceSettings(newSettings);\n    if (user !== null && user !== void 0 && user.id) {\n      await voiceService.updateUserVoiceSettings(user.id, newSettings);\n    }\n  };\n\n  // Open voice settings modal\n  const openVoiceSettings = () => {\n    setShowVoiceSettings(true);\n  };\n\n  // Handle voice settings save\n  const handleSaveVoiceSettings = newSettings => {\n    setVoiceSettings(newSettings);\n  };\n\n  // Play message using TTS\n  const playMessage = async message => {\n    if (!voiceSettings.enabled || isSpeaking) return;\n    try {\n      setIsSpeaking(true);\n\n      // Get current language for TTS\n      const language = i18n.language || 'en';\n      const ttsVoice = language === 'en' ? 'en-US-Neural2-F' : language === 'es' ? 'es-ES-Neural2-F' : voiceSettings.preferredVoice;\n\n      // Convert text to speech\n      const audioBlob = await voiceService.textToSpeech(message.text, {\n        voice: ttsVoice,\n        speed: voiceSettings.speed,\n        pitch: voiceSettings.pitch\n      });\n\n      // Play the audio\n      await voiceService.playAudio(audioBlob);\n    } catch (error) {\n      console.error('Error playing TTS:', error);\n    } finally {\n      setIsSpeaking(false);\n    }\n  };\n\n  // Play AI responses automatically if TTS is enabled\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage && lastMessage.sender === 'ai' && voiceSettings.enabled && !isSpeaking) {\n      playMessage(lastMessage);\n    }\n  }, [messages]);\n\n  // Get translation function\n  const {\n    t,\n    i18n\n  } = useTranslation();\n\n  // Load user voice settings\n  useEffect(() => {\n    const loadVoiceSettings = async () => {\n      if (user !== null && user !== void 0 && user.id) {\n        try {\n          const settings = await voiceService.getUserVoiceSettings(user.id);\n          setVoiceSettings(settings);\n        } catch (error) {\n          console.error('Error loading voice settings:', error);\n        }\n      }\n    };\n    loadVoiceSettings();\n  }, [user]);\n\n  // Handle voice recording\n  const toggleRecording = async () => {\n    if (isRecording) {\n      // Stop recording\n      if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n        mediaRecorder.stop();\n      }\n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n        setAudioStream(null);\n      }\n      setIsRecording(false);\n    } else {\n      try {\n        // Start recording\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n        setAudioStream(stream);\n        const recorder = new MediaRecorder(stream);\n        setMediaRecorder(recorder);\n        const chunks = [];\n        setRecordedChunks(chunks);\n        recorder.ondataavailable = e => {\n          if (e.data.size > 0) {\n            chunks.push(e.data);\n          }\n        };\n        recorder.onstop = async () => {\n          try {\n            setIsProcessing(true);\n\n            // Create audio blob from recorded chunks\n            const audioBlob = new Blob(chunks, {\n              type: 'audio/webm'\n            });\n\n            // Get current language for STT\n            const language = i18n.language || 'en';\n            const sttLanguage = language === 'en' ? 'en-US' : language === 'es' ? 'es-ES' : 'en-US';\n\n            // Convert speech to text using ultravox.ai\n            const transcribedText = await voiceService.speechToText(audioBlob, sttLanguage);\n            if (transcribedText) {\n              setInputMessage(transcribedText);\n            }\n          } catch (error) {\n            console.error('Error processing speech to text:', error);\n            setMessages(prev => [...prev, {\n              id: `error-${Date.now()}`,\n              sender: 'system',\n              text: t('chat.speechToTextError'),\n              timestamp: new Date().toISOString()\n            }]);\n          } finally {\n            setIsProcessing(false);\n          }\n        };\n        recorder.start();\n        setIsRecording(true);\n      } catch (error) {\n        console.error('Error accessing microphone:', error);\n        // Show error in UI\n        setMessages(prev => [...prev, {\n          id: `error-${Date.now()}`,\n          sender: 'system',\n          text: t('chat.microphoneError'),\n          timestamp: new Date().toISOString()\n        }]);\n      }\n    }\n  };\n\n  // Start a new conversation\n  const startNewConversation = async () => {\n    try {\n      var _user$profile_data2;\n      // End current conversation if exists\n      if (currentConversationId) {\n        await chatService.endConversation(currentConversationId);\n      }\n\n      // Create a new conversation\n      const newConversationId = await chatService.createConversation(user.id);\n      setCurrentConversationId(newConversationId);\n      localStorage.setItem('currentConversationId', newConversationId);\n\n      // Add a welcome message\n      const welcomeMessage = {\n        id: `welcome-${Date.now()}`,\n        conversation_id: newConversationId,\n        sender: 'ai',\n        text: `Hello ${((_user$profile_data2 = user.profile_data) === null || _user$profile_data2 === void 0 ? void 0 : _user$profile_data2.name) || 'there'}! How can I help you today?`,\n        timestamp: new Date().toISOString(),\n        sentiment_score: 0.8\n      };\n      await chatService.saveMessage(welcomeMessage);\n      setMessages([welcomeMessage]);\n    } catch (error) {\n      console.error('Error starting new conversation:', error);\n      // Show error in UI\n      setMessages([{\n        id: `error-${Date.now()}`,\n        sender: 'system',\n        text: 'Sorry, there was an error starting a new conversation. Please try refreshing the page.',\n        timestamp: new Date().toISOString()\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-[calc(100vh-12rem)]\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white border-b p-4 flex justify-between items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-lg font-semibold text-secondary-900\",\n        children: \"AI Therapy Session\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startNewConversation,\n        className: \"text-sm px-3 py-1 bg-primary-100 text-primary-700 rounded-md hover:bg-primary-200 transition-colors\",\n        children: \"New Conversation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50\",\n      children: [messages.map((message, index) => {\n        var _user$profile_data3, _user$profile_data3$n;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`,\n          children: [message.sender !== 'user' && message.sender !== 'system' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"h-8 w-8 rounded-full bg-primary-500 flex items-center justify-center text-white mr-2\",\n            children: \"AI\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `max-w-[70%] rounded-lg p-3 shadow-sm ${message.sender === 'user' ? 'bg-primary-500 text-white' : message.sender === 'system' ? 'bg-red-100 text-red-900' : 'bg-white text-secondary-900'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"text-sm whitespace-pre-wrap\",\n              children: message.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `text-xs ${message.sender === 'user' ? 'text-primary-100' : 'text-secondary-500'} mt-1 block`,\n              children: new Date(message.timestamp).toLocaleTimeString([], {\n                hour: '2-digit',\n                minute: '2-digit'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 13\n          }, this), message.sender === 'user' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"h-8 w-8 rounded-full bg-secondary-200 flex items-center justify-center text-secondary-600 ml-2\",\n            children: ((_user$profile_data3 = user.profile_data) === null || _user$profile_data3 === void 0 ? void 0 : (_user$profile_data3$n = _user$profile_data3.name) === null || _user$profile_data3$n === void 0 ? void 0 : _user$profile_data3$n.charAt(0)) || 'U'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 15\n          }, this)]\n        }, message.id || index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this);\n      }), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-start\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"h-8 w-8 rounded-full bg-primary-500 flex items-center justify-center text-white mr-2\",\n          children: \"AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white rounded-lg p-4 shadow-sm\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex space-x-1\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"h-2 w-2 bg-primary-500 rounded-full animate-bounce\",\n              style: {\n                animationDelay: '0ms'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"h-2 w-2 bg-primary-500 rounded-full animate-bounce\",\n              style: {\n                animationDelay: '150ms'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"h-2 w-2 bg-primary-500 rounded-full animate-bounce\",\n              style: {\n                animationDelay: '300ms'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 424,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border-t p-4 bg-white\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"flex space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: inputRef,\n          type: \"text\",\n          value: inputMessage,\n          onChange: e => setInputMessage(e.target.value),\n          disabled: isProcessing || isRecording,\n          placeholder: isRecording ? \"Recording...\" : \"Type your message...\",\n          className: \"flex-1 rounded-lg border border-secondary-300 p-3 focus:outline-none focus:ring-2 focus:ring-primary-500\",\n          onKeyDown: e => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n              e.preventDefault();\n              handleSubmit(e);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 436,\n          columnNumber: 11\n        }, this), isRecording ? /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: toggleRecording,\n          className: \"p-3 rounded-lg bg-red-500 text-white hover:bg-red-600 transition-colors\",\n          title: t('chat.stopRecording'),\n          children: /*#__PURE__*/_jsxDEV(XCircleIcon, {\n            className: \"h-6 w-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: toggleRecording,\n          disabled: isProcessing,\n          className: \"p-3 rounded-lg bg-secondary-100 text-secondary-600 hover:bg-secondary-200 transition-colors disabled:opacity-50\",\n          title: t('chat.startRecording'),\n          children: /*#__PURE__*/_jsxDEV(MicrophoneIcon, {\n            className: \"h-6 w-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: toggleVoiceEnabled,\n          className: `p-3 rounded-lg transition-colors ${voiceSettings.enabled ? 'bg-blue-100 text-blue-600 hover:bg-blue-200' : 'bg-gray-100 text-gray-600 hover:bg-gray-200'}`,\n          title: voiceSettings.enabled ? t('chat.disableVoice') : t('chat.enableVoice'),\n          children: voiceSettings.enabled ? /*#__PURE__*/_jsxDEV(SpeakerWaveIcon, {\n            className: \"h-6 w-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(SpeakerXMarkIcon, {\n            className: \"h-6 w-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: openVoiceSettings,\n          className: \"p-3 rounded-lg bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors\",\n          title: t('chat.voiceSettings'),\n          children: /*#__PURE__*/_jsxDEV(Cog6ToothIcon, {\n            className: \"h-6 w-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 487,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          disabled: !inputMessage.trim() || isProcessing || isRecording,\n          className: \"p-3 rounded-lg bg-primary-500 text-white hover:bg-primary-600 transition-colors disabled:opacity-50\",\n          children: /*#__PURE__*/_jsxDEV(PaperAirplaneIcon, {\n            className: \"h-6 w-6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 7\n    }, this), showVoiceSettings && /*#__PURE__*/_jsxDEV(VoiceSettings, {\n      initialSettings: voiceSettings,\n      onClose: () => setShowVoiceSettings(false),\n      onSave: handleSaveVoiceSettings\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 368,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"/EHJnU6N2nK3mMqaORjzMp2trZE=\", false, function () {\n  return [useAuth, useTranslation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useAuth","chatService","voiceService","useTranslation","VoiceSettings","PaperAirplaneIcon","MicrophoneIcon","XCircleIcon","SpeakerWaveIcon","SpeakerXMarkIcon","Cog6ToothIcon","jsxDEV","_jsxDEV","Chat","_s","messages","setMessages","inputMessage","setInputMessage","isRecording","setIsRecording","isProcessing","setIsProcessing","currentConversationId","setCurrentConversationId","audioStream","setAudioStream","mediaRecorder","setMediaRecorder","recordedChunks","setRecordedChunks","isTyping","setIsTyping","messagesEndRef","inputRef","user","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","initializeConversation","storedConversationId","localStorage","getItem","getConversationHistory","_user$profile_data","newConversationId","createConversation","id","setItem","welcomeMessage","Date","now","conversation_id","sender","text","profile_data","name","timestamp","toISOString","sentiment_score","saveMessage","error","console","endConversation","catch","err","focus","handleSubmit","e","preventDefault","trim","userMessage","prev","aiResponse","getAIResponse","aiMessage","message","length","generateSummary","voiceSettings","setVoiceSettings","enabled","preferredVoice","speed","pitch","isSpeaking","setIsSpeaking","audioQueue","setAudioQueue","showVoiceSettings","setShowVoiceSettings","toggleVoiceEnabled","newSettings","updateUserVoiceSettings","openVoiceSettings","handleSaveVoiceSettings","playMessage","language","i18n","ttsVoice","audioBlob","textToSpeech","voice","playAudio","lastMessage","t","loadVoiceSettings","settings","getUserVoiceSettings","toggleRecording","state","stop","getTracks","forEach","track","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","chunks","ondataavailable","data","size","push","onstop","Blob","type","sttLanguage","transcribedText","speechToText","start","startNewConversation","_user$profile_data2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","index","_user$profile_data3","_user$profile_data3$n","toLocaleTimeString","hour","minute","charAt","style","animationDelay","ref","onSubmit","value","onChange","target","disabled","placeholder","onKeyDown","key","shiftKey","title","initialSettings","onClose","onSave","_c","$RefreshReg$"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/pages/client/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { chatService } from '../../services/chatService';\nimport { voiceService } from '../../services/voiceService';\nimport { useTranslation } from 'react-i18next';\nimport VoiceSettings from '../../components/VoiceSettings';\nimport { PaperAirplaneIcon, MicrophoneIcon, XCircleIcon, SpeakerWaveIcon, SpeakerXMarkIcon, Cog6ToothIcon } from '@heroicons/react/24/solid';\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [currentConversationId, setCurrentConversationId] = useState(null);\n  const [audioStream, setAudioStream] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const { user } = useAuth();\n  \n  // Scroll to bottom of messages\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n  \n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  \n  // Initialize or load existing conversation\n  useEffect(() => {\n    const initializeConversation = async () => {\n      try {\n        // Check if there's a stored conversation ID\n        const storedConversationId = localStorage.getItem('currentConversationId');\n        \n        if (storedConversationId) {\n          setCurrentConversationId(storedConversationId);\n          \n          // Load messages for this conversation\n          const messages = await chatService.getConversationHistory(storedConversationId);\n          setMessages(messages);\n        } else {\n          // Create a new conversation\n          const newConversationId = await chatService.createConversation(user.id);\n          setCurrentConversationId(newConversationId);\n          localStorage.setItem('currentConversationId', newConversationId);\n          \n          // Add a welcome message\n          const welcomeMessage = {\n            id: `welcome-${Date.now()}`,\n            conversation_id: newConversationId,\n            sender: 'ai',\n            text: `Hello ${user.profile_data?.name || 'there'}! How can I help you today?`,\n            timestamp: new Date().toISOString(),\n            sentiment_score: 0.8\n          };\n          \n          await chatService.saveMessage(welcomeMessage);\n          setMessages([welcomeMessage]);\n        }\n      } catch (error) {\n        console.error('Error initializing conversation:', error);\n        // Show error in UI\n        setMessages([{\n          id: `error-${Date.now()}`,\n          sender: 'system',\n          text: 'Sorry, there was an error starting the conversation. Please try refreshing the page.',\n          timestamp: new Date().toISOString(),\n        }]);\n      }\n    };\n    \n    if (user) {\n      initializeConversation();\n    }\n    \n    // Cleanup function to end conversation when component unmounts\n    return () => {\n      if (currentConversationId) {\n        chatService.endConversation(currentConversationId).catch(err => \n          console.error('Error ending conversation:', err)\n        );\n      }\n    };\n  }, [user]);\n  \n  // Focus on input when messages change\n  useEffect(() => {\n    if (!isRecording && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages, isRecording]);\n  \n  // Handle text message submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!inputMessage.trim() || !currentConversationId) return;\n    \n    const userMessage = {\n      conversation_id: currentConversationId,\n      sender: 'user',\n      text: inputMessage,\n      timestamp: new Date().toISOString(),\n    };\n    \n    // Update UI immediately\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsProcessing(true);\n    \n    try {\n      // Save message to database\n      await chatService.saveMessage(userMessage);\n      \n      // Show typing indicator\n      setIsTyping(true);\n      \n      // Get AI response\n      const aiResponse = await chatService.getAIResponse(userMessage.text, currentConversationId, user.id);\n      \n      // Hide typing indicator\n      setIsTyping(false);\n      \n      // Create AI message\n      const aiMessage = {\n        conversation_id: currentConversationId,\n        sender: 'ai',\n        text: aiResponse.message,\n        timestamp: new Date().toISOString(),\n        sentiment_score: aiResponse.sentiment_score\n      };\n      \n      // Save AI response to database\n      await chatService.saveMessage(aiMessage);\n      \n      // Update UI\n      setMessages(prev => [...prev, aiMessage]);\n      \n      // If this is the 5th message in the conversation, generate a summary\n      if (messages.length >= 4) {\n        chatService.generateSummary(currentConversationId).catch(err => \n          console.error('Error generating summary:', err)\n        );\n      }\n    } catch (error) {\n      console.error('Error processing message:', error);\n      setIsTyping(false);\n      \n      // Show error in UI\n      setMessages(prev => [...prev, {\n        id: `error-${Date.now()}`,\n        sender: 'system',\n        text: 'Sorry, there was an error processing your message. Please try again.',\n        timestamp: new Date().toISOString(),\n      }]);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  \n  // State for voice settings\n  const [voiceSettings, setVoiceSettings] = useState({\n    enabled: true,\n    preferredVoice: 'en-US-Neural2-F',\n    speed: 1.0,\n    pitch: 1.0\n  });\n  \n  // State for TTS playback\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [audioQueue, setAudioQueue] = useState([]);\n  \n  // State for voice settings modal\n  const [showVoiceSettings, setShowVoiceSettings] = useState(false);\n  \n  // Toggle text-to-speech\n  const toggleVoiceEnabled = async () => {\n    const newSettings = { ...voiceSettings, enabled: !voiceSettings.enabled };\n    setVoiceSettings(newSettings);\n    \n    if (user?.id) {\n      await voiceService.updateUserVoiceSettings(user.id, newSettings);\n    }\n  };\n  \n  // Open voice settings modal\n  const openVoiceSettings = () => {\n    setShowVoiceSettings(true);\n  };\n  \n  // Handle voice settings save\n  const handleSaveVoiceSettings = (newSettings) => {\n    setVoiceSettings(newSettings);\n  };\n  \n  // Play message using TTS\n  const playMessage = async (message) => {\n    if (!voiceSettings.enabled || isSpeaking) return;\n    \n    try {\n      setIsSpeaking(true);\n      \n      // Get current language for TTS\n      const language = i18n.language || 'en';\n      const ttsVoice = language === 'en' ? 'en-US-Neural2-F' : language === 'es' ? 'es-ES-Neural2-F' : voiceSettings.preferredVoice;\n      \n      // Convert text to speech\n      const audioBlob = await voiceService.textToSpeech(message.text, {\n        voice: ttsVoice,\n        speed: voiceSettings.speed,\n        pitch: voiceSettings.pitch\n      });\n      \n      // Play the audio\n      await voiceService.playAudio(audioBlob);\n    } catch (error) {\n      console.error('Error playing TTS:', error);\n    } finally {\n      setIsSpeaking(false);\n    }\n  };\n  \n  // Play AI responses automatically if TTS is enabled\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage && lastMessage.sender === 'ai' && voiceSettings.enabled && !isSpeaking) {\n      playMessage(lastMessage);\n    }\n  }, [messages]);\n  \n  // Get translation function\n  const { t, i18n } = useTranslation();\n  \n  // Load user voice settings\n  useEffect(() => {\n    const loadVoiceSettings = async () => {\n      if (user?.id) {\n        try {\n          const settings = await voiceService.getUserVoiceSettings(user.id);\n          setVoiceSettings(settings);\n        } catch (error) {\n          console.error('Error loading voice settings:', error);\n        }\n      }\n    };\n    \n    loadVoiceSettings();\n  }, [user]);\n  \n  // Handle voice recording\n  const toggleRecording = async () => {\n    if (isRecording) {\n      // Stop recording\n      if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n        mediaRecorder.stop();\n      }\n      \n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n        setAudioStream(null);\n      }\n      \n      setIsRecording(false);\n    } else {\n      try {\n        // Start recording\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        setAudioStream(stream);\n        \n        const recorder = new MediaRecorder(stream);\n        setMediaRecorder(recorder);\n        \n        const chunks = [];\n        setRecordedChunks(chunks);\n        \n        recorder.ondataavailable = (e) => {\n          if (e.data.size > 0) {\n            chunks.push(e.data);\n          }\n        };\n        \n        recorder.onstop = async () => {\n          try {\n            setIsProcessing(true);\n            \n            // Create audio blob from recorded chunks\n            const audioBlob = new Blob(chunks, { type: 'audio/webm' });\n            \n            // Get current language for STT\n            const language = i18n.language || 'en';\n            const sttLanguage = language === 'en' ? 'en-US' : language === 'es' ? 'es-ES' : 'en-US';\n            \n            // Convert speech to text using ultravox.ai\n            const transcribedText = await voiceService.speechToText(audioBlob, sttLanguage);\n            \n            if (transcribedText) {\n              setInputMessage(transcribedText);\n            }\n          } catch (error) {\n            console.error('Error processing speech to text:', error);\n            setMessages(prev => [...prev, {\n              id: `error-${Date.now()}`,\n              sender: 'system',\n              text: t('chat.speechToTextError'),\n              timestamp: new Date().toISOString(),\n            }]);\n          } finally {\n            setIsProcessing(false);\n          }\n        };\n        \n        recorder.start();\n        setIsRecording(true);\n      } catch (error) {\n        console.error('Error accessing microphone:', error);\n        // Show error in UI\n        setMessages(prev => [...prev, {\n          id: `error-${Date.now()}`,\n          sender: 'system',\n          text: t('chat.microphoneError'),\n          timestamp: new Date().toISOString(),\n        }]);\n      }\n    }\n  };\n  \n  // Start a new conversation\n  const startNewConversation = async () => {\n    try {\n      // End current conversation if exists\n      if (currentConversationId) {\n        await chatService.endConversation(currentConversationId);\n      }\n      \n      // Create a new conversation\n      const newConversationId = await chatService.createConversation(user.id);\n      setCurrentConversationId(newConversationId);\n      localStorage.setItem('currentConversationId', newConversationId);\n      \n      // Add a welcome message\n      const welcomeMessage = {\n        id: `welcome-${Date.now()}`,\n        conversation_id: newConversationId,\n        sender: 'ai',\n        text: `Hello ${user.profile_data?.name || 'there'}! How can I help you today?`,\n        timestamp: new Date().toISOString(),\n        sentiment_score: 0.8\n      };\n      \n      await chatService.saveMessage(welcomeMessage);\n      setMessages([welcomeMessage]);\n    } catch (error) {\n      console.error('Error starting new conversation:', error);\n      // Show error in UI\n      setMessages([{\n        id: `error-${Date.now()}`,\n        sender: 'system',\n        text: 'Sorry, there was an error starting a new conversation. Please try refreshing the page.',\n        timestamp: new Date().toISOString(),\n      }]);\n    }\n  };\n  \n  return (\n    <div className=\"flex flex-col h-[calc(100vh-12rem)]\">\n      {/* Header */}\n      <div className=\"bg-white border-b p-4 flex justify-between items-center\">\n        <h2 className=\"text-lg font-semibold text-secondary-900\">AI Therapy Session</h2>\n        <button\n          onClick={startNewConversation}\n          className=\"text-sm px-3 py-1 bg-primary-100 text-primary-700 rounded-md hover:bg-primary-200 transition-colors\"\n        >\n          New Conversation\n        </button>\n      </div>\n      \n      {/* Messages area */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50\">\n        {messages.map((message, index) => (\n          <div\n            key={message.id || index}\n            className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n          >\n            {message.sender !== 'user' && message.sender !== 'system' && (\n              <div className=\"h-8 w-8 rounded-full bg-primary-500 flex items-center justify-center text-white mr-2\">\n                AI\n              </div>\n            )}\n            <div\n              className={`max-w-[70%] rounded-lg p-3 shadow-sm ${\n                message.sender === 'user'\n                  ? 'bg-primary-500 text-white'\n                  : message.sender === 'system'\n                  ? 'bg-red-100 text-red-900'\n                  : 'bg-white text-secondary-900'\n              }`}\n            >\n              <p className=\"text-sm whitespace-pre-wrap\">{message.text}</p>\n              <span className={`text-xs ${message.sender === 'user' ? 'text-primary-100' : 'text-secondary-500'} mt-1 block`}>\n                {new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n              </span>\n            </div>\n            {message.sender === 'user' && (\n              <div className=\"h-8 w-8 rounded-full bg-secondary-200 flex items-center justify-center text-secondary-600 ml-2\">\n                {user.profile_data?.name?.charAt(0) || 'U'}\n              </div>\n            )}\n          </div>\n        ))}\n        \n        {/* Typing indicator */}\n        {isTyping && (\n          <div className=\"flex justify-start\">\n            <div className=\"h-8 w-8 rounded-full bg-primary-500 flex items-center justify-center text-white mr-2\">\n              AI\n            </div>\n            <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n              <div className=\"flex space-x-1\">\n                <div className=\"h-2 w-2 bg-primary-500 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}></div>\n                <div className=\"h-2 w-2 bg-primary-500 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}></div>\n                <div className=\"h-2 w-2 bg-primary-500 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}></div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      {/* Input area */}\n      <div className=\"border-t p-4 bg-white\">\n        <form onSubmit={handleSubmit} className=\"flex space-x-2\">\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            disabled={isProcessing || isRecording}\n            placeholder={isRecording ? \"Recording...\" : \"Type your message...\"}\n            className=\"flex-1 rounded-lg border border-secondary-300 p-3 focus:outline-none focus:ring-2 focus:ring-primary-500\"\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                handleSubmit(e);\n              }\n            }}\n          />\n          {isRecording ? (\n            <button\n              type=\"button\"\n              onClick={toggleRecording}\n              className=\"p-3 rounded-lg bg-red-500 text-white hover:bg-red-600 transition-colors\"\n              title={t('chat.stopRecording')}\n            >\n              <XCircleIcon className=\"h-6 w-6\" />\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              onClick={toggleRecording}\n              disabled={isProcessing}\n              className=\"p-3 rounded-lg bg-secondary-100 text-secondary-600 hover:bg-secondary-200 transition-colors disabled:opacity-50\"\n              title={t('chat.startRecording')}\n            >\n              <MicrophoneIcon className=\"h-6 w-6\" />\n            </button>\n          )}\n          \n          {/* TTS toggle button */}\n          <button\n            type=\"button\"\n            onClick={toggleVoiceEnabled}\n            className={`p-3 rounded-lg transition-colors ${voiceSettings.enabled ? 'bg-blue-100 text-blue-600 hover:bg-blue-200' : 'bg-gray-100 text-gray-600 hover:bg-gray-200'}`}\n            title={voiceSettings.enabled ? t('chat.disableVoice') : t('chat.enableVoice')}\n          >\n            {voiceSettings.enabled ? (\n              <SpeakerWaveIcon className=\"h-6 w-6\" />\n            ) : (\n              <SpeakerXMarkIcon className=\"h-6 w-6\" />\n            )}\n          </button>\n          \n          {/* Voice settings button */}\n          <button\n            type=\"button\"\n            onClick={openVoiceSettings}\n            className=\"p-3 rounded-lg bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors\"\n            title={t('chat.voiceSettings')}\n          >\n            <Cog6ToothIcon className=\"h-6 w-6\" />\n          </button>\n          <button\n            type=\"submit\"\n            disabled={!inputMessage.trim() || isProcessing || isRecording}\n            className=\"p-3 rounded-lg bg-primary-500 text-white hover:bg-primary-600 transition-colors disabled:opacity-50\"\n          >\n            <PaperAirplaneIcon className=\"h-6 w-6\" />\n          </button>\n        </form>\n      </div>\n      \n      {/* Voice Settings Modal */}\n      {showVoiceSettings && (\n        <VoiceSettings\n          initialSettings={voiceSettings}\n          onClose={() => setShowVoiceSettings(false)}\n          onSave={handleSaveVoiceSettings}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}