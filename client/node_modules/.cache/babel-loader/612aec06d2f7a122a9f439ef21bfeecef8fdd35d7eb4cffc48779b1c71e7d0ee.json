{"ast":null,"code":"/**\n * Supabase Data Utilities\n * \n * This file provides utilities for fetching data from Supabase\n * to replace the hardcoded mock data in the application.\n */\n\nimport { supabase } from '../services/supabaseClient';\nimport { userService, clientService, behaviorService, sessionService, summaryService, statsService } from '../services/supabaseDataService';\n\n// Flag to determine if we're in development mode\nexport const DEV_MODE = process.env.NODE_ENV === 'development';\n\n// Function to get a user based on role\nexport const getUser = async (role = 'therapist') => {\n  try {\n    const users = await userService.getUsersByRole(role);\n    return users[0] || null;\n  } catch (error) {\n    console.error(`Error getting ${role} user:`, error);\n    return null;\n  }\n};\n\n// Function to initialize the application\nexport const initApp = async () => {\n  if (DEV_MODE) {\n    console.log('ðŸ”§ Development mode enabled - Using Supabase data');\n\n    // Store a default user in localStorage if not already present\n    if (!localStorage.getItem('smarttherapist_user')) {\n      const defaultUser = await getUser('therapist');\n      if (defaultUser) {\n        localStorage.setItem('smarttherapist_user', JSON.stringify(defaultUser));\n        console.log('Created default user (therapist) from Supabase');\n      } else {\n        console.error('Failed to get default user from Supabase');\n      }\n    }\n  }\n};\n\n// Data access functions\nexport const DATA = {\n  // Get clients data\n  getClients: async () => {\n    try {\n      return await clientService.getClients();\n    } catch (error) {\n      console.error('Error fetching clients:', error);\n      return [];\n    }\n  },\n  // Get behaviors data\n  getBehaviors: async () => {\n    try {\n      return await behaviorService.getBehaviors();\n    } catch (error) {\n      console.error('Error fetching behaviors:', error);\n      return [];\n    }\n  },\n  // Get sessions data\n  getSessions: async () => {\n    try {\n      return await sessionService.getSessions();\n    } catch (error) {\n      console.error('Error fetching sessions:', error);\n      return [];\n    }\n  },\n  // Get upcoming sessions\n  getUpcomingSessions: async () => {\n    try {\n      return await sessionService.getUpcomingSessions();\n    } catch (error) {\n      console.error('Error fetching upcoming sessions:', error);\n      return [];\n    }\n  },\n  // Get summaries data\n  getSummaries: async () => {\n    try {\n      return await summaryService.getSummaries();\n    } catch (error) {\n      console.error('Error fetching summaries:', error);\n      return [];\n    }\n  },\n  // Get recent summaries\n  getRecentSummaries: async (limit = 5) => {\n    try {\n      return await summaryService.getRecentSummaries(limit);\n    } catch (error) {\n      console.error('Error fetching recent summaries:', error);\n      return [];\n    }\n  },\n  // Get system stats\n  getStats: async () => {\n    try {\n      return await statsService.getSystemStats();\n    } catch (error) {\n      console.error('Error fetching system stats:', error);\n      return {\n        users: {\n          total: 0,\n          clients: 0,\n          therapists: 0,\n          admins: 0\n        },\n        behaviors: 0,\n        conversations: 0,\n        messages: 0\n      };\n    }\n  }\n};\nexport default {\n  DEV_MODE,\n  getUser,\n  initApp,\n  DATA\n};","map":{"version":3,"names":["supabase","userService","clientService","behaviorService","sessionService","summaryService","statsService","DEV_MODE","process","env","NODE_ENV","getUser","role","users","getUsersByRole","error","console","initApp","log","localStorage","getItem","defaultUser","setItem","JSON","stringify","DATA","getClients","getBehaviors","getSessions","getUpcomingSessions","getSummaries","getRecentSummaries","limit","getStats","getSystemStats","total","clients","therapists","admins","behaviors","conversations","messages"],"sources":["/Users/gio/development/smartterapist/client/src/utils/supabaseData.js"],"sourcesContent":["/**\n * Supabase Data Utilities\n * \n * This file provides utilities for fetching data from Supabase\n * to replace the hardcoded mock data in the application.\n */\n\nimport { supabase } from '../services/supabaseClient';\nimport { userService, clientService, behaviorService, sessionService, summaryService, statsService } from '../services/supabaseDataService';\n\n// Flag to determine if we're in development mode\nexport const DEV_MODE = process.env.NODE_ENV === 'development';\n\n// Function to get a user based on role\nexport const getUser = async (role = 'therapist') => {\n  try {\n    const users = await userService.getUsersByRole(role);\n    return users[0] || null;\n  } catch (error) {\n    console.error(`Error getting ${role} user:`, error);\n    return null;\n  }\n};\n\n// Function to initialize the application\nexport const initApp = async () => {\n  if (DEV_MODE) {\n    console.log('ðŸ”§ Development mode enabled - Using Supabase data');\n    \n    // Store a default user in localStorage if not already present\n    if (!localStorage.getItem('smarttherapist_user')) {\n      const defaultUser = await getUser('therapist');\n      \n      if (defaultUser) {\n        localStorage.setItem('smarttherapist_user', JSON.stringify(defaultUser));\n        console.log('Created default user (therapist) from Supabase');\n      } else {\n        console.error('Failed to get default user from Supabase');\n      }\n    }\n  }\n};\n\n// Data access functions\nexport const DATA = {\n  // Get clients data\n  getClients: async () => {\n    try {\n      return await clientService.getClients();\n    } catch (error) {\n      console.error('Error fetching clients:', error);\n      return [];\n    }\n  },\n  \n  // Get behaviors data\n  getBehaviors: async () => {\n    try {\n      return await behaviorService.getBehaviors();\n    } catch (error) {\n      console.error('Error fetching behaviors:', error);\n      return [];\n    }\n  },\n  \n  // Get sessions data\n  getSessions: async () => {\n    try {\n      return await sessionService.getSessions();\n    } catch (error) {\n      console.error('Error fetching sessions:', error);\n      return [];\n    }\n  },\n  \n  // Get upcoming sessions\n  getUpcomingSessions: async () => {\n    try {\n      return await sessionService.getUpcomingSessions();\n    } catch (error) {\n      console.error('Error fetching upcoming sessions:', error);\n      return [];\n    }\n  },\n  \n  // Get summaries data\n  getSummaries: async () => {\n    try {\n      return await summaryService.getSummaries();\n    } catch (error) {\n      console.error('Error fetching summaries:', error);\n      return [];\n    }\n  },\n  \n  // Get recent summaries\n  getRecentSummaries: async (limit = 5) => {\n    try {\n      return await summaryService.getRecentSummaries(limit);\n    } catch (error) {\n      console.error('Error fetching recent summaries:', error);\n      return [];\n    }\n  },\n  \n  // Get system stats\n  getStats: async () => {\n    try {\n      return await statsService.getSystemStats();\n    } catch (error) {\n      console.error('Error fetching system stats:', error);\n      return {\n        users: { total: 0, clients: 0, therapists: 0, admins: 0 },\n        behaviors: 0,\n        conversations: 0,\n        messages: 0\n      };\n    }\n  }\n};\n\nexport default {\n  DEV_MODE,\n  getUser,\n  initApp,\n  DATA\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,4BAA4B;AACrD,SAASC,WAAW,EAAEC,aAAa,EAAEC,eAAe,EAAEC,cAAc,EAAEC,cAAc,EAAEC,YAAY,QAAQ,iCAAiC;;AAE3I;AACA,OAAO,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa;;AAE9D;AACA,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,IAAI,GAAG,WAAW,KAAK;EACnD,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMZ,WAAW,CAACa,cAAc,CAACF,IAAI,CAAC;IACpD,OAAOC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI;EACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iBAAiBH,IAAI,QAAQ,EAAEG,KAAK,CAAC;IACnD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,OAAO,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAIV,QAAQ,EAAE;IACZS,OAAO,CAACE,GAAG,CAAC,mDAAmD,CAAC;;IAEhE;IACA,IAAI,CAACC,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC,EAAE;MAChD,MAAMC,WAAW,GAAG,MAAMV,OAAO,CAAC,WAAW,CAAC;MAE9C,IAAIU,WAAW,EAAE;QACfF,YAAY,CAACG,OAAO,CAAC,qBAAqB,EAAEC,IAAI,CAACC,SAAS,CAACH,WAAW,CAAC,CAAC;QACxEL,OAAO,CAACE,GAAG,CAAC,gDAAgD,CAAC;MAC/D,CAAC,MAAM;QACLF,OAAO,CAACD,KAAK,CAAC,0CAA0C,CAAC;MAC3D;IACF;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,IAAI,GAAG;EAClB;EACAC,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,IAAI;MACF,OAAO,MAAMxB,aAAa,CAACwB,UAAU,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOX,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAY,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,IAAI;MACF,OAAO,MAAMxB,eAAe,CAACwB,YAAY,CAAC,CAAC;IAC7C,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAa,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,OAAO,MAAMxB,cAAc,CAACwB,WAAW,CAAC,CAAC;IAC3C,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAc,mBAAmB,EAAE,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,OAAO,MAAMzB,cAAc,CAACyB,mBAAmB,CAAC,CAAC;IACnD,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAe,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,IAAI;MACF,OAAO,MAAMzB,cAAc,CAACyB,YAAY,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAgB,kBAAkB,EAAE,MAAAA,CAAOC,KAAK,GAAG,CAAC,KAAK;IACvC,IAAI;MACF,OAAO,MAAM3B,cAAc,CAAC0B,kBAAkB,CAACC,KAAK,CAAC;IACvD,CAAC,CAAC,OAAOjB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,OAAO,EAAE;IACX;EACF,CAAC;EAED;EACAkB,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,IAAI;MACF,OAAO,MAAM3B,YAAY,CAAC4B,cAAc,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOnB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO;QACLF,KAAK,EAAE;UAAEsB,KAAK,EAAE,CAAC;UAAEC,OAAO,EAAE,CAAC;UAAEC,UAAU,EAAE,CAAC;UAAEC,MAAM,EAAE;QAAE,CAAC;QACzDC,SAAS,EAAE,CAAC;QACZC,aAAa,EAAE,CAAC;QAChBC,QAAQ,EAAE;MACZ,CAAC;IACH;EACF;AACF,CAAC;AAED,eAAe;EACblC,QAAQ;EACRI,OAAO;EACPM,OAAO;EACPQ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}