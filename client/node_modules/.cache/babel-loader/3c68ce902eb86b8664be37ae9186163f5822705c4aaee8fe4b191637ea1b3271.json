{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import{useAuth}from'../../hooks/useAuth';import{chatService}from'../../services/chatService';import{voiceService}from'../../services/voiceService';import{useTranslation}from'react-i18next';import VoiceSettings from'../../components/VoiceSettings';import{PaperAirplaneIcon,MicrophoneIcon,XCircleIcon,SpeakerWaveIcon,SpeakerXMarkIcon,Cog6ToothIcon}from'@heroicons/react/24/solid';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Chat=()=>{const[messages,setMessages]=useState([]);const[inputMessage,setInputMessage]=useState('');const[isRecording,setIsRecording]=useState(false);const[isProcessing,setIsProcessing]=useState(false);const[currentConversationId,setCurrentConversationId]=useState(null);const[audioStream,setAudioStream]=useState(null);const[mediaRecorder,setMediaRecorder]=useState(null);const[recordedChunks,setRecordedChunks]=useState([]);const[isTyping,setIsTyping]=useState(false);const messagesEndRef=useRef(null);const inputRef=useRef(null);const{user}=useAuth();// Scroll to bottom of messages\nconst scrollToBottom=()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:'smooth'});};useEffect(()=>{scrollToBottom();},[messages]);// Initialize or load existing conversation\nuseEffect(()=>{const initializeConversation=async()=>{try{// Check if there's a stored conversation ID\nconst storedConversationId=localStorage.getItem('currentConversationId');if(storedConversationId){setCurrentConversationId(storedConversationId);// Load messages for this conversation\nconst messages=await chatService.getConversationHistory(storedConversationId);setMessages(messages);}else{var _user$profile_data;// Create a new conversation\nconst newConversationId=await chatService.createConversation(user.id);setCurrentConversationId(newConversationId);localStorage.setItem('currentConversationId',newConversationId);// Add a welcome message\nconst welcomeMessage={id:`welcome-${Date.now()}`,conversation_id:newConversationId,sender:'ai',text:`Hello ${((_user$profile_data=user.profile_data)===null||_user$profile_data===void 0?void 0:_user$profile_data.name)||'there'}! How can I help you today?`,timestamp:new Date().toISOString(),sentiment_score:0.8};await chatService.saveMessage(welcomeMessage);setMessages([welcomeMessage]);}}catch(error){console.error('Error initializing conversation:',error);// Show error in UI\nsetMessages([{id:`error-${Date.now()}`,sender:'system',text:'Sorry, there was an error starting the conversation. Please try refreshing the page.',timestamp:new Date().toISOString()}]);}};if(user){initializeConversation();}// Cleanup function to end conversation when component unmounts\nreturn()=>{if(currentConversationId){chatService.endConversation(currentConversationId).catch(err=>console.error('Error ending conversation:',err));}};},[user]);// Focus on input when messages change\nuseEffect(()=>{if(!isRecording&&inputRef.current){inputRef.current.focus();}},[messages,isRecording]);// Handle text message submission\nconst handleSubmit=async e=>{e.preventDefault();if(!inputMessage.trim()||!currentConversationId)return;const userMessage={conversation_id:currentConversationId,sender:'user',text:inputMessage,timestamp:new Date().toISOString()};// Update UI immediately\nsetMessages(prev=>[...prev,userMessage]);setInputMessage('');setIsProcessing(true);try{// Save message to database\nawait chatService.saveMessage(userMessage);// Show typing indicator\nsetIsTyping(true);// Get AI response\nconst aiResponse=await chatService.getAIResponse(userMessage.text,currentConversationId,user.id);// Hide typing indicator\nsetIsTyping(false);// Create AI message\nconst aiMessage={conversation_id:currentConversationId,sender:'ai',text:aiResponse.message,timestamp:new Date().toISOString(),sentiment_score:aiResponse.sentiment_score};// Save AI response to database\nawait chatService.saveMessage(aiMessage);// Update UI\nsetMessages(prev=>[...prev,aiMessage]);// If this is the 5th message in the conversation, generate a summary\nif(messages.length>=4){chatService.generateSummary(currentConversationId).catch(err=>console.error('Error generating summary:',err));}}catch(error){console.error('Error processing message:',error);setIsTyping(false);// Show error in UI\nsetMessages(prev=>[...prev,{id:`error-${Date.now()}`,sender:'system',text:'Sorry, there was an error processing your message. Please try again.',timestamp:new Date().toISOString()}]);}finally{setIsProcessing(false);}};// State for voice settings\nconst[voiceSettings,setVoiceSettings]=useState({enabled:true,preferredVoice:'en-US-Neural2-F',speed:1.0,pitch:1.0});// State for TTS playback\nconst[isSpeaking,setIsSpeaking]=useState(false);const[audioQueue,setAudioQueue]=useState([]);// State for voice settings modal\nconst[showVoiceSettings,setShowVoiceSettings]=useState(false);// Toggle text-to-speech\nconst toggleVoiceEnabled=async()=>{const newSettings={...voiceSettings,enabled:!voiceSettings.enabled};setVoiceSettings(newSettings);if(user!==null&&user!==void 0&&user.id){await voiceService.updateUserVoiceSettings(user.id,newSettings);}};// Open voice settings modal\nconst openVoiceSettings=()=>{setShowVoiceSettings(true);};// Handle voice settings save\nconst handleSaveVoiceSettings=newSettings=>{setVoiceSettings(newSettings);};// Play message using TTS\nconst playMessage=async message=>{if(!voiceSettings.enabled||isSpeaking)return;try{setIsSpeaking(true);// Get current language for TTS\nconst language=i18n.language||'en';const ttsVoice=language==='en'?'en-US-Neural2-F':language==='es'?'es-ES-Neural2-F':voiceSettings.preferredVoice;// Convert text to speech\nconst audioBlob=await voiceService.textToSpeech(message.text,{voice:ttsVoice,speed:voiceSettings.speed,pitch:voiceSettings.pitch});// Play the audio\nawait voiceService.playAudio(audioBlob);}catch(error){console.error('Error playing TTS:',error);}finally{setIsSpeaking(false);}};// Play AI responses automatically if TTS is enabled\nuseEffect(()=>{const lastMessage=messages[messages.length-1];if(lastMessage&&lastMessage.sender==='ai'&&voiceSettings.enabled&&!isSpeaking){playMessage(lastMessage);}},[messages]);// Get translation function\nconst{t,i18n}=useTranslation();// Load user voice settings\nuseEffect(()=>{const loadVoiceSettings=async()=>{if(user!==null&&user!==void 0&&user.id){try{const settings=await voiceService.getUserVoiceSettings(user.id);setVoiceSettings(settings);}catch(error){console.error('Error loading voice settings:',error);}}};loadVoiceSettings();},[user]);// Handle voice recording\nconst toggleRecording=async()=>{if(isRecording){// Stop recording\nif(mediaRecorder&&mediaRecorder.state!=='inactive'){mediaRecorder.stop();}if(audioStream){audioStream.getTracks().forEach(track=>track.stop());setAudioStream(null);}setIsRecording(false);}else{try{// Start recording\nconst stream=await navigator.mediaDevices.getUserMedia({audio:true});setAudioStream(stream);const recorder=new MediaRecorder(stream);setMediaRecorder(recorder);const chunks=[];setRecordedChunks(chunks);recorder.ondataavailable=e=>{if(e.data.size>0){chunks.push(e.data);}};recorder.onstop=async()=>{try{setIsProcessing(true);// Create audio blob from recorded chunks\nconst audioBlob=new Blob(chunks,{type:'audio/webm'});// Get current language for STT\nconst language=i18n.language||'en';const sttLanguage=language==='en'?'en-US':language==='es'?'es-ES':'en-US';// Convert speech to text using ultravox.ai\nconst transcribedText=await voiceService.speechToText(audioBlob,sttLanguage);if(transcribedText){setInputMessage(transcribedText);}}catch(error){console.error('Error processing speech to text:',error);setMessages(prev=>[...prev,{id:`error-${Date.now()}`,sender:'system',text:t('chat.speechToTextError'),timestamp:new Date().toISOString()}]);}finally{setIsProcessing(false);}};recorder.start();setIsRecording(true);}catch(error){console.error('Error accessing microphone:',error);// Show error in UI\nsetMessages(prev=>[...prev,{id:`error-${Date.now()}`,sender:'system',text:t('chat.microphoneError'),timestamp:new Date().toISOString()}]);}}};// Start a new conversation\nconst startNewConversation=async()=>{try{var _user$profile_data2;// End current conversation if exists\nif(currentConversationId){await chatService.endConversation(currentConversationId);}// Create a new conversation\nconst newConversationId=await chatService.createConversation(user.id);setCurrentConversationId(newConversationId);localStorage.setItem('currentConversationId',newConversationId);// Add a welcome message\nconst welcomeMessage={id:`welcome-${Date.now()}`,conversation_id:newConversationId,sender:'ai',text:`Hello ${((_user$profile_data2=user.profile_data)===null||_user$profile_data2===void 0?void 0:_user$profile_data2.name)||'there'}! How can I help you today?`,timestamp:new Date().toISOString(),sentiment_score:0.8};await chatService.saveMessage(welcomeMessage);setMessages([welcomeMessage]);}catch(error){console.error('Error starting new conversation:',error);// Show error in UI\nsetMessages([{id:`error-${Date.now()}`,sender:'system',text:'Sorry, there was an error starting a new conversation. Please try refreshing the page.',timestamp:new Date().toISOString()}]);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col h-[calc(100vh-12rem)]\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white border-b p-4 flex justify-between items-center\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-lg font-semibold text-secondary-900\",children:\"AI Therapy Session\"}),/*#__PURE__*/_jsx(\"button\",{onClick:startNewConversation,className:\"text-sm px-3 py-1 bg-primary-100 text-primary-700 rounded-md hover:bg-primary-200 transition-colors\",children:\"New Conversation\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50\",children:[messages.map((message,index)=>{var _user$profile_data3,_user$profile_data3$n;return/*#__PURE__*/_jsxs(\"div\",{className:`flex ${message.sender==='user'?'justify-end':'justify-start'}`,children:[message.sender!=='user'&&message.sender!=='system'&&/*#__PURE__*/_jsx(\"div\",{className:\"h-8 w-8 rounded-full bg-primary-500 flex items-center justify-center text-white mr-2\",children:\"AI\"}),/*#__PURE__*/_jsxs(\"div\",{className:`max-w-[70%] rounded-lg p-3 shadow-sm ${message.sender==='user'?'bg-primary-500 text-white':message.sender==='system'?'bg-red-100 text-red-900':'bg-white text-secondary-900'}`,children:[/*#__PURE__*/_jsx(\"p\",{className:\"text-sm whitespace-pre-wrap\",children:message.text}),/*#__PURE__*/_jsx(\"span\",{className:`text-xs ${message.sender==='user'?'text-primary-100':'text-secondary-500'} mt-1 block`,children:new Date(message.timestamp).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'})})]}),message.sender==='user'&&/*#__PURE__*/_jsx(\"div\",{className:\"h-8 w-8 rounded-full bg-secondary-200 flex items-center justify-center text-secondary-600 ml-2\",children:((_user$profile_data3=user.profile_data)===null||_user$profile_data3===void 0?void 0:(_user$profile_data3$n=_user$profile_data3.name)===null||_user$profile_data3$n===void 0?void 0:_user$profile_data3$n.charAt(0))||'U'})]},message.id||index);}),isTyping&&/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-start\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"h-8 w-8 rounded-full bg-primary-500 flex items-center justify-center text-white mr-2\",children:\"AI\"}),/*#__PURE__*/_jsx(\"div\",{className:\"bg-white rounded-lg p-4 shadow-sm\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex space-x-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"h-2 w-2 bg-primary-500 rounded-full animate-bounce\",style:{animationDelay:'0ms'}}),/*#__PURE__*/_jsx(\"div\",{className:\"h-2 w-2 bg-primary-500 rounded-full animate-bounce\",style:{animationDelay:'150ms'}}),/*#__PURE__*/_jsx(\"div\",{className:\"h-2 w-2 bg-primary-500 rounded-full animate-bounce\",style:{animationDelay:'300ms'}})]})})]}),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsx(\"div\",{className:\"border-t p-4 bg-white\",children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"flex space-x-2\",children:[/*#__PURE__*/_jsx(\"input\",{ref:inputRef,type:\"text\",value:inputMessage,onChange:e=>setInputMessage(e.target.value),disabled:isProcessing||isRecording,placeholder:isRecording?\"Recording...\":\"Type your message...\",className:\"flex-1 rounded-lg border border-secondary-300 p-3 focus:outline-none focus:ring-2 focus:ring-primary-500\",onKeyDown:e=>{if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();handleSubmit(e);}}}),isRecording?/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:toggleRecording,className:\"p-3 rounded-lg bg-red-500 text-white hover:bg-red-600 transition-colors\",title:t('chat.stopRecording'),children:/*#__PURE__*/_jsx(XCircleIcon,{className:\"h-6 w-6\"})}):/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:toggleRecording,disabled:isProcessing,className:\"p-3 rounded-lg bg-secondary-100 text-secondary-600 hover:bg-secondary-200 transition-colors disabled:opacity-50\",title:t('chat.startRecording'),children:/*#__PURE__*/_jsx(MicrophoneIcon,{className:\"h-6 w-6\"})}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:toggleVoiceEnabled,className:`p-3 rounded-lg transition-colors ${voiceSettings.enabled?'bg-blue-100 text-blue-600 hover:bg-blue-200':'bg-gray-100 text-gray-600 hover:bg-gray-200'}`,title:voiceSettings.enabled?t('chat.disableVoice'):t('chat.enableVoice'),children:voiceSettings.enabled?/*#__PURE__*/_jsx(SpeakerWaveIcon,{className:\"h-6 w-6\"}):/*#__PURE__*/_jsx(SpeakerXMarkIcon,{className:\"h-6 w-6\"})}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",onClick:openVoiceSettings,className:\"p-3 rounded-lg bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors\",title:t('chat.voiceSettings'),children:/*#__PURE__*/_jsx(Cog6ToothIcon,{className:\"h-6 w-6\"})}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",disabled:!inputMessage.trim()||isProcessing||isRecording,className:\"p-3 rounded-lg bg-primary-500 text-white hover:bg-primary-600 transition-colors disabled:opacity-50\",children:/*#__PURE__*/_jsx(PaperAirplaneIcon,{className:\"h-6 w-6\"})})]})}),showVoiceSettings&&/*#__PURE__*/_jsx(VoiceSettings,{initialSettings:voiceSettings,onClose:()=>setShowVoiceSettings(false),onSave:handleSaveVoiceSettings})]});};export default Chat;","map":{"version":3,"names":["React","useState","useEffect","useRef","useAuth","chatService","voiceService","useTranslation","VoiceSettings","PaperAirplaneIcon","MicrophoneIcon","XCircleIcon","SpeakerWaveIcon","SpeakerXMarkIcon","Cog6ToothIcon","jsx","_jsx","jsxs","_jsxs","Chat","messages","setMessages","inputMessage","setInputMessage","isRecording","setIsRecording","isProcessing","setIsProcessing","currentConversationId","setCurrentConversationId","audioStream","setAudioStream","mediaRecorder","setMediaRecorder","recordedChunks","setRecordedChunks","isTyping","setIsTyping","messagesEndRef","inputRef","user","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","initializeConversation","storedConversationId","localStorage","getItem","getConversationHistory","_user$profile_data","newConversationId","createConversation","id","setItem","welcomeMessage","Date","now","conversation_id","sender","text","profile_data","name","timestamp","toISOString","sentiment_score","saveMessage","error","console","endConversation","catch","err","focus","handleSubmit","e","preventDefault","trim","userMessage","prev","aiResponse","getAIResponse","aiMessage","message","length","generateSummary","voiceSettings","setVoiceSettings","enabled","preferredVoice","speed","pitch","isSpeaking","setIsSpeaking","audioQueue","setAudioQueue","showVoiceSettings","setShowVoiceSettings","toggleVoiceEnabled","newSettings","updateUserVoiceSettings","openVoiceSettings","handleSaveVoiceSettings","playMessage","language","i18n","ttsVoice","audioBlob","textToSpeech","voice","playAudio","lastMessage","t","loadVoiceSettings","settings","getUserVoiceSettings","toggleRecording","state","stop","getTracks","forEach","track","stream","navigator","mediaDevices","getUserMedia","audio","recorder","MediaRecorder","chunks","ondataavailable","data","size","push","onstop","Blob","type","sttLanguage","transcribedText","speechToText","start","startNewConversation","_user$profile_data2","className","children","onClick","map","index","_user$profile_data3","_user$profile_data3$n","toLocaleTimeString","hour","minute","charAt","style","animationDelay","ref","onSubmit","value","onChange","target","disabled","placeholder","onKeyDown","key","shiftKey","title","initialSettings","onClose","onSave"],"sources":["/Users/gio/development/smartterapist/client/src/pages/client/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useAuth } from '../../hooks/useAuth';\nimport { chatService } from '../../services/chatService';\nimport { voiceService } from '../../services/voiceService';\nimport { useTranslation } from 'react-i18next';\nimport VoiceSettings from '../../components/VoiceSettings';\nimport { PaperAirplaneIcon, MicrophoneIcon, XCircleIcon, SpeakerWaveIcon, SpeakerXMarkIcon, Cog6ToothIcon } from '@heroicons/react/24/solid';\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [currentConversationId, setCurrentConversationId] = useState(null);\n  const [audioStream, setAudioStream] = useState(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const [isTyping, setIsTyping] = useState(false);\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n  const { user } = useAuth();\n  \n  // Scroll to bottom of messages\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n  \n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n  \n  // Initialize or load existing conversation\n  useEffect(() => {\n    const initializeConversation = async () => {\n      try {\n        // Check if there's a stored conversation ID\n        const storedConversationId = localStorage.getItem('currentConversationId');\n        \n        if (storedConversationId) {\n          setCurrentConversationId(storedConversationId);\n          \n          // Load messages for this conversation\n          const messages = await chatService.getConversationHistory(storedConversationId);\n          setMessages(messages);\n        } else {\n          // Create a new conversation\n          const newConversationId = await chatService.createConversation(user.id);\n          setCurrentConversationId(newConversationId);\n          localStorage.setItem('currentConversationId', newConversationId);\n          \n          // Add a welcome message\n          const welcomeMessage = {\n            id: `welcome-${Date.now()}`,\n            conversation_id: newConversationId,\n            sender: 'ai',\n            text: `Hello ${user.profile_data?.name || 'there'}! How can I help you today?`,\n            timestamp: new Date().toISOString(),\n            sentiment_score: 0.8\n          };\n          \n          await chatService.saveMessage(welcomeMessage);\n          setMessages([welcomeMessage]);\n        }\n      } catch (error) {\n        console.error('Error initializing conversation:', error);\n        // Show error in UI\n        setMessages([{\n          id: `error-${Date.now()}`,\n          sender: 'system',\n          text: 'Sorry, there was an error starting the conversation. Please try refreshing the page.',\n          timestamp: new Date().toISOString(),\n        }]);\n      }\n    };\n    \n    if (user) {\n      initializeConversation();\n    }\n    \n    // Cleanup function to end conversation when component unmounts\n    return () => {\n      if (currentConversationId) {\n        chatService.endConversation(currentConversationId).catch(err => \n          console.error('Error ending conversation:', err)\n        );\n      }\n    };\n  }, [user]);\n  \n  // Focus on input when messages change\n  useEffect(() => {\n    if (!isRecording && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [messages, isRecording]);\n  \n  // Handle text message submission\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (!inputMessage.trim() || !currentConversationId) return;\n    \n    const userMessage = {\n      conversation_id: currentConversationId,\n      sender: 'user',\n      text: inputMessage,\n      timestamp: new Date().toISOString(),\n    };\n    \n    // Update UI immediately\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsProcessing(true);\n    \n    try {\n      // Save message to database\n      await chatService.saveMessage(userMessage);\n      \n      // Show typing indicator\n      setIsTyping(true);\n      \n      // Get AI response\n      const aiResponse = await chatService.getAIResponse(userMessage.text, currentConversationId, user.id);\n      \n      // Hide typing indicator\n      setIsTyping(false);\n      \n      // Create AI message\n      const aiMessage = {\n        conversation_id: currentConversationId,\n        sender: 'ai',\n        text: aiResponse.message,\n        timestamp: new Date().toISOString(),\n        sentiment_score: aiResponse.sentiment_score\n      };\n      \n      // Save AI response to database\n      await chatService.saveMessage(aiMessage);\n      \n      // Update UI\n      setMessages(prev => [...prev, aiMessage]);\n      \n      // If this is the 5th message in the conversation, generate a summary\n      if (messages.length >= 4) {\n        chatService.generateSummary(currentConversationId).catch(err => \n          console.error('Error generating summary:', err)\n        );\n      }\n    } catch (error) {\n      console.error('Error processing message:', error);\n      setIsTyping(false);\n      \n      // Show error in UI\n      setMessages(prev => [...prev, {\n        id: `error-${Date.now()}`,\n        sender: 'system',\n        text: 'Sorry, there was an error processing your message. Please try again.',\n        timestamp: new Date().toISOString(),\n      }]);\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n  \n  // State for voice settings\n  const [voiceSettings, setVoiceSettings] = useState({\n    enabled: true,\n    preferredVoice: 'en-US-Neural2-F',\n    speed: 1.0,\n    pitch: 1.0\n  });\n  \n  // State for TTS playback\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [audioQueue, setAudioQueue] = useState([]);\n  \n  // State for voice settings modal\n  const [showVoiceSettings, setShowVoiceSettings] = useState(false);\n  \n  // Toggle text-to-speech\n  const toggleVoiceEnabled = async () => {\n    const newSettings = { ...voiceSettings, enabled: !voiceSettings.enabled };\n    setVoiceSettings(newSettings);\n    \n    if (user?.id) {\n      await voiceService.updateUserVoiceSettings(user.id, newSettings);\n    }\n  };\n  \n  // Open voice settings modal\n  const openVoiceSettings = () => {\n    setShowVoiceSettings(true);\n  };\n  \n  // Handle voice settings save\n  const handleSaveVoiceSettings = (newSettings) => {\n    setVoiceSettings(newSettings);\n  };\n  \n  // Play message using TTS\n  const playMessage = async (message) => {\n    if (!voiceSettings.enabled || isSpeaking) return;\n    \n    try {\n      setIsSpeaking(true);\n      \n      // Get current language for TTS\n      const language = i18n.language || 'en';\n      const ttsVoice = language === 'en' ? 'en-US-Neural2-F' : language === 'es' ? 'es-ES-Neural2-F' : voiceSettings.preferredVoice;\n      \n      // Convert text to speech\n      const audioBlob = await voiceService.textToSpeech(message.text, {\n        voice: ttsVoice,\n        speed: voiceSettings.speed,\n        pitch: voiceSettings.pitch\n      });\n      \n      // Play the audio\n      await voiceService.playAudio(audioBlob);\n    } catch (error) {\n      console.error('Error playing TTS:', error);\n    } finally {\n      setIsSpeaking(false);\n    }\n  };\n  \n  // Play AI responses automatically if TTS is enabled\n  useEffect(() => {\n    const lastMessage = messages[messages.length - 1];\n    if (lastMessage && lastMessage.sender === 'ai' && voiceSettings.enabled && !isSpeaking) {\n      playMessage(lastMessage);\n    }\n  }, [messages]);\n  \n  // Get translation function\n  const { t, i18n } = useTranslation();\n  \n  // Load user voice settings\n  useEffect(() => {\n    const loadVoiceSettings = async () => {\n      if (user?.id) {\n        try {\n          const settings = await voiceService.getUserVoiceSettings(user.id);\n          setVoiceSettings(settings);\n        } catch (error) {\n          console.error('Error loading voice settings:', error);\n        }\n      }\n    };\n    \n    loadVoiceSettings();\n  }, [user]);\n  \n  // Handle voice recording\n  const toggleRecording = async () => {\n    if (isRecording) {\n      // Stop recording\n      if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n        mediaRecorder.stop();\n      }\n      \n      if (audioStream) {\n        audioStream.getTracks().forEach(track => track.stop());\n        setAudioStream(null);\n      }\n      \n      setIsRecording(false);\n    } else {\n      try {\n        // Start recording\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        setAudioStream(stream);\n        \n        const recorder = new MediaRecorder(stream);\n        setMediaRecorder(recorder);\n        \n        const chunks = [];\n        setRecordedChunks(chunks);\n        \n        recorder.ondataavailable = (e) => {\n          if (e.data.size > 0) {\n            chunks.push(e.data);\n          }\n        };\n        \n        recorder.onstop = async () => {\n          try {\n            setIsProcessing(true);\n            \n            // Create audio blob from recorded chunks\n            const audioBlob = new Blob(chunks, { type: 'audio/webm' });\n            \n            // Get current language for STT\n            const language = i18n.language || 'en';\n            const sttLanguage = language === 'en' ? 'en-US' : language === 'es' ? 'es-ES' : 'en-US';\n            \n            // Convert speech to text using ultravox.ai\n            const transcribedText = await voiceService.speechToText(audioBlob, sttLanguage);\n            \n            if (transcribedText) {\n              setInputMessage(transcribedText);\n            }\n          } catch (error) {\n            console.error('Error processing speech to text:', error);\n            setMessages(prev => [...prev, {\n              id: `error-${Date.now()}`,\n              sender: 'system',\n              text: t('chat.speechToTextError'),\n              timestamp: new Date().toISOString(),\n            }]);\n          } finally {\n            setIsProcessing(false);\n          }\n        };\n        \n        recorder.start();\n        setIsRecording(true);\n      } catch (error) {\n        console.error('Error accessing microphone:', error);\n        // Show error in UI\n        setMessages(prev => [...prev, {\n          id: `error-${Date.now()}`,\n          sender: 'system',\n          text: t('chat.microphoneError'),\n          timestamp: new Date().toISOString(),\n        }]);\n      }\n    }\n  };\n  \n  // Start a new conversation\n  const startNewConversation = async () => {\n    try {\n      // End current conversation if exists\n      if (currentConversationId) {\n        await chatService.endConversation(currentConversationId);\n      }\n      \n      // Create a new conversation\n      const newConversationId = await chatService.createConversation(user.id);\n      setCurrentConversationId(newConversationId);\n      localStorage.setItem('currentConversationId', newConversationId);\n      \n      // Add a welcome message\n      const welcomeMessage = {\n        id: `welcome-${Date.now()}`,\n        conversation_id: newConversationId,\n        sender: 'ai',\n        text: `Hello ${user.profile_data?.name || 'there'}! How can I help you today?`,\n        timestamp: new Date().toISOString(),\n        sentiment_score: 0.8\n      };\n      \n      await chatService.saveMessage(welcomeMessage);\n      setMessages([welcomeMessage]);\n    } catch (error) {\n      console.error('Error starting new conversation:', error);\n      // Show error in UI\n      setMessages([{\n        id: `error-${Date.now()}`,\n        sender: 'system',\n        text: 'Sorry, there was an error starting a new conversation. Please try refreshing the page.',\n        timestamp: new Date().toISOString(),\n      }]);\n    }\n  };\n  \n  return (\n    <div className=\"flex flex-col h-[calc(100vh-12rem)]\">\n      {/* Header */}\n      <div className=\"bg-white border-b p-4 flex justify-between items-center\">\n        <h2 className=\"text-lg font-semibold text-secondary-900\">AI Therapy Session</h2>\n        <button\n          onClick={startNewConversation}\n          className=\"text-sm px-3 py-1 bg-primary-100 text-primary-700 rounded-md hover:bg-primary-200 transition-colors\"\n        >\n          New Conversation\n        </button>\n      </div>\n      \n      {/* Messages area */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50\">\n        {messages.map((message, index) => (\n          <div\n            key={message.id || index}\n            className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\n          >\n            {message.sender !== 'user' && message.sender !== 'system' && (\n              <div className=\"h-8 w-8 rounded-full bg-primary-500 flex items-center justify-center text-white mr-2\">\n                AI\n              </div>\n            )}\n            <div\n              className={`max-w-[70%] rounded-lg p-3 shadow-sm ${\n                message.sender === 'user'\n                  ? 'bg-primary-500 text-white'\n                  : message.sender === 'system'\n                  ? 'bg-red-100 text-red-900'\n                  : 'bg-white text-secondary-900'\n              }`}\n            >\n              <p className=\"text-sm whitespace-pre-wrap\">{message.text}</p>\n              <span className={`text-xs ${message.sender === 'user' ? 'text-primary-100' : 'text-secondary-500'} mt-1 block`}>\n                {new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n              </span>\n            </div>\n            {message.sender === 'user' && (\n              <div className=\"h-8 w-8 rounded-full bg-secondary-200 flex items-center justify-center text-secondary-600 ml-2\">\n                {user.profile_data?.name?.charAt(0) || 'U'}\n              </div>\n            )}\n          </div>\n        ))}\n        \n        {/* Typing indicator */}\n        {isTyping && (\n          <div className=\"flex justify-start\">\n            <div className=\"h-8 w-8 rounded-full bg-primary-500 flex items-center justify-center text-white mr-2\">\n              AI\n            </div>\n            <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n              <div className=\"flex space-x-1\">\n                <div className=\"h-2 w-2 bg-primary-500 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }}></div>\n                <div className=\"h-2 w-2 bg-primary-500 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }}></div>\n                <div className=\"h-2 w-2 bg-primary-500 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }}></div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      {/* Input area */}\n      <div className=\"border-t p-4 bg-white\">\n        <form onSubmit={handleSubmit} className=\"flex space-x-2\">\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={inputMessage}\n            onChange={(e) => setInputMessage(e.target.value)}\n            disabled={isProcessing || isRecording}\n            placeholder={isRecording ? \"Recording...\" : \"Type your message...\"}\n            className=\"flex-1 rounded-lg border border-secondary-300 p-3 focus:outline-none focus:ring-2 focus:ring-primary-500\"\n            onKeyDown={(e) => {\n              if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                handleSubmit(e);\n              }\n            }}\n          />\n          {isRecording ? (\n            <button\n              type=\"button\"\n              onClick={toggleRecording}\n              className=\"p-3 rounded-lg bg-red-500 text-white hover:bg-red-600 transition-colors\"\n              title={t('chat.stopRecording')}\n            >\n              <XCircleIcon className=\"h-6 w-6\" />\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              onClick={toggleRecording}\n              disabled={isProcessing}\n              className=\"p-3 rounded-lg bg-secondary-100 text-secondary-600 hover:bg-secondary-200 transition-colors disabled:opacity-50\"\n              title={t('chat.startRecording')}\n            >\n              <MicrophoneIcon className=\"h-6 w-6\" />\n            </button>\n          )}\n          \n          {/* TTS toggle button */}\n          <button\n            type=\"button\"\n            onClick={toggleVoiceEnabled}\n            className={`p-3 rounded-lg transition-colors ${voiceSettings.enabled ? 'bg-blue-100 text-blue-600 hover:bg-blue-200' : 'bg-gray-100 text-gray-600 hover:bg-gray-200'}`}\n            title={voiceSettings.enabled ? t('chat.disableVoice') : t('chat.enableVoice')}\n          >\n            {voiceSettings.enabled ? (\n              <SpeakerWaveIcon className=\"h-6 w-6\" />\n            ) : (\n              <SpeakerXMarkIcon className=\"h-6 w-6\" />\n            )}\n          </button>\n          \n          {/* Voice settings button */}\n          <button\n            type=\"button\"\n            onClick={openVoiceSettings}\n            className=\"p-3 rounded-lg bg-gray-100 text-gray-600 hover:bg-gray-200 transition-colors\"\n            title={t('chat.voiceSettings')}\n          >\n            <Cog6ToothIcon className=\"h-6 w-6\" />\n          </button>\n          <button\n            type=\"submit\"\n            disabled={!inputMessage.trim() || isProcessing || isRecording}\n            className=\"p-3 rounded-lg bg-primary-500 text-white hover:bg-primary-600 transition-colors disabled:opacity-50\"\n          >\n            <PaperAirplaneIcon className=\"h-6 w-6\" />\n          </button>\n        </form>\n      </div>\n      \n      {/* Voice Settings Modal */}\n      {showVoiceSettings && (\n        <VoiceSettings\n          initialSettings={voiceSettings}\n          onClose={() => setShowVoiceSettings(false)}\n          onSave={handleSaveVoiceSettings}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}