{"ast":null,"code":"/**\n * Supabase Data Utilities\n * \n * This file provides utilities for fetching data from Supabase\n * to replace the hardcoded mock data in the application.\n */import{supabase}from'../services/supabaseClient';import{userService,clientService,behaviorService,sessionService,summaryService,statsService}from'../services/supabaseDataService';// Flag to determine if we're in development mode\nexport const DEV_MODE=process.env.NODE_ENV==='development';// Function to get a user based on role\nexport const getUser=async function(){let role=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'therapist';try{const users=await userService.getUsersByRole(role);return users[0]||null;}catch(error){console.error(`Error getting ${role} user:`,error);return null;}};// Function to initialize the application\nexport const initApp=async()=>{if(DEV_MODE){console.log('ðŸ”§ Development mode enabled - Using Supabase data');// Store a default user in localStorage if not already present\nif(!localStorage.getItem('smarttherapist_user')){const defaultUser=await getUser('therapist');if(defaultUser){localStorage.setItem('smarttherapist_user',JSON.stringify(defaultUser));console.log('Created default user (therapist) from Supabase');}else{console.error('Failed to get default user from Supabase');}}}};// Data access functions\nexport const DATA={// Get clients data\ngetClients:async()=>{try{return await clientService.getClients();}catch(error){console.error('Error fetching clients:',error);return[];}},// Get behaviors data\ngetBehaviors:async()=>{try{return await behaviorService.getBehaviors();}catch(error){console.error('Error fetching behaviors:',error);return[];}},// Get sessions data\ngetSessions:async()=>{try{return await sessionService.getSessions();}catch(error){console.error('Error fetching sessions:',error);return[];}},// Get upcoming sessions\ngetUpcomingSessions:async()=>{try{return await sessionService.getUpcomingSessions();}catch(error){console.error('Error fetching upcoming sessions:',error);return[];}},// Get summaries data\ngetSummaries:async()=>{try{return await summaryService.getSummaries();}catch(error){console.error('Error fetching summaries:',error);return[];}},// Get recent summaries\ngetRecentSummaries:async function(){let limit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;try{return await summaryService.getRecentSummaries(limit);}catch(error){console.error('Error fetching recent summaries:',error);return[];}},// Get system stats\ngetStats:async()=>{try{return await statsService.getSystemStats();}catch(error){console.error('Error fetching system stats:',error);return{users:{total:0,clients:0,therapists:0,admins:0},behaviors:0,conversations:0,messages:0};}}};export default{DEV_MODE,getUser,initApp,DATA};","map":{"version":3,"names":["supabase","userService","clientService","behaviorService","sessionService","summaryService","statsService","DEV_MODE","process","env","NODE_ENV","getUser","role","arguments","length","undefined","users","getUsersByRole","error","console","initApp","log","localStorage","getItem","defaultUser","setItem","JSON","stringify","DATA","getClients","getBehaviors","getSessions","getUpcomingSessions","getSummaries","getRecentSummaries","limit","getStats","getSystemStats","total","clients","therapists","admins","behaviors","conversations","messages"],"sources":["/Users/gio/development/smartterapist/client/src/utils/supabaseData.js"],"sourcesContent":["/**\n * Supabase Data Utilities\n * \n * This file provides utilities for fetching data from Supabase\n * to replace the hardcoded mock data in the application.\n */\n\nimport { supabase } from '../services/supabaseClient';\nimport { userService, clientService, behaviorService, sessionService, summaryService, statsService } from '../services/supabaseDataService';\n\n// Flag to determine if we're in development mode\nexport const DEV_MODE = process.env.NODE_ENV === 'development';\n\n// Function to get a user based on role\nexport const getUser = async (role = 'therapist') => {\n  try {\n    const users = await userService.getUsersByRole(role);\n    return users[0] || null;\n  } catch (error) {\n    console.error(`Error getting ${role} user:`, error);\n    return null;\n  }\n};\n\n// Function to initialize the application\nexport const initApp = async () => {\n  if (DEV_MODE) {\n    console.log('ðŸ”§ Development mode enabled - Using Supabase data');\n    \n    // Store a default user in localStorage if not already present\n    if (!localStorage.getItem('smarttherapist_user')) {\n      const defaultUser = await getUser('therapist');\n      \n      if (defaultUser) {\n        localStorage.setItem('smarttherapist_user', JSON.stringify(defaultUser));\n        console.log('Created default user (therapist) from Supabase');\n      } else {\n        console.error('Failed to get default user from Supabase');\n      }\n    }\n  }\n};\n\n// Data access functions\nexport const DATA = {\n  // Get clients data\n  getClients: async () => {\n    try {\n      return await clientService.getClients();\n    } catch (error) {\n      console.error('Error fetching clients:', error);\n      return [];\n    }\n  },\n  \n  // Get behaviors data\n  getBehaviors: async () => {\n    try {\n      return await behaviorService.getBehaviors();\n    } catch (error) {\n      console.error('Error fetching behaviors:', error);\n      return [];\n    }\n  },\n  \n  // Get sessions data\n  getSessions: async () => {\n    try {\n      return await sessionService.getSessions();\n    } catch (error) {\n      console.error('Error fetching sessions:', error);\n      return [];\n    }\n  },\n  \n  // Get upcoming sessions\n  getUpcomingSessions: async () => {\n    try {\n      return await sessionService.getUpcomingSessions();\n    } catch (error) {\n      console.error('Error fetching upcoming sessions:', error);\n      return [];\n    }\n  },\n  \n  // Get summaries data\n  getSummaries: async () => {\n    try {\n      return await summaryService.getSummaries();\n    } catch (error) {\n      console.error('Error fetching summaries:', error);\n      return [];\n    }\n  },\n  \n  // Get recent summaries\n  getRecentSummaries: async (limit = 5) => {\n    try {\n      return await summaryService.getRecentSummaries(limit);\n    } catch (error) {\n      console.error('Error fetching recent summaries:', error);\n      return [];\n    }\n  },\n  \n  // Get system stats\n  getStats: async () => {\n    try {\n      return await statsService.getSystemStats();\n    } catch (error) {\n      console.error('Error fetching system stats:', error);\n      return {\n        users: { total: 0, clients: 0, therapists: 0, admins: 0 },\n        behaviors: 0,\n        conversations: 0,\n        messages: 0\n      };\n    }\n  }\n};\n\nexport default {\n  DEV_MODE,\n  getUser,\n  initApp,\n  DATA\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}