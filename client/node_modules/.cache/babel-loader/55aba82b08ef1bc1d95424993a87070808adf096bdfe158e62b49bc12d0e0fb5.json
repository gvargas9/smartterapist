{"ast":null,"code":"var _jsxFileName = \"/Users/gio/development/smartterapist/client/src/context/LanguageContext.js\",\n  _s = $RefreshSig$();\n/**\n * Language Context\n * \n * This context provides language selection and switching functionality\n * for the multi-lingual support throughout the application.\n */\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { supabase } from '../services/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LanguageContext = /*#__PURE__*/createContext();\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s();\n  const {\n    i18n\n  } = useTranslation();\n  const [currentLanguage, setCurrentLanguage] = useState('en');\n  const [availableLanguages, setAvailableLanguages] = useState([{\n    code: 'en',\n    name: 'English'\n  }, {\n    code: 'es',\n    name: 'Español'\n  }]);\n\n  // Initialize language from user preferences or localStorage\n  useEffect(() => {\n    const initializeLanguage = async () => {\n      try {\n        var _session$user;\n        // Try to get language from Supabase if user is logged in\n        const {\n          data: {\n            session\n          }\n        } = await supabase.auth.getSession();\n        if (session !== null && session !== void 0 && (_session$user = session.user) !== null && _session$user !== void 0 && _session$user.id) {\n          var _userData$profile_dat;\n          const {\n            data: userData\n          } = await supabase.from('users').select('profile_data').eq('id', session.user.id).single();\n          const preferredLanguage = userData === null || userData === void 0 ? void 0 : (_userData$profile_dat = userData.profile_data) === null || _userData$profile_dat === void 0 ? void 0 : _userData$profile_dat.language;\n          if (preferredLanguage && availableLanguages.some(lang => lang.code === preferredLanguage)) {\n            setCurrentLanguage(preferredLanguage);\n            i18n.changeLanguage(preferredLanguage);\n            return;\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user language preference:', error);\n      }\n\n      // Fall back to localStorage or browser language\n      const savedLanguage = localStorage.getItem('language');\n      if (savedLanguage && availableLanguages.some(lang => lang.code === savedLanguage)) {\n        setCurrentLanguage(savedLanguage);\n        i18n.changeLanguage(savedLanguage);\n      } else {\n        // Detect browser language\n        const browserLang = navigator.language.split('-')[0];\n        const supportedLang = availableLanguages.some(lang => lang.code === browserLang) ? browserLang : 'en';\n        setCurrentLanguage(supportedLang);\n        i18n.changeLanguage(supportedLang);\n        localStorage.setItem('language', supportedLang);\n      }\n    };\n    initializeLanguage();\n  }, [i18n]);\n\n  // Change language function\n  const changeLanguage = async languageCode => {\n    if (!availableLanguages.some(lang => lang.code === languageCode)) {\n      console.error(`Language ${languageCode} is not supported`);\n      return;\n    }\n    try {\n      var _session$user2;\n      // Update i18n\n      await i18n.changeLanguage(languageCode);\n\n      // Update state\n      setCurrentLanguage(languageCode);\n\n      // Save to localStorage\n      localStorage.setItem('language', languageCode);\n\n      // If user is logged in, save preference to Supabase\n      const {\n        data: {\n          session\n        }\n      } = await supabase.auth.getSession();\n      if (session !== null && session !== void 0 && (_session$user2 = session.user) !== null && _session$user2 !== void 0 && _session$user2.id) {\n        const {\n          data: userData\n        } = await supabase.from('users').select('profile_data').eq('id', session.user.id).single();\n        const updatedProfileData = {\n          ...(userData === null || userData === void 0 ? void 0 : userData.profile_data),\n          language: languageCode\n        };\n        await supabase.from('users').update({\n          profile_data: updatedProfileData\n        }).eq('id', session.user.id);\n      }\n    } catch (error) {\n      console.error('Error changing language:', error);\n    }\n  };\n\n  // Add new language\n  const addLanguage = (languageCode, languageName) => {\n    if (availableLanguages.some(lang => lang.code === languageCode)) {\n      console.error(`Language ${languageCode} already exists`);\n      return;\n    }\n    setAvailableLanguages(prev => [...prev, {\n      code: languageCode,\n      name: languageName\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      currentLanguage,\n      availableLanguages,\n      changeLanguage,\n      addLanguage\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageProvider, \"3jlhkV7BJ3Iz64F01DsLGpnHADk=\", false, function () {\n  return [useTranslation];\n});\n_c = LanguageProvider;\nexport default LanguageContext;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useTranslation","supabase","jsxDEV","_jsxDEV","LanguageContext","LanguageProvider","children","_s","i18n","currentLanguage","setCurrentLanguage","availableLanguages","setAvailableLanguages","code","name","initializeLanguage","_session$user","data","session","auth","getSession","user","id","_userData$profile_dat","userData","from","select","eq","single","preferredLanguage","profile_data","language","some","lang","changeLanguage","error","console","savedLanguage","localStorage","getItem","browserLang","navigator","split","supportedLang","setItem","languageCode","_session$user2","updatedProfileData","update","addLanguage","languageName","prev","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gio/development/smartterapist/client/src/context/LanguageContext.js"],"sourcesContent":["/**\n * Language Context\n * \n * This context provides language selection and switching functionality\n * for the multi-lingual support throughout the application.\n */\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { supabase } from '../services/supabaseClient';\n\nexport const LanguageContext = createContext();\n\nexport const LanguageProvider = ({ children }) => {\n  const { i18n } = useTranslation();\n  const [currentLanguage, setCurrentLanguage] = useState('en');\n  const [availableLanguages, setAvailableLanguages] = useState([\n    { code: 'en', name: 'English' },\n    { code: 'es', name: 'Español' }\n  ]);\n\n  // Initialize language from user preferences or localStorage\n  useEffect(() => {\n    const initializeLanguage = async () => {\n      try {\n        // Try to get language from Supabase if user is logged in\n        const { data: { session } } = await supabase.auth.getSession();\n        \n        if (session?.user?.id) {\n          const { data: userData } = await supabase\n            .from('users')\n            .select('profile_data')\n            .eq('id', session.user.id)\n            .single();\n          \n          const preferredLanguage = userData?.profile_data?.language;\n          \n          if (preferredLanguage && availableLanguages.some(lang => lang.code === preferredLanguage)) {\n            setCurrentLanguage(preferredLanguage);\n            i18n.changeLanguage(preferredLanguage);\n            return;\n          }\n        }\n      } catch (error) {\n        console.error('Error fetching user language preference:', error);\n      }\n      \n      // Fall back to localStorage or browser language\n      const savedLanguage = localStorage.getItem('language');\n      \n      if (savedLanguage && availableLanguages.some(lang => lang.code === savedLanguage)) {\n        setCurrentLanguage(savedLanguage);\n        i18n.changeLanguage(savedLanguage);\n      } else {\n        // Detect browser language\n        const browserLang = navigator.language.split('-')[0];\n        const supportedLang = availableLanguages.some(lang => lang.code === browserLang) \n          ? browserLang \n          : 'en';\n        \n        setCurrentLanguage(supportedLang);\n        i18n.changeLanguage(supportedLang);\n        localStorage.setItem('language', supportedLang);\n      }\n    };\n    \n    initializeLanguage();\n  }, [i18n]);\n\n  // Change language function\n  const changeLanguage = async (languageCode) => {\n    if (!availableLanguages.some(lang => lang.code === languageCode)) {\n      console.error(`Language ${languageCode} is not supported`);\n      return;\n    }\n    \n    try {\n      // Update i18n\n      await i18n.changeLanguage(languageCode);\n      \n      // Update state\n      setCurrentLanguage(languageCode);\n      \n      // Save to localStorage\n      localStorage.setItem('language', languageCode);\n      \n      // If user is logged in, save preference to Supabase\n      const { data: { session } } = await supabase.auth.getSession();\n      \n      if (session?.user?.id) {\n        const { data: userData } = await supabase\n          .from('users')\n          .select('profile_data')\n          .eq('id', session.user.id)\n          .single();\n        \n        const updatedProfileData = {\n          ...userData?.profile_data,\n          language: languageCode\n        };\n        \n        await supabase\n          .from('users')\n          .update({ profile_data: updatedProfileData })\n          .eq('id', session.user.id);\n      }\n    } catch (error) {\n      console.error('Error changing language:', error);\n    }\n  };\n\n  // Add new language\n  const addLanguage = (languageCode, languageName) => {\n    if (availableLanguages.some(lang => lang.code === languageCode)) {\n      console.error(`Language ${languageCode} already exists`);\n      return;\n    }\n    \n    setAvailableLanguages(prev => [\n      ...prev,\n      { code: languageCode, name: languageName }\n    ]);\n  };\n\n  return (\n    <LanguageContext.Provider\n      value={{\n        currentLanguage,\n        availableLanguages,\n        changeLanguage,\n        addLanguage\n      }}\n    >\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport default LanguageContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}