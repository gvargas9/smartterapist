{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import{supabase}from'../services/supabaseClient';import{jsx as _jsx}from\"react/jsx-runtime\";export const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);useEffect(()=>{// Check active session\nconst checkSession=async()=>{try{const{data:{session},error}=await supabase.auth.getSession();if(error){throw error;}if(session){// Get user profile from database to include role information\nconst{data:profile,error:profileError}=await supabase.from('users').select('*').eq('id',session.user.id).single();if(profileError){throw profileError;}setUser({...session.user,role:profile.role,profile_data:profile});}else{setUser(null);}}catch(error){console.error('Error checking session:',error);setError(error.message);}finally{setLoading(false);}};checkSession();// Set up auth state change listener\nconst{data:authListener}=supabase.auth.onAuthStateChange(async(event,session)=>{if(session){// Get user role from database\nconst{data:profile,error:profileError}=await supabase.from('users').select('*').eq('id',session.user.id).single();if(!profileError){setUser({...session.user,role:profile.role,profile_data:profile});}}else{setUser(null);}setLoading(false);});// Cleanup subscription\nreturn()=>{if(authListener!==null&&authListener!==void 0&&authListener.subscription){authListener.subscription.unsubscribe();}};},[]);const signIn=async(email,password)=>{try{setLoading(true);const{data,error}=await supabase.auth.signInWithPassword({email,password});if(error){throw error;}return data;}catch(error){setError(error.message);throw error;}finally{setLoading(false);}};const signUp=async(email,password,userData)=>{try{setLoading(true);// Register user with Supabase Auth\nconst{data:authData,error:authError}=await supabase.auth.signUp({email,password});if(authError){throw authError;}if(authData.user){// Create user profile in database\nconst{error:profileError}=await supabase.from('users').insert([{id:authData.user.id,email:email,role:userData.role||'client',created_at:new Date()}]);if(profileError){throw profileError;}// If user is a client, create client record\nif(userData.role==='client'||!userData.role){const{error:clientError}=await supabase.from('clients').insert([{user_id:authData.user.id,profile_data:userData.profile_data||{}}]);if(clientError){throw clientError;}}// If user is a therapist, create therapist record\nif(userData.role==='therapist'){const{error:therapistError}=await supabase.from('therapists').insert([{user_id:authData.user.id,credentials:userData.credentials||{},availability:userData.availability||{}}]);if(therapistError){throw therapistError;}}}return authData;}catch(error){setError(error.message);throw error;}finally{setLoading(false);}};const signOut=async()=>{try{setLoading(true);const{error}=await supabase.auth.signOut();if(error){throw error;}setUser(null);}catch(error){setError(error.message);throw error;}finally{setLoading(false);}};const resetPassword=async email=>{try{setLoading(true);const{error}=await supabase.auth.resetPasswordForEmail(email);if(error){throw error;}}catch(error){setError(error.message);throw error;}finally{setLoading(false);}};const updatePassword=async newPassword=>{try{setLoading(true);const{error}=await supabase.auth.updateUser({password:newPassword});if(error){throw error;}}catch(error){setError(error.message);throw error;}finally{setLoading(false);}};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,loading,error,signIn,signUp,signOut,resetPassword,updatePassword},children:children});};","map":{"version":3,"names":["React","createContext","useState","useEffect","supabase","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","loading","setLoading","error","setError","checkSession","data","session","auth","getSession","profile","profileError","from","select","eq","id","single","role","profile_data","console","message","authListener","onAuthStateChange","event","subscription","unsubscribe","signIn","email","password","signInWithPassword","signUp","userData","authData","authError","insert","created_at","Date","clientError","user_id","therapistError","credentials","availability","signOut","resetPassword","resetPasswordForEmail","updatePassword","newPassword","updateUser","Provider","value"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabaseClient';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Check active session\n    const checkSession = async () => {\n      try {\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          throw error;\n        }\n\n        if (session) {\n          // Get user profile from database to include role information\n          const { data: profile, error: profileError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n\n          if (profileError) {\n            throw profileError;\n          }\n\n          setUser({\n            ...session.user,\n            role: profile.role,\n            profile_data: profile\n          });\n        } else {\n          setUser(null);\n        }\n      } catch (error) {\n        console.error('Error checking session:', error);\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkSession();\n\n    // Set up auth state change listener\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        if (session) {\n          // Get user role from database\n          const { data: profile, error: profileError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n\n          if (!profileError) {\n            setUser({\n              ...session.user,\n              role: profile.role,\n              profile_data: profile\n            });\n          }\n        } else {\n          setUser(null);\n        }\n        setLoading(false);\n      }\n    );\n\n    // Cleanup subscription\n    return () => {\n      if (authListener?.subscription) {\n        authListener.subscription.unsubscribe();\n      }\n    };\n  }, []);\n\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n      \n      if (error) {\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email, password, userData) => {\n    try {\n      setLoading(true);\n      \n      // Register user with Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      \n      if (authError) {\n        throw authError;\n      }\n      \n      if (authData.user) {\n        // Create user profile in database\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert([\n            {\n              id: authData.user.id,\n              email: email,\n              role: userData.role || 'client',\n              created_at: new Date()\n            }\n          ]);\n          \n        if (profileError) {\n          throw profileError;\n        }\n        \n        // If user is a client, create client record\n        if (userData.role === 'client' || !userData.role) {\n          const { error: clientError } = await supabase\n            .from('clients')\n            .insert([\n              {\n                user_id: authData.user.id,\n                profile_data: userData.profile_data || {}\n              }\n            ]);\n            \n          if (clientError) {\n            throw clientError;\n          }\n        }\n        \n        // If user is a therapist, create therapist record\n        if (userData.role === 'therapist') {\n          const { error: therapistError } = await supabase\n            .from('therapists')\n            .insert([\n              {\n                user_id: authData.user.id,\n                credentials: userData.credentials || {},\n                availability: userData.availability || {}\n              }\n            ]);\n            \n          if (therapistError) {\n            throw therapistError;\n          }\n        }\n      }\n      \n      return authData;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.signOut();\n      \n      if (error) {\n        throw error;\n      }\n      \n      setUser(null);\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (email) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updatePassword = async (newPassword) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        error,\n        signIn,\n        signUp,\n        signOut,\n        resetPassword,\n        updatePassword\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}