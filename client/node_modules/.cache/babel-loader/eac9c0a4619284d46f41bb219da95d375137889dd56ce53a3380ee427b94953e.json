{"ast":null,"code":"var _jsxFileName = \"/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabaseClient';\nimport { supabaseService } from '../services/supabaseService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const checkUser = async () => {\n      try {\n        // Check for development mode mock user first\n        const mockUserStr = localStorage.getItem('smarttherapist_mock_user');\n        if (mockUserStr) {\n          try {\n            const mockUser = JSON.parse(mockUserStr);\n            console.log('ðŸ”§ Development mode: Using mock user', mockUser);\n            setUser(mockUser);\n            setLoading(false);\n            return;\n          } catch (e) {\n            console.error('Error parsing mock user:', e);\n            localStorage.removeItem('smarttherapist_mock_user');\n          }\n        }\n\n        // Check Supabase session\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          console.error('Error checking session:', error.message);\n          setLoading(false);\n          return;\n        }\n        if (!session) {\n          // No active session\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n\n        // Get user profile data\n        const {\n          data: profile,\n          error: profileError\n        } = await supabase.from('users').select('*').eq('id', session.user.id).single();\n        if (profileError) {\n          console.error('Error fetching user profile:', profileError.message);\n        }\n\n        // Combine auth and profile data\n        const userData = {\n          ...session.user,\n          ...profile\n        };\n        setUser(userData);\n      } catch (error) {\n        console.error('Error in auth context:', error.message);\n        setError(error.message);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkUser();\n\n    // Set up auth listener\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      if (event === 'SIGNED_IN') {\n        // Similar logic as above for getting profile data\n        const {\n          data: profile,\n          error: profileError\n        } = await supabase.from('users').select('*').eq('id', session.user.id).single();\n        const userData = {\n          ...session.user,\n          ...profile\n        };\n        setUser(userData);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n      }\n    });\n    return () => {\n      if (authListener) authListener.subscription.unsubscribe();\n    };\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signUp = async (email, password, userData) => {\n    try {\n      setLoading(true);\n\n      // Register user with Supabase Auth\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      if (authError) {\n        throw authError;\n      }\n      if (authData.user) {\n        // Create user profile in database\n        const {\n          error: profileError\n        } = await supabase.from('users').insert([{\n          id: authData.user.id,\n          email: email,\n          role: userData.role || 'client',\n          created_at: new Date()\n        }]);\n        if (profileError) {\n          throw profileError;\n        }\n\n        // If user is a client, create client record\n        if (userData.role === 'client' || !userData.role) {\n          const {\n            error: clientError\n          } = await supabase.from('clients').insert([{\n            user_id: authData.user.id,\n            profile_data: userData.profile_data || {}\n          }]);\n          if (clientError) {\n            throw clientError;\n          }\n        }\n\n        // If user is a therapist, create therapist record\n        if (userData.role === 'therapist') {\n          const {\n            error: therapistError\n          } = await supabase.from('therapists').insert([{\n            user_id: authData.user.id,\n            credentials: userData.credentials || {},\n            availability: userData.availability || {}\n          }]);\n          if (therapistError) {\n            throw therapistError;\n          }\n        }\n      }\n      return authData;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = async () => {\n    try {\n      setLoading(true);\n\n      // Check if we're using a mock user\n      if (localStorage.getItem('smarttherapist_mock_user')) {\n        localStorage.removeItem('smarttherapist_mock_user');\n        setUser(null);\n        console.log('Mock user signed out');\n      } else {\n        // Regular Supabase sign out\n        const {\n          error\n        } = await supabase.auth.signOut();\n        if (error) {\n          throw error;\n        }\n        setUser(null);\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetPassword = async email => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.resetPasswordForEmail(email);\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updatePassword = async newPassword => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      signIn,\n      signUp,\n      signOut,\n      resetPassword,\n      updatePassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","supabase","supabaseService","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","checkUser","mockUserStr","localStorage","getItem","mockUser","JSON","parse","console","log","e","removeItem","data","session","auth","getSession","message","profile","profileError","from","select","eq","id","single","userData","authListener","onAuthStateChange","event","subscription","unsubscribe","signIn","email","password","signInWithPassword","signUp","authData","authError","insert","role","created_at","Date","clientError","user_id","profile_data","therapistError","credentials","availability","signOut","resetPassword","resetPasswordForEmail","updatePassword","newPassword","updateUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabaseClient';\nimport { supabaseService } from '../services/supabaseService';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const checkUser = async () => {\n      try {\n        // Check for development mode mock user first\n        const mockUserStr = localStorage.getItem('smarttherapist_mock_user');\n        if (mockUserStr) {\n          try {\n            const mockUser = JSON.parse(mockUserStr);\n            console.log('ðŸ”§ Development mode: Using mock user', mockUser);\n            setUser(mockUser);\n            setLoading(false);\n            return;\n          } catch (e) {\n            console.error('Error parsing mock user:', e);\n            localStorage.removeItem('smarttherapist_mock_user');\n          }\n        }\n        \n        // Check Supabase session\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          console.error('Error checking session:', error.message);\n          setLoading(false);\n          return;\n        }\n        \n        if (!session) {\n          // No active session\n          setUser(null);\n          setLoading(false);\n          return;\n        }\n        \n        // Get user profile data\n        const { data: profile, error: profileError } = await supabase\n          .from('users')\n          .select('*')\n          .eq('id', session.user.id)\n          .single();\n          \n        if (profileError) {\n          console.error('Error fetching user profile:', profileError.message);\n        }\n        \n        // Combine auth and profile data\n        const userData = {\n          ...session.user,\n          ...profile\n        };\n        \n        setUser(userData);\n      } catch (error) {\n        console.error('Error in auth context:', error.message);\n        setError(error.message);\n        setUser(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkUser();\n    \n    // Set up auth listener\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        \n        if (event === 'SIGNED_IN') {\n          // Similar logic as above for getting profile data\n          const { data: profile, error: profileError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n            \n          const userData = {\n            ...session.user,\n            ...profile\n          };\n          \n          setUser(userData);\n        } else if (event === 'SIGNED_OUT') {\n          setUser(null);\n        }\n      }\n    );\n    \n    return () => {\n      if (authListener) authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n      \n      if (error) {\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email, password, userData) => {\n    try {\n      setLoading(true);\n      \n      // Register user with Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      \n      if (authError) {\n        throw authError;\n      }\n      \n      if (authData.user) {\n        // Create user profile in database\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert([\n            {\n              id: authData.user.id,\n              email: email,\n              role: userData.role || 'client',\n              created_at: new Date()\n            }\n          ]);\n          \n        if (profileError) {\n          throw profileError;\n        }\n        \n        // If user is a client, create client record\n        if (userData.role === 'client' || !userData.role) {\n          const { error: clientError } = await supabase\n            .from('clients')\n            .insert([\n              {\n                user_id: authData.user.id,\n                profile_data: userData.profile_data || {}\n              }\n            ]);\n            \n          if (clientError) {\n            throw clientError;\n          }\n        }\n        \n        // If user is a therapist, create therapist record\n        if (userData.role === 'therapist') {\n          const { error: therapistError } = await supabase\n            .from('therapists')\n            .insert([\n              {\n                user_id: authData.user.id,\n                credentials: userData.credentials || {},\n                availability: userData.availability || {}\n              }\n            ]);\n            \n          if (therapistError) {\n            throw therapistError;\n          }\n        }\n      }\n      \n      return authData;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      \n      // Check if we're using a mock user\n      if (localStorage.getItem('smarttherapist_mock_user')) {\n        localStorage.removeItem('smarttherapist_mock_user');\n        setUser(null);\n        console.log('Mock user signed out');\n      } else {\n        // Regular Supabase sign out\n        const { error } = await supabase.auth.signOut();\n        \n        if (error) {\n          throw error;\n        }\n        \n        setUser(null);\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (email) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updatePassword = async (newPassword) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        error,\n        signIn,\n        signUp,\n        signOut,\n        resetPassword,\n        updatePassword\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}