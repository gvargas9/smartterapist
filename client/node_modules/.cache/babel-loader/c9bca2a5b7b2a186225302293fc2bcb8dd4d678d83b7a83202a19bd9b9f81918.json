{"ast":null,"code":"import { supabase } from './supabaseClient';\n\n/**\n * Service for handling user-related functionality\n */\nexport const userService = {\n  /**\n   * Get user profile data\n   * @param {string} userId - The user's ID\n   * @returns {Promise<Object>} - The user profile data\n   */\n  async getUserProfile(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('users').select('*').eq('id', userId).single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get client-specific data\n   * @param {string} userId - The client's user ID\n   * @returns {Promise<Object>} - The client data\n   */\n  async getClientData(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('clients').select('*').eq('user_id', userId).single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching client data:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get therapist-specific data\n   * @param {string} userId - The therapist's user ID\n   * @returns {Promise<Object>} - The therapist data\n   */\n  async getTherapistData(userId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('therapists').select('*').eq('user_id', userId).single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error fetching therapist data:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get a list of clients for a therapist\n   * @param {string} therapistId - The therapist's user ID\n   * @returns {Promise<Array>} - Array of client data\n   */\n  async getTherapistClients(therapistId) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('sessions').select('client_id').eq('therapist_id', therapistId).order('start_time', {\n        ascending: false\n      });\n      if (error) throw error;\n\n      // Get unique client IDs\n      const clientIds = [...new Set(data.map(session => session.client_id))];\n\n      // Get client profiles\n      const {\n        data: clients,\n        error: clientsError\n      } = await supabase.from('users').select('*, clients(*)').in('id', clientIds);\n      if (clientsError) throw clientsError;\n      return clients;\n    } catch (error) {\n      console.error('Error fetching therapist clients:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get upcoming sessions for a user\n   * @param {string} userId - The user's ID\n   * @param {string} role - The user's role ('client' or 'therapist')\n   * @returns {Promise<Array>} - Array of upcoming sessions\n   */\n  async getUpcomingSessions(userId, role) {\n    try {\n      const query = supabase.from('sessions').select(`\n          *,\n          clients:users!sessions_client_id_fkey(*),\n          therapists:users!sessions_therapist_id_fkey(*)\n        `).gt('start_time', new Date().toISOString()).order('start_time', {\n        ascending: true\n      });\n\n      // Filter by role\n      if (role === 'client') {\n        query.eq('client_id', userId);\n      } else if (role === 'therapist') {\n        query.eq('therapist_id', userId);\n      }\n      const {\n        data,\n        error\n      } = await query;\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching upcoming sessions:', error);\n      throw error;\n    }\n  },\n  /**\n   * Get recent conversations for a user\n   * @param {string} userId - The user's ID\n   * @param {string} role - The user's role ('client' or 'therapist')\n   * @param {number} limit - Maximum number of conversations to return\n   * @returns {Promise<Array>} - Array of recent conversations\n   */\n  async getRecentConversations(userId, role, limit = 5) {\n    try {\n      const query = supabase.from('conversations').select(`\n          *,\n          clients:users!conversations_client_id_fkey(*),\n          therapists:users!conversations_therapist_id_fkey(*),\n          summaries(*)\n        `).order('start_ts', {\n        ascending: false\n      }).limit(limit);\n\n      // Filter by role\n      if (role === 'client') {\n        query.eq('client_id', userId);\n      } else if (role === 'therapist') {\n        query.eq('therapist_id', userId);\n      }\n      const {\n        data,\n        error\n      } = await query;\n      if (error) throw error;\n      return data || [];\n    } catch (error) {\n      console.error('Error fetching recent conversations:', error);\n      throw error;\n    }\n  },\n  /**\n   * Update user profile\n   * @param {string} userId - The user's ID\n   * @param {Object} profileData - The profile data to update\n   * @returns {Promise<Object>} - The updated profile\n   */\n  async updateUserProfile(userId, profileData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('users').update(profileData).eq('id', userId).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n  },\n  /**\n   * Schedule a session\n   * @param {Object} sessionData - The session data\n   * @returns {Promise<Object>} - The created session\n   */\n  async scheduleSession(sessionData) {\n    try {\n      const {\n        data,\n        error\n      } = await supabase.from('sessions').insert([sessionData]).select().single();\n      if (error) throw error;\n      return data;\n    } catch (error) {\n      console.error('Error scheduling session:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["supabase","userService","getUserProfile","userId","data","error","from","select","eq","single","console","getClientData","getTherapistData","getTherapistClients","therapistId","order","ascending","clientIds","Set","map","session","client_id","clients","clientsError","in","getUpcomingSessions","role","query","gt","Date","toISOString","getRecentConversations","limit","updateUserProfile","profileData","update","scheduleSession","sessionData","insert"],"sources":["/Users/gio/development/smartterapist/client/src/services/userService.js"],"sourcesContent":["import { supabase } from './supabaseClient';\n\n/**\n * Service for handling user-related functionality\n */\nexport const userService = {\n  /**\n   * Get user profile data\n   * @param {string} userId - The user's ID\n   * @returns {Promise<Object>} - The user profile data\n   */\n  async getUserProfile(userId) {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .select('*')\n        .eq('id', userId)\n        .single();\n        \n      if (error) throw error;\n      \n      return data;\n    } catch (error) {\n      console.error('Error fetching user profile:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get client-specific data\n   * @param {string} userId - The client's user ID\n   * @returns {Promise<Object>} - The client data\n   */\n  async getClientData(userId) {\n    try {\n      const { data, error } = await supabase\n        .from('clients')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n        \n      if (error) throw error;\n      \n      return data;\n    } catch (error) {\n      console.error('Error fetching client data:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get therapist-specific data\n   * @param {string} userId - The therapist's user ID\n   * @returns {Promise<Object>} - The therapist data\n   */\n  async getTherapistData(userId) {\n    try {\n      const { data, error } = await supabase\n        .from('therapists')\n        .select('*')\n        .eq('user_id', userId)\n        .single();\n        \n      if (error) throw error;\n      \n      return data;\n    } catch (error) {\n      console.error('Error fetching therapist data:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get a list of clients for a therapist\n   * @param {string} therapistId - The therapist's user ID\n   * @returns {Promise<Array>} - Array of client data\n   */\n  async getTherapistClients(therapistId) {\n    try {\n      const { data, error } = await supabase\n        .from('sessions')\n        .select('client_id')\n        .eq('therapist_id', therapistId)\n        .order('start_time', { ascending: false });\n        \n      if (error) throw error;\n      \n      // Get unique client IDs\n      const clientIds = [...new Set(data.map(session => session.client_id))];\n      \n      // Get client profiles\n      const { data: clients, error: clientsError } = await supabase\n        .from('users')\n        .select('*, clients(*)')\n        .in('id', clientIds);\n        \n      if (clientsError) throw clientsError;\n      \n      return clients;\n    } catch (error) {\n      console.error('Error fetching therapist clients:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get upcoming sessions for a user\n   * @param {string} userId - The user's ID\n   * @param {string} role - The user's role ('client' or 'therapist')\n   * @returns {Promise<Array>} - Array of upcoming sessions\n   */\n  async getUpcomingSessions(userId, role) {\n    try {\n      const query = supabase\n        .from('sessions')\n        .select(`\n          *,\n          clients:users!sessions_client_id_fkey(*),\n          therapists:users!sessions_therapist_id_fkey(*)\n        `)\n        .gt('start_time', new Date().toISOString())\n        .order('start_time', { ascending: true });\n        \n      // Filter by role\n      if (role === 'client') {\n        query.eq('client_id', userId);\n      } else if (role === 'therapist') {\n        query.eq('therapist_id', userId);\n      }\n      \n      const { data, error } = await query;\n        \n      if (error) throw error;\n      \n      return data || [];\n    } catch (error) {\n      console.error('Error fetching upcoming sessions:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get recent conversations for a user\n   * @param {string} userId - The user's ID\n   * @param {string} role - The user's role ('client' or 'therapist')\n   * @param {number} limit - Maximum number of conversations to return\n   * @returns {Promise<Array>} - Array of recent conversations\n   */\n  async getRecentConversations(userId, role, limit = 5) {\n    try {\n      const query = supabase\n        .from('conversations')\n        .select(`\n          *,\n          clients:users!conversations_client_id_fkey(*),\n          therapists:users!conversations_therapist_id_fkey(*),\n          summaries(*)\n        `)\n        .order('start_ts', { ascending: false })\n        .limit(limit);\n        \n      // Filter by role\n      if (role === 'client') {\n        query.eq('client_id', userId);\n      } else if (role === 'therapist') {\n        query.eq('therapist_id', userId);\n      }\n      \n      const { data, error } = await query;\n        \n      if (error) throw error;\n      \n      return data || [];\n    } catch (error) {\n      console.error('Error fetching recent conversations:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Update user profile\n   * @param {string} userId - The user's ID\n   * @param {Object} profileData - The profile data to update\n   * @returns {Promise<Object>} - The updated profile\n   */\n  async updateUserProfile(userId, profileData) {\n    try {\n      const { data, error } = await supabase\n        .from('users')\n        .update(profileData)\n        .eq('id', userId)\n        .select()\n        .single();\n        \n      if (error) throw error;\n      \n      return data;\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Schedule a session\n   * @param {Object} sessionData - The session data\n   * @returns {Promise<Object>} - The created session\n   */\n  async scheduleSession(sessionData) {\n    try {\n      const { data, error } = await supabase\n        .from('sessions')\n        .insert([sessionData])\n        .select()\n        .single();\n        \n      if (error) throw error;\n      \n      return data;\n    } catch (error) {\n      console.error('Error scheduling session:', error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}