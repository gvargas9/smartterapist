{"ast":null,"code":"/**\n * Translation Service\n * \n * This service provides methods to fetch translations from Supabase\n * to support multi-lingual functionality throughout the application.\n */import{supabase}from'./supabaseClient';/**\n * Fetch translations for a specific language\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<Object>} - Object containing key-value pairs of translations\n */export const fetchTranslations=async function(languageCode){let namespace=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'translation';try{const{data,error}=await supabase.from('translations').select('key, value').eq('language_code',languageCode).eq('namespace',namespace);if(error){console.error('Error fetching translations:',error);return{};}// Convert array of key-value pairs to a nested object structure\nconst translations={};data.forEach(_ref=>{let{key,value}=_ref;// Handle nested keys (e.g., 'app.name' becomes { app: { name: value } })\nconst keys=key.split('.');let current=translations;keys.forEach((k,i)=>{if(i===keys.length-1){// Last key, set the value\ncurrent[k]=value;}else{// Create nested object if it doesn't exist\ncurrent[k]=current[k]||{};current=current[k];}});});return translations;}catch(error){console.error('Error in fetchTranslations:',error);return{};}};/**\n * Add a new translation to Supabase\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} key - Translation key (e.g., 'app.name')\n * @param {string} value - Translation value\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<boolean>} - Success status\n */export const addTranslation=async function(languageCode,key,value){let namespace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'translation';try{const{error}=await supabase.from('translations').insert([{language_code:languageCode,namespace,key,value}]);if(error){console.error('Error adding translation:',error);return false;}return true;}catch(error){console.error('Error in addTranslation:',error);return false;}};/**\n * Update an existing translation in Supabase\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} key - Translation key (e.g., 'app.name')\n * @param {string} value - Translation value\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<boolean>} - Success status\n */export const updateTranslation=async function(languageCode,key,value){let namespace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'translation';try{const{error}=await supabase.from('translations').update({value}).eq('language_code',languageCode).eq('namespace',namespace).eq('key',key);if(error){console.error('Error updating translation:',error);return false;}return true;}catch(error){console.error('Error in updateTranslation:',error);return false;}};export default{fetchTranslations,addTranslation,updateTranslation};","map":{"version":3,"names":["supabase","fetchTranslations","languageCode","namespace","arguments","length","undefined","data","error","from","select","eq","console","translations","forEach","_ref","key","value","keys","split","current","k","i","addTranslation","insert","language_code","updateTranslation","update"],"sources":["/Users/gio/development/smartterapist/client/src/services/translationService.js"],"sourcesContent":["/**\n * Translation Service\n * \n * This service provides methods to fetch translations from Supabase\n * to support multi-lingual functionality throughout the application.\n */\n\nimport { supabase } from './supabaseClient';\n\n/**\n * Fetch translations for a specific language\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<Object>} - Object containing key-value pairs of translations\n */\nexport const fetchTranslations = async (languageCode, namespace = 'translation') => {\n  try {\n    const { data, error } = await supabase\n      .from('translations')\n      .select('key, value')\n      .eq('language_code', languageCode)\n      .eq('namespace', namespace);\n    \n    if (error) {\n      console.error('Error fetching translations:', error);\n      return {};\n    }\n    \n    // Convert array of key-value pairs to a nested object structure\n    const translations = {};\n    data.forEach(({ key, value }) => {\n      // Handle nested keys (e.g., 'app.name' becomes { app: { name: value } })\n      const keys = key.split('.');\n      let current = translations;\n      \n      keys.forEach((k, i) => {\n        if (i === keys.length - 1) {\n          // Last key, set the value\n          current[k] = value;\n        } else {\n          // Create nested object if it doesn't exist\n          current[k] = current[k] || {};\n          current = current[k];\n        }\n      });\n    });\n    \n    return translations;\n  } catch (error) {\n    console.error('Error in fetchTranslations:', error);\n    return {};\n  }\n};\n\n/**\n * Add a new translation to Supabase\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} key - Translation key (e.g., 'app.name')\n * @param {string} value - Translation value\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<boolean>} - Success status\n */\nexport const addTranslation = async (languageCode, key, value, namespace = 'translation') => {\n  try {\n    const { error } = await supabase\n      .from('translations')\n      .insert([\n        { language_code: languageCode, namespace, key, value }\n      ]);\n    \n    if (error) {\n      console.error('Error adding translation:', error);\n      return false;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error in addTranslation:', error);\n    return false;\n  }\n};\n\n/**\n * Update an existing translation in Supabase\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} key - Translation key (e.g., 'app.name')\n * @param {string} value - Translation value\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<boolean>} - Success status\n */\nexport const updateTranslation = async (languageCode, key, value, namespace = 'translation') => {\n  try {\n    const { error } = await supabase\n      .from('translations')\n      .update({ value })\n      .eq('language_code', languageCode)\n      .eq('namespace', namespace)\n      .eq('key', key);\n    \n    if (error) {\n      console.error('Error updating translation:', error);\n      return false;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error in updateTranslation:', error);\n    return false;\n  }\n};\n\nexport default {\n  fetchTranslations,\n  addTranslation,\n  updateTranslation\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}