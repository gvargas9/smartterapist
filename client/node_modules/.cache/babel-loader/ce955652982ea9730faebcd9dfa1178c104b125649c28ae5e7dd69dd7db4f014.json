{"ast":null,"code":"import{supabase}from'./supabaseClient';/**\n * Service for handling chat-related functionality\n */export const chatService={/**\n   * Get conversation history for a specific conversation\n   * @param {string} conversationId - The ID of the conversation\n   * @returns {Promise<Array>} - Array of messages\n   */async getConversationHistory(conversationId){try{const{data,error}=await supabase.from('messages').select('*').eq('conversation_id',conversationId).order('timestamp',{ascending:true});if(error)throw error;return data||[];}catch(error){console.error('Error fetching conversation history:',error);throw error;}},/**\n   * Create a new conversation\n   * @param {string} clientId - The client's user ID\n   * @param {string|null} therapistId - The therapist's user ID (null for AI-only)\n   * @returns {Promise<string>} - The new conversation ID\n   */async createConversation(clientId){let therapistId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{const{data,error}=await supabase.from('conversations').insert([{client_id:clientId,therapist_id:therapistId,start_ts:new Date().toISOString()}]).select().single();if(error)throw error;return data.id;}catch(error){console.error('Error creating conversation:',error);throw error;}},/**\n   * End a conversation\n   * @param {string} conversationId - The ID of the conversation to end\n   * @returns {Promise<void>}\n   */async endConversation(conversationId){try{const{error}=await supabase.from('conversations').update({end_ts:new Date().toISOString()}).eq('id',conversationId);if(error)throw error;}catch(error){console.error('Error ending conversation:',error);throw error;}},/**\n   * Save a message to the database\n   * @param {Object} message - The message object\n   * @returns {Promise<Object>} - The saved message\n   */async saveMessage(message){try{const{data,error}=await supabase.from('messages').insert([message]).select().single();if(error)throw error;return data;}catch(error){console.error('Error saving message:',error);throw error;}},/**\n   * Get AI response for a message\n   * @param {string} message - The user's message\n   * @param {string} conversationId - The conversation ID\n   * @param {string} userId - The user's ID\n   * @returns {Promise<Object>} - The AI response\n   */async getAIResponse(message,conversationId,userId){try{// In a real implementation, this would call your backend API\n// For now, we'll simulate a response with a delay\nreturn new Promise(resolve=>{setTimeout(()=>{// Get the current behavior for the user\nthis.getCurrentBehavior(userId).then(behavior=>{let responseText='I understand how you feel. Can you tell me more about that?';// Simple keyword-based responses for demo purposes\nif(message.toLowerCase().includes('anxious')||message.toLowerCase().includes('anxiety')){responseText=`I notice you mentioned feeling anxious. ${(behavior===null||behavior===void 0?void 0:behavior.name)==='CBT-focused'?'Let\\'s identify what thoughts might be contributing to this anxiety. Can you share what\\'s going through your mind?':'Taking slow, deep breaths can help in the moment. Would you like to try a brief breathing exercise together?'}`;}else if(message.toLowerCase().includes('sad')||message.toLowerCase().includes('depressed')){responseText=`I'm sorry to hear you're feeling down. ${(behavior===null||behavior===void 0?void 0:behavior.name)==='Motivational'?\"What's one small thing you could do today that might bring you a moment of joy?\":\"Depression can make everything feel more difficult. Have you noticed any patterns to when these feelings are strongest?\"}`;}else if(message.toLowerCase().includes('work')||message.toLowerCase().includes('job')){responseText=`Work situations can be challenging. ${(behavior===null||behavior===void 0?void 0:behavior.name)==='Mindfulness'?\"When you're at work, what helps you stay grounded in the present moment?\":\"How do you think your thoughts about work are affecting your emotions and behaviors?\"}`;}resolve({message:responseText,sentiment_score:Math.random()*0.5+0.5// Random positive sentiment between 0.5-1.0\n});});},1000);});}catch(error){console.error('Error getting AI response:',error);throw error;}},/**\n   * Get the current active behavior for a user\n   * @param {string} userId - The user's ID\n   * @returns {Promise<Object|null>} - The active behavior or null\n   */async getCurrentBehavior(userId){try{const{data,error}=await supabase.from('client_behaviors').select('behaviors(*)').eq('client_id',userId).eq('active',true).single();if(error&&error.code!=='PGRST116')throw error;return(data===null||data===void 0?void 0:data.behaviors)||null;}catch(error){console.error('Error getting current behavior:',error);return null;}},/**\n   * Generate a summary for a conversation\n   * @param {string} conversationId - The conversation ID\n   * @returns {Promise<Object>} - The generated summary\n   */async generateSummary(conversationId){try{// In a real implementation, this would call your backend API\n// For now, we'll create a mock summary\nconst{data:messages,error}=await supabase.from('messages').select('*').eq('conversation_id',conversationId).order('timestamp',{ascending:true});if(error)throw error;// Calculate simple sentiment metrics\nconst sentimentScores=messages.filter(m=>m.sentiment_score!==null).map(m=>m.sentiment_score);const sentimentMetrics={average:sentimentScores.length>0?sentimentScores.reduce((sum,score)=>sum+score,0)/sentimentScores.length:0.5,min:sentimentScores.length>0?Math.min(...sentimentScores):0.5,max:sentimentScores.length>0?Math.max(...sentimentScores):0.5,trend:sentimentScores.length>1&&sentimentScores[sentimentScores.length-1]>sentimentScores[0]?'improving':sentimentScores.length>1&&sentimentScores[sentimentScores.length-1]<sentimentScores[0]?'declining':'stable'};// Create a simple summary based on message content\nlet summaryText='Session focused on ';if(messages.some(m=>m.text.toLowerCase().includes('anxiety')||m.text.toLowerCase().includes('anxious'))){summaryText+='anxiety management. ';}else if(messages.some(m=>m.text.toLowerCase().includes('work')||m.text.toLowerCase().includes('job'))){summaryText+='work-related stress. ';}else if(messages.some(m=>m.text.toLowerCase().includes('sad')||m.text.toLowerCase().includes('depressed'))){summaryText+='mood improvement strategies. ';}else{summaryText+='general well-being. ';}summaryText+=`Overall sentiment was ${sentimentMetrics.trend}. `;if(sentimentMetrics.trend==='improving'){summaryText+='Client showed progress during the session.';}else if(sentimentMetrics.trend==='declining'){summaryText+='Client may need additional support in future sessions.';}else{summaryText+='Client maintained consistent engagement throughout the session.';}// Save the summary to the database\nconst{data:summary,error:summaryError}=await supabase.from('summaries').insert([{conversation_id:conversationId,summary_text:summaryText,sentiment_metrics:sentimentMetrics}]).select().single();if(summaryError)throw summaryError;return summary;}catch(error){console.error('Error generating summary:',error);throw error;}}};","map":{"version":3,"names":["supabase","chatService","getConversationHistory","conversationId","data","error","from","select","eq","order","ascending","console","createConversation","clientId","therapistId","arguments","length","undefined","insert","client_id","therapist_id","start_ts","Date","toISOString","single","id","endConversation","update","end_ts","saveMessage","message","getAIResponse","userId","Promise","resolve","setTimeout","getCurrentBehavior","then","behavior","responseText","toLowerCase","includes","name","sentiment_score","Math","random","code","behaviors","generateSummary","messages","sentimentScores","filter","m","map","sentimentMetrics","average","reduce","sum","score","min","max","trend","summaryText","some","text","summary","summaryError","conversation_id","summary_text","sentiment_metrics"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/services/chatService.js"],"sourcesContent":["import { supabase } from './supabaseClient';\n\n/**\n * Service for handling chat-related functionality\n */\nexport const chatService = {\n  /**\n   * Get conversation history for a specific conversation\n   * @param {string} conversationId - The ID of the conversation\n   * @returns {Promise<Array>} - Array of messages\n   */\n  async getConversationHistory(conversationId) {\n    try {\n      const { data, error } = await supabase\n        .from('messages')\n        .select('*')\n        .eq('conversation_id', conversationId)\n        .order('timestamp', { ascending: true });\n        \n      if (error) throw error;\n      \n      return data || [];\n    } catch (error) {\n      console.error('Error fetching conversation history:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Create a new conversation\n   * @param {string} clientId - The client's user ID\n   * @param {string|null} therapistId - The therapist's user ID (null for AI-only)\n   * @returns {Promise<string>} - The new conversation ID\n   */\n  async createConversation(clientId, therapistId = null) {\n    try {\n      const { data, error } = await supabase\n        .from('conversations')\n        .insert([\n          {\n            client_id: clientId,\n            therapist_id: therapistId,\n            start_ts: new Date().toISOString()\n          }\n        ])\n        .select()\n        .single();\n        \n      if (error) throw error;\n      \n      return data.id;\n    } catch (error) {\n      console.error('Error creating conversation:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * End a conversation\n   * @param {string} conversationId - The ID of the conversation to end\n   * @returns {Promise<void>}\n   */\n  async endConversation(conversationId) {\n    try {\n      const { error } = await supabase\n        .from('conversations')\n        .update({ end_ts: new Date().toISOString() })\n        .eq('id', conversationId);\n        \n      if (error) throw error;\n    } catch (error) {\n      console.error('Error ending conversation:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Save a message to the database\n   * @param {Object} message - The message object\n   * @returns {Promise<Object>} - The saved message\n   */\n  async saveMessage(message) {\n    try {\n      const { data, error } = await supabase\n        .from('messages')\n        .insert([message])\n        .select()\n        .single();\n        \n      if (error) throw error;\n      \n      return data;\n    } catch (error) {\n      console.error('Error saving message:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get AI response for a message\n   * @param {string} message - The user's message\n   * @param {string} conversationId - The conversation ID\n   * @param {string} userId - The user's ID\n   * @returns {Promise<Object>} - The AI response\n   */\n  async getAIResponse(message, conversationId, userId) {\n    try {\n      // In a real implementation, this would call your backend API\n      // For now, we'll simulate a response with a delay\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          // Get the current behavior for the user\n          this.getCurrentBehavior(userId).then(behavior => {\n            let responseText = 'I understand how you feel. Can you tell me more about that?';\n            \n            // Simple keyword-based responses for demo purposes\n            if (message.toLowerCase().includes('anxious') || message.toLowerCase().includes('anxiety')) {\n              responseText = `I notice you mentioned feeling anxious. ${behavior?.name === 'CBT-focused' ? \n                'Let\\'s identify what thoughts might be contributing to this anxiety. Can you share what\\'s going through your mind?' : \n                'Taking slow, deep breaths can help in the moment. Would you like to try a brief breathing exercise together?'}`;\n            } else if (message.toLowerCase().includes('sad') || message.toLowerCase().includes('depressed')) {\n              responseText = `I'm sorry to hear you're feeling down. ${behavior?.name === 'Motivational' ? \n                \"What's one small thing you could do today that might bring you a moment of joy?\" : \n                \"Depression can make everything feel more difficult. Have you noticed any patterns to when these feelings are strongest?\"}`;\n            } else if (message.toLowerCase().includes('work') || message.toLowerCase().includes('job')) {\n              responseText = `Work situations can be challenging. ${behavior?.name === 'Mindfulness' ? \n                \"When you're at work, what helps you stay grounded in the present moment?\" : \n                \"How do you think your thoughts about work are affecting your emotions and behaviors?\"}`;\n            }\n            \n            resolve({\n              message: responseText,\n              sentiment_score: Math.random() * 0.5 + 0.5 // Random positive sentiment between 0.5-1.0\n            });\n          });\n        }, 1000);\n      });\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Get the current active behavior for a user\n   * @param {string} userId - The user's ID\n   * @returns {Promise<Object|null>} - The active behavior or null\n   */\n  async getCurrentBehavior(userId) {\n    try {\n      const { data, error } = await supabase\n        .from('client_behaviors')\n        .select('behaviors(*)')\n        .eq('client_id', userId)\n        .eq('active', true)\n        .single();\n        \n      if (error && error.code !== 'PGRST116') throw error;\n      \n      return data?.behaviors || null;\n    } catch (error) {\n      console.error('Error getting current behavior:', error);\n      return null;\n    }\n  },\n  \n  /**\n   * Generate a summary for a conversation\n   * @param {string} conversationId - The conversation ID\n   * @returns {Promise<Object>} - The generated summary\n   */\n  async generateSummary(conversationId) {\n    try {\n      // In a real implementation, this would call your backend API\n      // For now, we'll create a mock summary\n      const { data: messages, error } = await supabase\n        .from('messages')\n        .select('*')\n        .eq('conversation_id', conversationId)\n        .order('timestamp', { ascending: true });\n        \n      if (error) throw error;\n      \n      // Calculate simple sentiment metrics\n      const sentimentScores = messages\n        .filter(m => m.sentiment_score !== null)\n        .map(m => m.sentiment_score);\n        \n      const sentimentMetrics = {\n        average: sentimentScores.length > 0 \n          ? sentimentScores.reduce((sum, score) => sum + score, 0) / sentimentScores.length \n          : 0.5,\n        min: sentimentScores.length > 0 \n          ? Math.min(...sentimentScores) \n          : 0.5,\n        max: sentimentScores.length > 0 \n          ? Math.max(...sentimentScores) \n          : 0.5,\n        trend: sentimentScores.length > 1 && sentimentScores[sentimentScores.length - 1] > sentimentScores[0]\n          ? 'improving'\n          : sentimentScores.length > 1 && sentimentScores[sentimentScores.length - 1] < sentimentScores[0]\n          ? 'declining'\n          : 'stable'\n      };\n      \n      // Create a simple summary based on message content\n      let summaryText = 'Session focused on ';\n      \n      if (messages.some(m => m.text.toLowerCase().includes('anxiety') || m.text.toLowerCase().includes('anxious'))) {\n        summaryText += 'anxiety management. ';\n      } else if (messages.some(m => m.text.toLowerCase().includes('work') || m.text.toLowerCase().includes('job'))) {\n        summaryText += 'work-related stress. ';\n      } else if (messages.some(m => m.text.toLowerCase().includes('sad') || m.text.toLowerCase().includes('depressed'))) {\n        summaryText += 'mood improvement strategies. ';\n      } else {\n        summaryText += 'general well-being. ';\n      }\n      \n      summaryText += `Overall sentiment was ${sentimentMetrics.trend}. `;\n      \n      if (sentimentMetrics.trend === 'improving') {\n        summaryText += 'Client showed progress during the session.';\n      } else if (sentimentMetrics.trend === 'declining') {\n        summaryText += 'Client may need additional support in future sessions.';\n      } else {\n        summaryText += 'Client maintained consistent engagement throughout the session.';\n      }\n      \n      // Save the summary to the database\n      const { data: summary, error: summaryError } = await supabase\n        .from('summaries')\n        .insert([\n          {\n            conversation_id: conversationId,\n            summary_text: summaryText,\n            sentiment_metrics: sentimentMetrics\n          }\n        ])\n        .select()\n        .single();\n        \n      if (summaryError) throw summaryError;\n      \n      return summary;\n    } catch (error) {\n      console.error('Error generating summary:', error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}