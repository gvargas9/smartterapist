{"ast":null,"code":"/**\n * User Model\n * \n * Provides methods for interacting with the users table in Supabase.\n */\n\nimport { supabase } from '../services/supabaseClient';\nexport class UserModel {\n  /**\n   * Get a user by ID\n   * @param id - User ID\n   * @returns The user or null if not found\n   */\n  static async getById(id) {\n    const {\n      data,\n      error\n    } = await supabase.from('users').select('*').eq('id', id).single();\n    if (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Get a user by email\n   * @param email - User email\n   * @returns The user or null if not found\n   */\n  static async getByEmail(email) {\n    const {\n      data,\n      error\n    } = await supabase.from('users').select('*').eq('email', email).single();\n    if (error) {\n      console.error('Error fetching user by email:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Get users by role\n   * @param role - User role (client, therapist, admin)\n   * @returns Array of users with the specified role\n   */\n  static async getByRole(role) {\n    const {\n      data,\n      error\n    } = await supabase.from('users').select('*').eq('role', role);\n    if (error) {\n      console.error('Error fetching users by role:', error);\n      return [];\n    }\n    return data || [];\n  }\n\n  /**\n   * Create a new user\n   * @param user - User data to insert\n   * @returns The created user or null if there was an error\n   */\n  static async create(user) {\n    const {\n      data,\n      error\n    } = await supabase.from('users').insert(user).select().single();\n    if (error) {\n      console.error('Error creating user:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Update a user\n   * @param id - User ID\n   * @param updates - User data to update\n   * @returns The updated user or null if there was an error\n   */\n  static async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('users').update(updates).eq('id', id).select().single();\n    if (error) {\n      console.error('Error updating user:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Delete a user\n   * @param id - User ID\n   * @returns True if successful, false otherwise\n   */\n  static async delete(id) {\n    const {\n      error\n    } = await supabase.from('users').delete().eq('id', id);\n    if (error) {\n      console.error('Error deleting user:', error);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * List all users with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of users\n   */\n  static async list(page = 0, limit = 10) {\n    const from = page * limit;\n    const to = from + limit - 1;\n    const {\n      data,\n      error\n    } = await supabase.from('users').select('*').range(from, to).order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Error listing users:', error);\n      return [];\n    }\n    return data || [];\n  }\n\n  /**\n   * Count total number of users\n   * @returns Total count of users\n   */\n  static async count() {\n    const {\n      count,\n      error\n    } = await supabase.from('users').select('*', {\n      count: 'exact',\n      head: true\n    });\n    if (error) {\n      console.error('Error counting users:', error);\n      return 0;\n    }\n    return count || 0;\n  }\n}","map":{"version":3,"names":["supabase","UserModel","getById","id","data","error","from","select","eq","single","console","getByEmail","email","getByRole","role","create","user","insert","update","updates","delete","list","page","limit","to","range","order","ascending","count","head"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/models/UserModel.ts"],"sourcesContent":["/**\n * User Model\n * \n * Provides methods for interacting with the users table in Supabase.\n */\n\nimport { supabase } from '../services/supabaseClient';\nimport { User, InsertTables, UpdateTables } from '../types/supabase';\n\nexport class UserModel {\n  /**\n   * Get a user by ID\n   * @param id - User ID\n   * @returns The user or null if not found\n   */\n  static async getById(id: string): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching user:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get a user by email\n   * @param email - User email\n   * @returns The user or null if not found\n   */\n  static async getByEmail(email: string): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('email', email)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching user by email:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get users by role\n   * @param role - User role (client, therapist, admin)\n   * @returns Array of users with the specified role\n   */\n  static async getByRole(role: 'client' | 'therapist' | 'admin'): Promise<User[]> {\n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .eq('role', role);\n    \n    if (error) {\n      console.error('Error fetching users by role:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Create a new user\n   * @param user - User data to insert\n   * @returns The created user or null if there was an error\n   */\n  static async create(user: InsertTables<'users'>): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .insert(user)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating user:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Update a user\n   * @param id - User ID\n   * @param updates - User data to update\n   * @returns The updated user or null if there was an error\n   */\n  static async update(id: string, updates: UpdateTables<'users'>): Promise<User | null> {\n    const { data, error } = await supabase\n      .from('users')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating user:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Delete a user\n   * @param id - User ID\n   * @returns True if successful, false otherwise\n   */\n  static async delete(id: string): Promise<boolean> {\n    const { error } = await supabase\n      .from('users')\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      console.error('Error deleting user:', error);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * List all users with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of users\n   */\n  static async list(page: number = 0, limit: number = 10): Promise<User[]> {\n    const from = page * limit;\n    const to = from + limit - 1;\n    \n    const { data, error } = await supabase\n      .from('users')\n      .select('*')\n      .range(from, to)\n      .order('created_at', { ascending: false });\n    \n    if (error) {\n      console.error('Error listing users:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Count total number of users\n   * @returns Total count of users\n   */\n  static async count(): Promise<number> {\n    const { count, error } = await supabase\n      .from('users')\n      .select('*', { count: 'exact', head: true });\n    \n    if (error) {\n      console.error('Error counting users:', error);\n      return 0;\n    }\n    \n    return count || 0;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}