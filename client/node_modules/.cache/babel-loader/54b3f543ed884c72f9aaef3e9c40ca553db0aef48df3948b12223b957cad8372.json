{"ast":null,"code":"/**\n * Therapist Model\n * \n * Provides methods for interacting with the therapists table in Supabase.\n */import{supabase}from'../services/supabaseClient';export class TherapistModel{/**\n   * Get a therapist by ID\n   * @param id - Therapist ID\n   * @returns The therapist or null if not found\n   */static async getById(id){const{data,error}=await supabase.from('therapists').select('*').eq('id',id).single();if(error){console.error('Error fetching therapist:',error);return null;}return data;}/**\n   * Get a therapist by user ID\n   * @param userId - User ID\n   * @returns The therapist or null if not found\n   */static async getByUserId(userId){const{data,error}=await supabase.from('therapists').select('*').eq('user_id',userId).single();if(error){console.error('Error fetching therapist by user ID:',error);return null;}return data;}/**\n   * Get therapists with full user data\n   * @param filters - Optional filters to apply\n   * @returns Array of therapists with user data\n   */static async getWithUserData(filters){let query=supabase.from('therapists').select(`\n        *,\n        users:user_id (*)\n      `);// Apply filters if provided\nif(filters){Object.entries(filters).forEach(_ref=>{let[key,value]=_ref;query=query.eq(key,value);});}const{data,error}=await query;if(error){console.error('Error fetching therapists with user data:',error);return[];}return data||[];}/**\n   * Get therapists by specialty\n   * @param specialty - Specialty to search for\n   * @returns Array of therapists with the specified specialty\n   */static async getBySpecialty(specialty){const{data,error}=await supabase.from('therapists').select('*').contains('specialties',[specialty]);if(error){console.error('Error fetching therapists by specialty:',error);return[];}return data||[];}/**\n   * Create a new therapist\n   * @param therapist - Therapist data to insert\n   * @returns The created therapist or null if there was an error\n   */static async create(therapist){const{data,error}=await supabase.from('therapists').insert(therapist).select().single();if(error){console.error('Error creating therapist:',error);return null;}return data;}/**\n   * Update a therapist\n   * @param id - Therapist ID\n   * @param updates - Therapist data to update\n   * @returns The updated therapist or null if there was an error\n   */static async update(id,updates){const{data,error}=await supabase.from('therapists').update(updates).eq('id',id).select().single();if(error){console.error('Error updating therapist:',error);return null;}return data;}/**\n   * Delete a therapist\n   * @param id - Therapist ID\n   * @returns True if successful, false otherwise\n   */static async delete(id){const{error}=await supabase.from('therapists').delete().eq('id',id);if(error){console.error('Error deleting therapist:',error);return false;}return true;}/**\n   * Get all clients assigned to a therapist\n   * @param therapistId - Therapist ID\n   * @returns Array of clients assigned to the therapist\n   */static async getClients(therapistId){const{data,error}=await supabase.from('clients').select(`\n        *,\n        users:user_id (*)\n      `).eq('therapist_id',therapistId);if(error){console.error('Error fetching therapist clients:',error);return[];}return data||[];}/**\n   * Update therapist availability\n   * @param id - Therapist ID\n   * @param availability - Availability data\n   * @returns The updated therapist or null if there was an error\n   */static async updateAvailability(id,availability){const{data,error}=await supabase.from('therapists').update({availability}).eq('id',id).select().single();if(error){console.error('Error updating therapist availability:',error);return null;}return data;}/**\n   * List all therapists with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of therapists\n   */static async list(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const from=page*limit;const to=from+limit-1;const{data,error}=await supabase.from('therapists').select('*').range(from,to).order('created_at',{ascending:false});if(error){console.error('Error listing therapists:',error);return[];}return data||[];}/**\n   * Count total number of therapists\n   * @returns Total count of therapists\n   */static async count(){const{count,error}=await supabase.from('therapists').select('*',{count:'exact',head:true});if(error){console.error('Error counting therapists:',error);return 0;}return count||0;}}","map":{"version":3,"names":["supabase","TherapistModel","getById","id","data","error","from","select","eq","single","console","getByUserId","userId","getWithUserData","filters","query","Object","entries","forEach","_ref","key","value","getBySpecialty","specialty","contains","create","therapist","insert","update","updates","delete","getClients","therapistId","updateAvailability","availability","list","page","arguments","length","undefined","limit","to","range","order","ascending","count","head"],"sources":["/Users/gio/development/smartterapist/client/src/models/TherapistModel.ts"],"sourcesContent":["/**\n * Therapist Model\n * \n * Provides methods for interacting with the therapists table in Supabase.\n */\n\nimport { supabase } from '../services/supabaseClient';\nimport { Therapist, InsertTables, UpdateTables } from '../types/supabase';\n\nexport class TherapistModel {\n  /**\n   * Get a therapist by ID\n   * @param id - Therapist ID\n   * @returns The therapist or null if not found\n   */\n  static async getById(id: string): Promise<Therapist | null> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching therapist:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get a therapist by user ID\n   * @param userId - User ID\n   * @returns The therapist or null if not found\n   */\n  static async getByUserId(userId: string): Promise<Therapist | null> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .select('*')\n      .eq('user_id', userId)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching therapist by user ID:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get therapists with full user data\n   * @param filters - Optional filters to apply\n   * @returns Array of therapists with user data\n   */\n  static async getWithUserData(filters?: Record<string, any>): Promise<any[]> {\n    let query = supabase\n      .from('therapists')\n      .select(`\n        *,\n        users:user_id (*)\n      `);\n    \n    // Apply filters if provided\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        query = query.eq(key, value);\n      });\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      console.error('Error fetching therapists with user data:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Get therapists by specialty\n   * @param specialty - Specialty to search for\n   * @returns Array of therapists with the specified specialty\n   */\n  static async getBySpecialty(specialty: string): Promise<Therapist[]> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .select('*')\n      .contains('specialties', [specialty]);\n    \n    if (error) {\n      console.error('Error fetching therapists by specialty:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Create a new therapist\n   * @param therapist - Therapist data to insert\n   * @returns The created therapist or null if there was an error\n   */\n  static async create(therapist: InsertTables<'therapists'>): Promise<Therapist | null> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .insert(therapist)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating therapist:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Update a therapist\n   * @param id - Therapist ID\n   * @param updates - Therapist data to update\n   * @returns The updated therapist or null if there was an error\n   */\n  static async update(id: string, updates: UpdateTables<'therapists'>): Promise<Therapist | null> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating therapist:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Delete a therapist\n   * @param id - Therapist ID\n   * @returns True if successful, false otherwise\n   */\n  static async delete(id: string): Promise<boolean> {\n    const { error } = await supabase\n      .from('therapists')\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      console.error('Error deleting therapist:', error);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Get all clients assigned to a therapist\n   * @param therapistId - Therapist ID\n   * @returns Array of clients assigned to the therapist\n   */\n  static async getClients(therapistId: string): Promise<any[]> {\n    const { data, error } = await supabase\n      .from('clients')\n      .select(`\n        *,\n        users:user_id (*)\n      `)\n      .eq('therapist_id', therapistId);\n    \n    if (error) {\n      console.error('Error fetching therapist clients:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Update therapist availability\n   * @param id - Therapist ID\n   * @param availability - Availability data\n   * @returns The updated therapist or null if there was an error\n   */\n  static async updateAvailability(id: string, availability: any): Promise<Therapist | null> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .update({ availability })\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating therapist availability:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * List all therapists with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of therapists\n   */\n  static async list(page: number = 0, limit: number = 10): Promise<Therapist[]> {\n    const from = page * limit;\n    const to = from + limit - 1;\n    \n    const { data, error } = await supabase\n      .from('therapists')\n      .select('*')\n      .range(from, to)\n      .order('created_at', { ascending: false });\n    \n    if (error) {\n      console.error('Error listing therapists:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Count total number of therapists\n   * @returns Total count of therapists\n   */\n  static async count(): Promise<number> {\n    const { count, error } = await supabase\n      .from('therapists')\n      .select('*', { count: 'exact', head: true });\n    \n    if (error) {\n      console.error('Error counting therapists:', error);\n      return 0;\n    }\n    \n    return count || 0;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}