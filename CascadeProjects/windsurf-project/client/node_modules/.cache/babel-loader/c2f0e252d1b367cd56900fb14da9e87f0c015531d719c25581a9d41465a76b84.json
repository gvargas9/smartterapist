{"ast":null,"code":"/**\n * Translation Service\n * \n * This service provides methods to fetch translations from Supabase\n * to support multi-lingual functionality throughout the application.\n */\n\nimport { supabase } from './supabaseClient';\n\n/**\n * Fetch translations for a specific language\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<Object>} - Object containing key-value pairs of translations\n */\nexport const fetchTranslations = async (languageCode, namespace = 'translation') => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('translations').select('key, value').eq('language_code', languageCode).eq('namespace', namespace);\n    if (error) {\n      console.error('Error fetching translations:', error);\n      return {};\n    }\n\n    // Convert array of key-value pairs to a nested object structure\n    const translations = {};\n    data.forEach(({\n      key,\n      value\n    }) => {\n      // Handle nested keys (e.g., 'app.name' becomes { app: { name: value } })\n      const keys = key.split('.');\n      let current = translations;\n      keys.forEach((k, i) => {\n        if (i === keys.length - 1) {\n          // Last key, set the value\n          current[k] = value;\n        } else {\n          // Create nested object if it doesn't exist\n          current[k] = current[k] || {};\n          current = current[k];\n        }\n      });\n    });\n    return translations;\n  } catch (error) {\n    console.error('Error in fetchTranslations:', error);\n    return {};\n  }\n};\n\n/**\n * Add a new translation to Supabase\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} key - Translation key (e.g., 'app.name')\n * @param {string} value - Translation value\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<boolean>} - Success status\n */\nexport const addTranslation = async (languageCode, key, value, namespace = 'translation') => {\n  try {\n    const {\n      error\n    } = await supabase.from('translations').insert([{\n      language_code: languageCode,\n      namespace,\n      key,\n      value\n    }]);\n    if (error) {\n      console.error('Error adding translation:', error);\n      return false;\n    }\n    return true;\n  } catch (error) {\n    console.error('Error in addTranslation:', error);\n    return false;\n  }\n};\n\n/**\n * Update an existing translation in Supabase\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} key - Translation key (e.g., 'app.name')\n * @param {string} value - Translation value\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<boolean>} - Success status\n */\nexport const updateTranslation = async (languageCode, key, value, namespace = 'translation') => {\n  try {\n    const {\n      error\n    } = await supabase.from('translations').update({\n      value\n    }).eq('language_code', languageCode).eq('namespace', namespace).eq('key', key);\n    if (error) {\n      console.error('Error updating translation:', error);\n      return false;\n    }\n    return true;\n  } catch (error) {\n    console.error('Error in updateTranslation:', error);\n    return false;\n  }\n};\nexport default {\n  fetchTranslations,\n  addTranslation,\n  updateTranslation\n};","map":{"version":3,"names":["supabase","fetchTranslations","languageCode","namespace","data","error","from","select","eq","console","translations","forEach","key","value","keys","split","current","k","i","length","addTranslation","insert","language_code","updateTranslation","update"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/services/translationService.js"],"sourcesContent":["/**\n * Translation Service\n * \n * This service provides methods to fetch translations from Supabase\n * to support multi-lingual functionality throughout the application.\n */\n\nimport { supabase } from './supabaseClient';\n\n/**\n * Fetch translations for a specific language\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<Object>} - Object containing key-value pairs of translations\n */\nexport const fetchTranslations = async (languageCode, namespace = 'translation') => {\n  try {\n    const { data, error } = await supabase\n      .from('translations')\n      .select('key, value')\n      .eq('language_code', languageCode)\n      .eq('namespace', namespace);\n    \n    if (error) {\n      console.error('Error fetching translations:', error);\n      return {};\n    }\n    \n    // Convert array of key-value pairs to a nested object structure\n    const translations = {};\n    data.forEach(({ key, value }) => {\n      // Handle nested keys (e.g., 'app.name' becomes { app: { name: value } })\n      const keys = key.split('.');\n      let current = translations;\n      \n      keys.forEach((k, i) => {\n        if (i === keys.length - 1) {\n          // Last key, set the value\n          current[k] = value;\n        } else {\n          // Create nested object if it doesn't exist\n          current[k] = current[k] || {};\n          current = current[k];\n        }\n      });\n    });\n    \n    return translations;\n  } catch (error) {\n    console.error('Error in fetchTranslations:', error);\n    return {};\n  }\n};\n\n/**\n * Add a new translation to Supabase\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} key - Translation key (e.g., 'app.name')\n * @param {string} value - Translation value\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<boolean>} - Success status\n */\nexport const addTranslation = async (languageCode, key, value, namespace = 'translation') => {\n  try {\n    const { error } = await supabase\n      .from('translations')\n      .insert([\n        { language_code: languageCode, namespace, key, value }\n      ]);\n    \n    if (error) {\n      console.error('Error adding translation:', error);\n      return false;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error in addTranslation:', error);\n    return false;\n  }\n};\n\n/**\n * Update an existing translation in Supabase\n * @param {string} languageCode - Language code (e.g., 'en', 'es')\n * @param {string} key - Translation key (e.g., 'app.name')\n * @param {string} value - Translation value\n * @param {string} namespace - Translation namespace (default: 'translation')\n * @returns {Promise<boolean>} - Success status\n */\nexport const updateTranslation = async (languageCode, key, value, namespace = 'translation') => {\n  try {\n    const { error } = await supabase\n      .from('translations')\n      .update({ value })\n      .eq('language_code', languageCode)\n      .eq('namespace', namespace)\n      .eq('key', key);\n    \n    if (error) {\n      console.error('Error updating translation:', error);\n      return false;\n    }\n    \n    return true;\n  } catch (error) {\n    console.error('Error in updateTranslation:', error);\n    return false;\n  }\n};\n\nexport default {\n  fetchTranslations,\n  addTranslation,\n  updateTranslation\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}