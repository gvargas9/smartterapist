{"ast":null,"code":"/**\n * Client Model\n * \n * Provides methods for interacting with the clients table in Supabase.\n */import{supabase}from'../services/supabaseClient';export class ClientModel{/**\n   * Get a client by ID\n   * @param id - Client ID\n   * @returns The client or null if not found\n   */static async getById(id){const{data,error}=await supabase.from('clients').select('*').eq('id',id).single();if(error){console.error('Error fetching client:',error);return null;}return data;}/**\n   * Get a client by user ID\n   * @param userId - User ID\n   * @returns The client or null if not found\n   */static async getByUserId(userId){const{data,error}=await supabase.from('clients').select('*').eq('user_id',userId).single();if(error){console.error('Error fetching client by user ID:',error);return null;}return data;}/**\n   * Get clients by therapist ID\n   * @param therapistId - Therapist ID\n   * @returns Array of clients assigned to the therapist\n   */static async getByTherapistId(therapistId){const{data,error}=await supabase.from('clients').select('*').eq('therapist_id',therapistId);if(error){console.error('Error fetching clients by therapist ID:',error);return[];}return data||[];}/**\n   * Get clients with full user data\n   * @param filters - Optional filters to apply\n   * @returns Array of clients with user data\n   */static async getWithUserData(filters){let query=supabase.from('clients').select(`\n        *,\n        users:user_id (*)\n      `);// Apply filters if provided\nif(filters){Object.entries(filters).forEach(_ref=>{let[key,value]=_ref;query=query.eq(key,value);});}const{data,error}=await query;if(error){console.error('Error fetching clients with user data:',error);return[];}return data||[];}/**\n   * Create a new client\n   * @param client - Client data to insert\n   * @returns The created client or null if there was an error\n   */static async create(client){const{data,error}=await supabase.from('clients').insert(client).select().single();if(error){console.error('Error creating client:',error);return null;}return data;}/**\n   * Update a client\n   * @param id - Client ID\n   * @param updates - Client data to update\n   * @returns The updated client or null if there was an error\n   */static async update(id,updates){const{data,error}=await supabase.from('clients').update(updates).eq('id',id).select().single();if(error){console.error('Error updating client:',error);return null;}return data;}/**\n   * Delete a client\n   * @param id - Client ID\n   * @returns True if successful, false otherwise\n   */static async delete(id){const{error}=await supabase.from('clients').delete().eq('id',id);if(error){console.error('Error deleting client:',error);return false;}return true;}/**\n   * Assign a client to a therapist\n   * @param clientId - Client ID\n   * @param therapistId - Therapist ID\n   * @returns The updated client or null if there was an error\n   */static async assignToTherapist(clientId,therapistId){const{data,error}=await supabase.from('clients').update({therapist_id:therapistId}).eq('id',clientId).select().single();if(error){console.error('Error assigning client to therapist:',error);return null;}return data;}/**\n   * List all clients with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of clients\n   */static async list(){let page=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const from=page*limit;const to=from+limit-1;const{data,error}=await supabase.from('clients').select('*').range(from,to).order('created_at',{ascending:false});if(error){console.error('Error listing clients:',error);return[];}return data||[];}/**\n   * Count total number of clients\n   * @returns Total count of clients\n   */static async count(){const{count,error}=await supabase.from('clients').select('*',{count:'exact',head:true});if(error){console.error('Error counting clients:',error);return 0;}return count||0;}}","map":{"version":3,"names":["supabase","ClientModel","getById","id","data","error","from","select","eq","single","console","getByUserId","userId","getByTherapistId","therapistId","getWithUserData","filters","query","Object","entries","forEach","_ref","key","value","create","client","insert","update","updates","delete","assignToTherapist","clientId","therapist_id","list","page","arguments","length","undefined","limit","to","range","order","ascending","count","head"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/models/ClientModel.ts"],"sourcesContent":["/**\n * Client Model\n * \n * Provides methods for interacting with the clients table in Supabase.\n */\n\nimport { supabase } from '../services/supabaseClient';\nimport { Client, InsertTables, UpdateTables } from '../types/supabase';\n\nexport class ClientModel {\n  /**\n   * Get a client by ID\n   * @param id - Client ID\n   * @returns The client or null if not found\n   */\n  static async getById(id: string): Promise<Client | null> {\n    const { data, error } = await supabase\n      .from('clients')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching client:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get a client by user ID\n   * @param userId - User ID\n   * @returns The client or null if not found\n   */\n  static async getByUserId(userId: string): Promise<Client | null> {\n    const { data, error } = await supabase\n      .from('clients')\n      .select('*')\n      .eq('user_id', userId)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching client by user ID:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get clients by therapist ID\n   * @param therapistId - Therapist ID\n   * @returns Array of clients assigned to the therapist\n   */\n  static async getByTherapistId(therapistId: string): Promise<Client[]> {\n    const { data, error } = await supabase\n      .from('clients')\n      .select('*')\n      .eq('therapist_id', therapistId);\n    \n    if (error) {\n      console.error('Error fetching clients by therapist ID:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Get clients with full user data\n   * @param filters - Optional filters to apply\n   * @returns Array of clients with user data\n   */\n  static async getWithUserData(filters?: Record<string, any>): Promise<any[]> {\n    let query = supabase\n      .from('clients')\n      .select(`\n        *,\n        users:user_id (*)\n      `);\n    \n    // Apply filters if provided\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        query = query.eq(key, value);\n      });\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      console.error('Error fetching clients with user data:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Create a new client\n   * @param client - Client data to insert\n   * @returns The created client or null if there was an error\n   */\n  static async create(client: InsertTables<'clients'>): Promise<Client | null> {\n    const { data, error } = await supabase\n      .from('clients')\n      .insert(client)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating client:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Update a client\n   * @param id - Client ID\n   * @param updates - Client data to update\n   * @returns The updated client or null if there was an error\n   */\n  static async update(id: string, updates: UpdateTables<'clients'>): Promise<Client | null> {\n    const { data, error } = await supabase\n      .from('clients')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating client:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Delete a client\n   * @param id - Client ID\n   * @returns True if successful, false otherwise\n   */\n  static async delete(id: string): Promise<boolean> {\n    const { error } = await supabase\n      .from('clients')\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      console.error('Error deleting client:', error);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Assign a client to a therapist\n   * @param clientId - Client ID\n   * @param therapistId - Therapist ID\n   * @returns The updated client or null if there was an error\n   */\n  static async assignToTherapist(clientId: string, therapistId: string): Promise<Client | null> {\n    const { data, error } = await supabase\n      .from('clients')\n      .update({ therapist_id: therapistId })\n      .eq('id', clientId)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error assigning client to therapist:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * List all clients with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of clients\n   */\n  static async list(page: number = 0, limit: number = 10): Promise<Client[]> {\n    const from = page * limit;\n    const to = from + limit - 1;\n    \n    const { data, error } = await supabase\n      .from('clients')\n      .select('*')\n      .range(from, to)\n      .order('created_at', { ascending: false });\n    \n    if (error) {\n      console.error('Error listing clients:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Count total number of clients\n   * @returns Total count of clients\n   */\n  static async count(): Promise<number> {\n    const { count, error } = await supabase\n      .from('clients')\n      .select('*', { count: 'exact', head: true });\n    \n    if (error) {\n      console.error('Error counting clients:', error);\n      return 0;\n    }\n    \n    return count || 0;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}