{"ast":null,"code":"var _jsxFileName = \"/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check for mock user in development mode\n    const checkUser = async () => {\n      try {\n        // Check if we have a mock user in localStorage (development only)\n        const mockUserJson = localStorage.getItem('smarttherapist_mock_user');\n        if (mockUserJson) {\n          const mockUser = JSON.parse(mockUserJson);\n          console.log('Using mock user for development:', mockUser);\n          setUser(mockUser);\n          setLoading(false);\n          return;\n        }\n\n        // Check for an active session\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          console.error('Error checking session:', error.message);\n          setLoading(false);\n          return;\n        }\n        if (!session) {\n          // In development mode, create a default mock user if none exists\n          const defaultMockUser = {\n            id: 'therapist-1',\n            email: 'therapist@example.com',\n            role: 'therapist',\n            name: 'Therapist User',\n            profile_data: {\n              name: 'Therapist User'\n            }\n          };\n          localStorage.setItem('smarttherapist_mock_user', JSON.stringify(defaultMockUser));\n          console.log('Created default mock user for development:', defaultMockUser);\n          setUser(defaultMockUser);\n          setLoading(false);\n          return;\n        }\n\n        // Get user profile data\n        const {\n          data: profile,\n          error: profileError\n        } = await supabase.from('users').select('*').eq('id', session.user.id).single();\n        if (profileError) {\n          console.error('Error fetching user profile:', profileError.message);\n        }\n\n        // Combine auth and profile data\n        const userData = {\n          ...session.user,\n          ...profile\n        };\n        setUser(userData);\n      } catch (error) {\n        console.error('Error in auth context:', error.message);\n\n        // In case of error, use a mock user in development mode\n        const defaultMockUser = {\n          id: 'therapist-1',\n          email: 'therapist@example.com',\n          role: 'therapist',\n          name: 'Therapist User',\n          profile_data: {\n            name: 'Therapist User'\n          }\n        };\n        localStorage.setItem('smarttherapist_mock_user', JSON.stringify(defaultMockUser));\n        console.log('Created default mock user after error:', defaultMockUser);\n        setUser(defaultMockUser);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkUser();\n\n    // Set up auth listener\n    const {\n      data: authListener\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\n      // In development mode, don't change the mock user on auth events\n      const mockUserStr = localStorage.getItem('smarttherapist_mock_user');\n      if (mockUserStr) {\n        return;\n      }\n      if (event === 'SIGNED_IN') {\n        // Similar logic as above for getting profile data\n        const {\n          data: profile,\n          error: profileError\n        } = await supabase.from('users').select('*').eq('id', session.user.id).single();\n        const userData = {\n          ...session.user,\n          ...profile\n        };\n        setUser(userData);\n      } else if (event === 'SIGNED_OUT') {\n        setUser(null);\n      }\n    });\n    return () => {\n      if (authListener) authListener.subscription.unsubscribe();\n    };\n  }, []);\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const {\n        data,\n        error\n      } = await supabase.auth.signInWithPassword({\n        email,\n        password\n      });\n      if (error) {\n        throw error;\n      }\n      return data;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signUp = async (email, password, userData) => {\n    try {\n      setLoading(true);\n\n      // Register user with Supabase Auth\n      const {\n        data: authData,\n        error: authError\n      } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      if (authError) {\n        throw authError;\n      }\n      if (authData.user) {\n        // Create user profile in database\n        const {\n          error: profileError\n        } = await supabase.from('users').insert([{\n          id: authData.user.id,\n          email: email,\n          role: userData.role || 'client',\n          created_at: new Date()\n        }]);\n        if (profileError) {\n          throw profileError;\n        }\n\n        // If user is a client, create client record\n        if (userData.role === 'client' || !userData.role) {\n          const {\n            error: clientError\n          } = await supabase.from('clients').insert([{\n            user_id: authData.user.id,\n            profile_data: userData.profile_data || {}\n          }]);\n          if (clientError) {\n            throw clientError;\n          }\n        }\n\n        // If user is a therapist, create therapist record\n        if (userData.role === 'therapist') {\n          const {\n            error: therapistError\n          } = await supabase.from('therapists').insert([{\n            user_id: authData.user.id,\n            credentials: userData.credentials || {},\n            availability: userData.availability || {}\n          }]);\n          if (therapistError) {\n            throw therapistError;\n          }\n        }\n      }\n      return authData;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = async () => {\n    try {\n      setLoading(true);\n\n      // Check if we're using a mock user\n      if (localStorage.getItem('smarttherapist_mock_user')) {\n        localStorage.removeItem('smarttherapist_mock_user');\n        setUser(null);\n        console.log('Mock user signed out');\n      } else {\n        // Regular Supabase sign out\n        const {\n          error\n        } = await supabase.auth.signOut();\n        if (error) {\n          throw error;\n        }\n        setUser(null);\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const resetPassword = async email => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.resetPasswordForEmail(email);\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const updatePassword = async newPassword => {\n    try {\n      setLoading(true);\n      const {\n        error\n      } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      error,\n      signIn,\n      signUp,\n      signOut,\n      resetPassword,\n      updatePassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 283,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","supabase","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","checkUser","mockUserJson","localStorage","getItem","mockUser","JSON","parse","console","log","data","session","auth","getSession","message","defaultMockUser","id","email","role","name","profile_data","setItem","stringify","profile","profileError","from","select","eq","single","userData","authListener","onAuthStateChange","event","mockUserStr","subscription","unsubscribe","signIn","password","signInWithPassword","signUp","authData","authError","insert","created_at","Date","clientError","user_id","therapistError","credentials","availability","signOut","removeItem","resetPassword","resetPasswordForEmail","updatePassword","newPassword","updateUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { supabase } from '../services/supabaseClient';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    // Check for mock user in development mode\n    const checkUser = async () => {\n      try {\n        // Check if we have a mock user in localStorage (development only)\n        const mockUserJson = localStorage.getItem('smarttherapist_mock_user');\n        if (mockUserJson) {\n          const mockUser = JSON.parse(mockUserJson);\n          console.log('Using mock user for development:', mockUser);\n          setUser(mockUser);\n          setLoading(false);\n          return;\n        }\n        \n        // Check for an active session\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          console.error('Error checking session:', error.message);\n          setLoading(false);\n          return;\n        }\n        \n        if (!session) {\n          // In development mode, create a default mock user if none exists\n          const defaultMockUser = {\n            id: 'therapist-1',\n            email: 'therapist@example.com',\n            role: 'therapist',\n            name: 'Therapist User',\n            profile_data: {\n              name: 'Therapist User'\n            }\n          };\n          \n          localStorage.setItem('smarttherapist_mock_user', JSON.stringify(defaultMockUser));\n          console.log('Created default mock user for development:', defaultMockUser);\n          setUser(defaultMockUser);\n          setLoading(false);\n          return;\n        }\n        \n        // Get user profile data\n        const { data: profile, error: profileError } = await supabase\n          .from('users')\n          .select('*')\n          .eq('id', session.user.id)\n          .single();\n          \n        if (profileError) {\n          console.error('Error fetching user profile:', profileError.message);\n        }\n        \n        // Combine auth and profile data\n        const userData = {\n          ...session.user,\n          ...profile\n        };\n        \n        setUser(userData);\n      } catch (error) {\n        console.error('Error in auth context:', error.message);\n        \n        // In case of error, use a mock user in development mode\n        const defaultMockUser = {\n          id: 'therapist-1',\n          email: 'therapist@example.com',\n          role: 'therapist',\n          name: 'Therapist User',\n          profile_data: {\n            name: 'Therapist User'\n          }\n        };\n        \n        localStorage.setItem('smarttherapist_mock_user', JSON.stringify(defaultMockUser));\n        console.log('Created default mock user after error:', defaultMockUser);\n        setUser(defaultMockUser);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    checkUser();\n    \n    // Set up auth listener\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        // In development mode, don't change the mock user on auth events\n        const mockUserStr = localStorage.getItem('smarttherapist_mock_user');\n        if (mockUserStr) {\n          return;\n        }\n        \n        if (event === 'SIGNED_IN') {\n          // Similar logic as above for getting profile data\n          const { data: profile, error: profileError } = await supabase\n            .from('users')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n            \n          const userData = {\n            ...session.user,\n            ...profile\n          };\n          \n          setUser(userData);\n        } else if (event === 'SIGNED_OUT') {\n          setUser(null);\n        }\n      }\n    );\n    \n    return () => {\n      if (authListener) authListener.subscription.unsubscribe();\n    };\n  }, []);\n\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      const { data, error } = await supabase.auth.signInWithPassword({ email, password });\n      \n      if (error) {\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signUp = async (email, password, userData) => {\n    try {\n      setLoading(true);\n      \n      // Register user with Supabase Auth\n      const { data: authData, error: authError } = await supabase.auth.signUp({\n        email,\n        password\n      });\n      \n      if (authError) {\n        throw authError;\n      }\n      \n      if (authData.user) {\n        // Create user profile in database\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert([\n            {\n              id: authData.user.id,\n              email: email,\n              role: userData.role || 'client',\n              created_at: new Date()\n            }\n          ]);\n          \n        if (profileError) {\n          throw profileError;\n        }\n        \n        // If user is a client, create client record\n        if (userData.role === 'client' || !userData.role) {\n          const { error: clientError } = await supabase\n            .from('clients')\n            .insert([\n              {\n                user_id: authData.user.id,\n                profile_data: userData.profile_data || {}\n              }\n            ]);\n            \n          if (clientError) {\n            throw clientError;\n          }\n        }\n        \n        // If user is a therapist, create therapist record\n        if (userData.role === 'therapist') {\n          const { error: therapistError } = await supabase\n            .from('therapists')\n            .insert([\n              {\n                user_id: authData.user.id,\n                credentials: userData.credentials || {},\n                availability: userData.availability || {}\n              }\n            ]);\n            \n          if (therapistError) {\n            throw therapistError;\n          }\n        }\n      }\n      \n      return authData;\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const signOut = async () => {\n    try {\n      setLoading(true);\n      \n      // Check if we're using a mock user\n      if (localStorage.getItem('smarttherapist_mock_user')) {\n        localStorage.removeItem('smarttherapist_mock_user');\n        setUser(null);\n        console.log('Mock user signed out');\n      } else {\n        // Regular Supabase sign out\n        const { error } = await supabase.auth.signOut();\n        \n        if (error) {\n          throw error;\n        }\n        \n        setUser(null);\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const resetPassword = async (email) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.resetPasswordForEmail(email);\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updatePassword = async (newPassword) => {\n    try {\n      setLoading(true);\n      const { error } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      \n      if (error) {\n        throw error;\n      }\n    } catch (error) {\n      setError(error.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        loading,\n        error,\n        signIn,\n        signUp,\n        signOut,\n        resetPassword,\n        updatePassword\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}