{"ast":null,"code":"/**\n * Client Model\n * \n * Provides methods for interacting with the clients table in Supabase.\n */\n\nimport { supabase } from '../services/supabaseClient';\nexport class ClientModel {\n  /**\n   * Get a client by ID\n   * @param id - Client ID\n   * @returns The client or null if not found\n   */\n  static async getById(id) {\n    const {\n      data,\n      error\n    } = await supabase.from('clients').select('*').eq('id', id).single();\n    if (error) {\n      console.error('Error fetching client:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Get a client by user ID\n   * @param userId - User ID\n   * @returns The client or null if not found\n   */\n  static async getByUserId(userId) {\n    const {\n      data,\n      error\n    } = await supabase.from('clients').select('*').eq('user_id', userId).single();\n    if (error) {\n      console.error('Error fetching client by user ID:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Get clients by therapist ID\n   * @param therapistId - Therapist ID\n   * @returns Array of clients assigned to the therapist\n   */\n  static async getByTherapistId(therapistId) {\n    const {\n      data,\n      error\n    } = await supabase.from('clients').select('*').eq('therapist_id', therapistId);\n    if (error) {\n      console.error('Error fetching clients by therapist ID:', error);\n      return [];\n    }\n    return data || [];\n  }\n\n  /**\n   * Get clients with full user data\n   * @param filters - Optional filters to apply\n   * @returns Array of clients with user data\n   */\n  static async getWithUserData(filters) {\n    let query = supabase.from('clients').select(`\n        *,\n        users:user_id (*)\n      `);\n\n    // Apply filters if provided\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        query = query.eq(key, value);\n      });\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      console.error('Error fetching clients with user data:', error);\n      return [];\n    }\n    return data || [];\n  }\n\n  /**\n   * Create a new client\n   * @param client - Client data to insert\n   * @returns The created client or null if there was an error\n   */\n  static async create(client) {\n    const {\n      data,\n      error\n    } = await supabase.from('clients').insert(client).select().single();\n    if (error) {\n      console.error('Error creating client:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Update a client\n   * @param id - Client ID\n   * @param updates - Client data to update\n   * @returns The updated client or null if there was an error\n   */\n  static async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('clients').update(updates).eq('id', id).select().single();\n    if (error) {\n      console.error('Error updating client:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Delete a client\n   * @param id - Client ID\n   * @returns True if successful, false otherwise\n   */\n  static async delete(id) {\n    const {\n      error\n    } = await supabase.from('clients').delete().eq('id', id);\n    if (error) {\n      console.error('Error deleting client:', error);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Assign a client to a therapist\n   * @param clientId - Client ID\n   * @param therapistId - Therapist ID\n   * @returns The updated client or null if there was an error\n   */\n  static async assignToTherapist(clientId, therapistId) {\n    const {\n      data,\n      error\n    } = await supabase.from('clients').update({\n      therapist_id: therapistId\n    }).eq('id', clientId).select().single();\n    if (error) {\n      console.error('Error assigning client to therapist:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * List all clients with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of clients\n   */\n  static async list(page = 0, limit = 10) {\n    const from = page * limit;\n    const to = from + limit - 1;\n    const {\n      data,\n      error\n    } = await supabase.from('clients').select('*').range(from, to).order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Error listing clients:', error);\n      return [];\n    }\n    return data || [];\n  }\n\n  /**\n   * Count total number of clients\n   * @returns Total count of clients\n   */\n  static async count() {\n    const {\n      count,\n      error\n    } = await supabase.from('clients').select('*', {\n      count: 'exact',\n      head: true\n    });\n    if (error) {\n      console.error('Error counting clients:', error);\n      return 0;\n    }\n    return count || 0;\n  }\n}","map":{"version":3,"names":["supabase","ClientModel","getById","id","data","error","from","select","eq","single","console","getByUserId","userId","getByTherapistId","therapistId","getWithUserData","filters","query","Object","entries","forEach","key","value","create","client","insert","update","updates","delete","assignToTherapist","clientId","therapist_id","list","page","limit","to","range","order","ascending","count","head"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/models/ClientModel.ts"],"sourcesContent":["/**\n * Client Model\n * \n * Provides methods for interacting with the clients table in Supabase.\n */\n\nimport { supabase } from '../services/supabaseClient';\nimport { Client, InsertTables, UpdateTables } from '../types/supabase';\n\nexport class ClientModel {\n  /**\n   * Get a client by ID\n   * @param id - Client ID\n   * @returns The client or null if not found\n   */\n  static async getById(id: string): Promise<Client | null> {\n    const { data, error } = await supabase\n      .from('clients')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching client:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get a client by user ID\n   * @param userId - User ID\n   * @returns The client or null if not found\n   */\n  static async getByUserId(userId: string): Promise<Client | null> {\n    const { data, error } = await supabase\n      .from('clients')\n      .select('*')\n      .eq('user_id', userId)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching client by user ID:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get clients by therapist ID\n   * @param therapistId - Therapist ID\n   * @returns Array of clients assigned to the therapist\n   */\n  static async getByTherapistId(therapistId: string): Promise<Client[]> {\n    const { data, error } = await supabase\n      .from('clients')\n      .select('*')\n      .eq('therapist_id', therapistId);\n    \n    if (error) {\n      console.error('Error fetching clients by therapist ID:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Get clients with full user data\n   * @param filters - Optional filters to apply\n   * @returns Array of clients with user data\n   */\n  static async getWithUserData(filters?: Record<string, any>): Promise<any[]> {\n    let query = supabase\n      .from('clients')\n      .select(`\n        *,\n        users:user_id (*)\n      `);\n    \n    // Apply filters if provided\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        query = query.eq(key, value);\n      });\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      console.error('Error fetching clients with user data:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Create a new client\n   * @param client - Client data to insert\n   * @returns The created client or null if there was an error\n   */\n  static async create(client: InsertTables<'clients'>): Promise<Client | null> {\n    const { data, error } = await supabase\n      .from('clients')\n      .insert(client)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating client:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Update a client\n   * @param id - Client ID\n   * @param updates - Client data to update\n   * @returns The updated client or null if there was an error\n   */\n  static async update(id: string, updates: UpdateTables<'clients'>): Promise<Client | null> {\n    const { data, error } = await supabase\n      .from('clients')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating client:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Delete a client\n   * @param id - Client ID\n   * @returns True if successful, false otherwise\n   */\n  static async delete(id: string): Promise<boolean> {\n    const { error } = await supabase\n      .from('clients')\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      console.error('Error deleting client:', error);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Assign a client to a therapist\n   * @param clientId - Client ID\n   * @param therapistId - Therapist ID\n   * @returns The updated client or null if there was an error\n   */\n  static async assignToTherapist(clientId: string, therapistId: string): Promise<Client | null> {\n    const { data, error } = await supabase\n      .from('clients')\n      .update({ therapist_id: therapistId })\n      .eq('id', clientId)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error assigning client to therapist:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * List all clients with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of clients\n   */\n  static async list(page: number = 0, limit: number = 10): Promise<Client[]> {\n    const from = page * limit;\n    const to = from + limit - 1;\n    \n    const { data, error } = await supabase\n      .from('clients')\n      .select('*')\n      .range(from, to)\n      .order('created_at', { ascending: false });\n    \n    if (error) {\n      console.error('Error listing clients:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Count total number of clients\n   * @returns Total count of clients\n   */\n  static async count(): Promise<number> {\n    const { count, error } = await supabase\n      .from('clients')\n      .select('*', { count: 'exact', head: true });\n    \n    if (error) {\n      console.error('Error counting clients:', error);\n      return 0;\n    }\n    \n    return count || 0;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}