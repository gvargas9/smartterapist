{"ast":null,"code":"/**\n * Therapist Model\n * \n * Provides methods for interacting with the therapists table in Supabase.\n */\n\nimport { supabase } from '../services/supabaseClient';\nexport class TherapistModel {\n  /**\n   * Get a therapist by ID\n   * @param id - Therapist ID\n   * @returns The therapist or null if not found\n   */\n  static async getById(id) {\n    const {\n      data,\n      error\n    } = await supabase.from('therapists').select('*').eq('id', id).single();\n    if (error) {\n      console.error('Error fetching therapist:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Get a therapist by user ID\n   * @param userId - User ID\n   * @returns The therapist or null if not found\n   */\n  static async getByUserId(userId) {\n    const {\n      data,\n      error\n    } = await supabase.from('therapists').select('*').eq('user_id', userId).single();\n    if (error) {\n      console.error('Error fetching therapist by user ID:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Get therapists with full user data\n   * @param filters - Optional filters to apply\n   * @returns Array of therapists with user data\n   */\n  static async getWithUserData(filters) {\n    let query = supabase.from('therapists').select(`\n        *,\n        users:user_id (*)\n      `);\n\n    // Apply filters if provided\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        query = query.eq(key, value);\n      });\n    }\n    const {\n      data,\n      error\n    } = await query;\n    if (error) {\n      console.error('Error fetching therapists with user data:', error);\n      return [];\n    }\n    return data || [];\n  }\n\n  /**\n   * Get therapists by specialty\n   * @param specialty - Specialty to search for\n   * @returns Array of therapists with the specified specialty\n   */\n  static async getBySpecialty(specialty) {\n    const {\n      data,\n      error\n    } = await supabase.from('therapists').select('*').contains('specialties', [specialty]);\n    if (error) {\n      console.error('Error fetching therapists by specialty:', error);\n      return [];\n    }\n    return data || [];\n  }\n\n  /**\n   * Create a new therapist\n   * @param therapist - Therapist data to insert\n   * @returns The created therapist or null if there was an error\n   */\n  static async create(therapist) {\n    const {\n      data,\n      error\n    } = await supabase.from('therapists').insert(therapist).select().single();\n    if (error) {\n      console.error('Error creating therapist:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Update a therapist\n   * @param id - Therapist ID\n   * @param updates - Therapist data to update\n   * @returns The updated therapist or null if there was an error\n   */\n  static async update(id, updates) {\n    const {\n      data,\n      error\n    } = await supabase.from('therapists').update(updates).eq('id', id).select().single();\n    if (error) {\n      console.error('Error updating therapist:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Delete a therapist\n   * @param id - Therapist ID\n   * @returns True if successful, false otherwise\n   */\n  static async delete(id) {\n    const {\n      error\n    } = await supabase.from('therapists').delete().eq('id', id);\n    if (error) {\n      console.error('Error deleting therapist:', error);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Get all clients assigned to a therapist\n   * @param therapistId - Therapist ID\n   * @returns Array of clients assigned to the therapist\n   */\n  static async getClients(therapistId) {\n    const {\n      data,\n      error\n    } = await supabase.from('clients').select(`\n        *,\n        users:user_id (*)\n      `).eq('therapist_id', therapistId);\n    if (error) {\n      console.error('Error fetching therapist clients:', error);\n      return [];\n    }\n    return data || [];\n  }\n\n  /**\n   * Update therapist availability\n   * @param id - Therapist ID\n   * @param availability - Availability data\n   * @returns The updated therapist or null if there was an error\n   */\n  static async updateAvailability(id, availability) {\n    const {\n      data,\n      error\n    } = await supabase.from('therapists').update({\n      availability\n    }).eq('id', id).select().single();\n    if (error) {\n      console.error('Error updating therapist availability:', error);\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * List all therapists with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of therapists\n   */\n  static async list(page = 0, limit = 10) {\n    const from = page * limit;\n    const to = from + limit - 1;\n    const {\n      data,\n      error\n    } = await supabase.from('therapists').select('*').range(from, to).order('created_at', {\n      ascending: false\n    });\n    if (error) {\n      console.error('Error listing therapists:', error);\n      return [];\n    }\n    return data || [];\n  }\n\n  /**\n   * Count total number of therapists\n   * @returns Total count of therapists\n   */\n  static async count() {\n    const {\n      count,\n      error\n    } = await supabase.from('therapists').select('*', {\n      count: 'exact',\n      head: true\n    });\n    if (error) {\n      console.error('Error counting therapists:', error);\n      return 0;\n    }\n    return count || 0;\n  }\n}","map":{"version":3,"names":["supabase","TherapistModel","getById","id","data","error","from","select","eq","single","console","getByUserId","userId","getWithUserData","filters","query","Object","entries","forEach","key","value","getBySpecialty","specialty","contains","create","therapist","insert","update","updates","delete","getClients","therapistId","updateAvailability","availability","list","page","limit","to","range","order","ascending","count","head"],"sources":["/Users/gio/development/smartterapist/CascadeProjects/windsurf-project/client/src/models/TherapistModel.ts"],"sourcesContent":["/**\n * Therapist Model\n * \n * Provides methods for interacting with the therapists table in Supabase.\n */\n\nimport { supabase } from '../services/supabaseClient';\nimport { Therapist, InsertTables, UpdateTables } from '../types/supabase';\n\nexport class TherapistModel {\n  /**\n   * Get a therapist by ID\n   * @param id - Therapist ID\n   * @returns The therapist or null if not found\n   */\n  static async getById(id: string): Promise<Therapist | null> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .select('*')\n      .eq('id', id)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching therapist:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get a therapist by user ID\n   * @param userId - User ID\n   * @returns The therapist or null if not found\n   */\n  static async getByUserId(userId: string): Promise<Therapist | null> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .select('*')\n      .eq('user_id', userId)\n      .single();\n    \n    if (error) {\n      console.error('Error fetching therapist by user ID:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Get therapists with full user data\n   * @param filters - Optional filters to apply\n   * @returns Array of therapists with user data\n   */\n  static async getWithUserData(filters?: Record<string, any>): Promise<any[]> {\n    let query = supabase\n      .from('therapists')\n      .select(`\n        *,\n        users:user_id (*)\n      `);\n    \n    // Apply filters if provided\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        query = query.eq(key, value);\n      });\n    }\n    \n    const { data, error } = await query;\n    \n    if (error) {\n      console.error('Error fetching therapists with user data:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Get therapists by specialty\n   * @param specialty - Specialty to search for\n   * @returns Array of therapists with the specified specialty\n   */\n  static async getBySpecialty(specialty: string): Promise<Therapist[]> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .select('*')\n      .contains('specialties', [specialty]);\n    \n    if (error) {\n      console.error('Error fetching therapists by specialty:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Create a new therapist\n   * @param therapist - Therapist data to insert\n   * @returns The created therapist or null if there was an error\n   */\n  static async create(therapist: InsertTables<'therapists'>): Promise<Therapist | null> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .insert(therapist)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error creating therapist:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Update a therapist\n   * @param id - Therapist ID\n   * @param updates - Therapist data to update\n   * @returns The updated therapist or null if there was an error\n   */\n  static async update(id: string, updates: UpdateTables<'therapists'>): Promise<Therapist | null> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .update(updates)\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating therapist:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * Delete a therapist\n   * @param id - Therapist ID\n   * @returns True if successful, false otherwise\n   */\n  static async delete(id: string): Promise<boolean> {\n    const { error } = await supabase\n      .from('therapists')\n      .delete()\n      .eq('id', id);\n    \n    if (error) {\n      console.error('Error deleting therapist:', error);\n      return false;\n    }\n    \n    return true;\n  }\n\n  /**\n   * Get all clients assigned to a therapist\n   * @param therapistId - Therapist ID\n   * @returns Array of clients assigned to the therapist\n   */\n  static async getClients(therapistId: string): Promise<any[]> {\n    const { data, error } = await supabase\n      .from('clients')\n      .select(`\n        *,\n        users:user_id (*)\n      `)\n      .eq('therapist_id', therapistId);\n    \n    if (error) {\n      console.error('Error fetching therapist clients:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Update therapist availability\n   * @param id - Therapist ID\n   * @param availability - Availability data\n   * @returns The updated therapist or null if there was an error\n   */\n  static async updateAvailability(id: string, availability: any): Promise<Therapist | null> {\n    const { data, error } = await supabase\n      .from('therapists')\n      .update({ availability })\n      .eq('id', id)\n      .select()\n      .single();\n    \n    if (error) {\n      console.error('Error updating therapist availability:', error);\n      return null;\n    }\n    \n    return data;\n  }\n\n  /**\n   * List all therapists with pagination\n   * @param page - Page number (starting from 0)\n   * @param limit - Number of items per page\n   * @returns Array of therapists\n   */\n  static async list(page: number = 0, limit: number = 10): Promise<Therapist[]> {\n    const from = page * limit;\n    const to = from + limit - 1;\n    \n    const { data, error } = await supabase\n      .from('therapists')\n      .select('*')\n      .range(from, to)\n      .order('created_at', { ascending: false });\n    \n    if (error) {\n      console.error('Error listing therapists:', error);\n      return [];\n    }\n    \n    return data || [];\n  }\n\n  /**\n   * Count total number of therapists\n   * @returns Total count of therapists\n   */\n  static async count(): Promise<number> {\n    const { count, error } = await supabase\n      .from('therapists')\n      .select('*', { count: 'exact', head: true });\n    \n    if (error) {\n      console.error('Error counting therapists:', error);\n      return 0;\n    }\n    \n    return count || 0;\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,4BAA4B;AAGrD,OAAO,MAAMC,cAAc,CAAC;EAC1B;AACF;AACA;AACA;AACA;EACE,aAAaC,OAAOA,CAACC,EAAU,EAA6B;IAC1D,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,IAAI,EAAEL,EAAE,CAAC,CACZM,MAAM,CAAC,CAAC;IAEX,IAAIJ,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,IAAI;IACb;IAEA,OAAOD,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAaO,WAAWA,CAACC,MAAc,EAA6B;IAClE,MAAM;MAAER,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,SAAS,EAAEI,MAAM,CAAC,CACrBH,MAAM,CAAC,CAAC;IAEX,IAAIJ,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,OAAO,IAAI;IACb;IAEA,OAAOD,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAaS,eAAeA,CAACC,OAA6B,EAAkB;IAC1E,IAAIC,KAAK,GAAGf,QAAQ,CACjBM,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC;AACd;AACA;AACA,OAAO,CAAC;;IAEJ;IACA,IAAIO,OAAO,EAAE;MACXE,MAAM,CAACC,OAAO,CAACH,OAAO,CAAC,CAACI,OAAO,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,KAAK;QAChDL,KAAK,GAAGA,KAAK,CAACP,EAAE,CAACW,GAAG,EAAEC,KAAK,CAAC;MAC9B,CAAC,CAAC;IACJ;IAEA,MAAM;MAAEhB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAMU,KAAK;IAEnC,IAAIV,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACjE,OAAO,EAAE;IACX;IAEA,OAAOD,IAAI,IAAI,EAAE;EACnB;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAaiB,cAAcA,CAACC,SAAiB,EAAwB;IACnE,MAAM;MAAElB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,GAAG,CAAC,CACXgB,QAAQ,CAAC,aAAa,EAAE,CAACD,SAAS,CAAC,CAAC;IAEvC,IAAIjB,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MAC/D,OAAO,EAAE;IACX;IAEA,OAAOD,IAAI,IAAI,EAAE;EACnB;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAaoB,MAAMA,CAACC,SAAqC,EAA6B;IACpF,MAAM;MAAErB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,YAAY,CAAC,CAClBoB,MAAM,CAACD,SAAS,CAAC,CACjBlB,MAAM,CAAC,CAAC,CACRE,MAAM,CAAC,CAAC;IAEX,IAAIJ,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,IAAI;IACb;IAEA,OAAOD,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,aAAauB,MAAMA,CAACxB,EAAU,EAAEyB,OAAmC,EAA6B;IAC9F,MAAM;MAAExB,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,YAAY,CAAC,CAClBqB,MAAM,CAACC,OAAO,CAAC,CACfpB,EAAE,CAAC,IAAI,EAAEL,EAAE,CAAC,CACZI,MAAM,CAAC,CAAC,CACRE,MAAM,CAAC,CAAC;IAEX,IAAIJ,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,IAAI;IACb;IAEA,OAAOD,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAayB,MAAMA,CAAC1B,EAAU,EAAoB;IAChD,MAAM;MAAEE;IAAM,CAAC,GAAG,MAAML,QAAQ,CAC7BM,IAAI,CAAC,YAAY,CAAC,CAClBuB,MAAM,CAAC,CAAC,CACRrB,EAAE,CAAC,IAAI,EAAEL,EAAE,CAAC;IAEf,IAAIE,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE,aAAayB,UAAUA,CAACC,WAAmB,EAAkB;IAC3D,MAAM;MAAE3B,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,SAAS,CAAC,CACfC,MAAM,CAAC;AACd;AACA;AACA,OAAO,CAAC,CACDC,EAAE,CAAC,cAAc,EAAEuB,WAAW,CAAC;IAElC,IAAI1B,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,OAAO,EAAE;IACX;IAEA,OAAOD,IAAI,IAAI,EAAE;EACnB;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,aAAa4B,kBAAkBA,CAAC7B,EAAU,EAAE8B,YAAiB,EAA6B;IACxF,MAAM;MAAE7B,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,YAAY,CAAC,CAClBqB,MAAM,CAAC;MAAEM;IAAa,CAAC,CAAC,CACxBzB,EAAE,CAAC,IAAI,EAAEL,EAAE,CAAC,CACZI,MAAM,CAAC,CAAC,CACRE,MAAM,CAAC,CAAC;IAEX,IAAIJ,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D,OAAO,IAAI;IACb;IAEA,OAAOD,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,aAAa8B,IAAIA,CAACC,IAAY,GAAG,CAAC,EAAEC,KAAa,GAAG,EAAE,EAAwB;IAC5E,MAAM9B,IAAI,GAAG6B,IAAI,GAAGC,KAAK;IACzB,MAAMC,EAAE,GAAG/B,IAAI,GAAG8B,KAAK,GAAG,CAAC;IAE3B,MAAM;MAAEhC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,GAAG,CAAC,CACX+B,KAAK,CAAChC,IAAI,EAAE+B,EAAE,CAAC,CACfE,KAAK,CAAC,YAAY,EAAE;MAAEC,SAAS,EAAE;IAAM,CAAC,CAAC;IAE5C,IAAInC,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,EAAE;IACX;IAEA,OAAOD,IAAI,IAAI,EAAE;EACnB;;EAEA;AACF;AACA;AACA;EACE,aAAaqC,KAAKA,CAAA,EAAoB;IACpC,MAAM;MAAEA,KAAK;MAAEpC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACpCM,IAAI,CAAC,YAAY,CAAC,CAClBC,MAAM,CAAC,GAAG,EAAE;MAAEkC,KAAK,EAAE,OAAO;MAAEC,IAAI,EAAE;IAAK,CAAC,CAAC;IAE9C,IAAIrC,KAAK,EAAE;MACTK,OAAO,CAACL,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,CAAC;IACV;IAEA,OAAOoC,KAAK,IAAI,CAAC;EACnB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}